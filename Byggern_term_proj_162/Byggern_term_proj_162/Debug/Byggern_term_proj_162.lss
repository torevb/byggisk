
Byggern_term_proj_162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f2  00800100  00001896  0000192a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001896  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  008001f2  008001f2  00001a1c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000300  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e4a  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001082  00000000  00000000  00004bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f26  00000000  00000000  00005c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000718  00000000  00000000  00006b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000900  00000000  00000000  00007284  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001509  00000000  00000000  00007b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f8  00000000  00000000  0000908d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__vector_1>
       8:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__vector_2>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	11 e0       	ldi	r17, 0x01	; 1
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e6 e9       	ldi	r30, 0x96	; 150
     200:	f8 e1       	ldi	r31, 0x18	; 24
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a2 3f       	cpi	r26, 0xF2	; 242
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	22 e0       	ldi	r18, 0x02	; 2
     210:	a2 ef       	ldi	r26, 0xF2	; 242
     212:	b1 e0       	ldi	r27, 0x01	; 1
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a9 35       	cpi	r26, 0x59	; 89
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 15 01 	call	0x22a	; 0x22a <main>
     222:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <main>:
#define BAUD 9600
#define FOSC 4915200
#define MYUBRR FOSC/16/BAUD-1


int main(void){	
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
     232:	a4 97       	sbiw	r28, 0x24	; 36
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	de bf       	out	0x3e, r29	; 62
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	cd bf       	out	0x3d, r28	; 61
	DDRE=0x3;
     23e:	13 e0       	ldi	r17, 0x03	; 3
     240:	16 b9       	out	0x06, r17	; 6
	DDRA=0xFF;
     242:	8f ef       	ldi	r24, 0xFF	; 255
     244:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
     246:	1b ba       	out	0x1b, r1	; 27
	PORTE=0x2;
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	87 b9       	out	0x07, r24	; 7
	
	UART_Init(MYUBRR);
     24c:	8f e1       	ldi	r24, 0x1F	; 31
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 81 07 	call	0xf02	; 0xf02 <UART_Init>
	printf("Atmega162 start\n");
     254:	86 e0       	ldi	r24, 0x06	; 6
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	0e 94 01 08 	call	0x1002	; 0x1002 <puts>
	
	SRAM_init();
     25c:	0e 94 74 07 	call	0xee8	; 0xee8 <SRAM_init>
	adc_init();
     260:	0e 94 04 04 	call	0x808	; 0x808 <adc_init>
	CAN_init();
     264:	0e 94 db 01 	call	0x3b6	; 0x3b6 <CAN_init>
	slider_init();
     268:	0e 94 3b 07 	call	0xe76	; 0xe76 <slider_init>
	joy_init();
     26c:	0e 94 24 03 	call	0x648	; 0x648 <joy_init>
	reset_highscores();
     270:	0e 94 84 02 	call	0x508	; 0x508 <reset_highscores>
	menu_init();
     274:	0e 94 06 04 	call	0x80c	; 0x80c <menu_init>
	
	CAN_struct send_msg;
	send_msg.ID = NODE1_ID;
     278:	8b e0       	ldi	r24, 0x0B	; 11
     27a:	89 83       	std	Y+1, r24	; 0x01
	send_msg.length=4;
     27c:	84 e0       	ldi	r24, 0x04	; 4
     27e:	8a 83       	std	Y+2, r24	; 0x02
	
	CAN_struct rcv_msg;
	rcv_msg.ID = RCV_ID;
     280:	1b 8b       	std	Y+19, r17	; 0x13
	rcv_msg.length = 4;
     282:	8c 8b       	std	Y+20, r24	; 0x14
	
	int8_t previous_slider_pos=-128;
	uint8_t current_highscore = 0;
	uint8_t previous_highscore=0;

	leave_game_flag = 0;
     284:	10 92 29 02 	sts	0x0229, r1
	
	send_msg.data[3] = 0;	//highscore value
     288:	1a 86       	std	Y+10, r1	; 0x0a
     28a:	19 86       	std	Y+9, r1	; 0x09
	
	rcv_msg.data[0] = 0;	//joy_x
     28c:	1e 8a       	std	Y+22, r1	; 0x16
     28e:	1d 8a       	std	Y+21, r1	; 0x15
	rcv_msg.data[1] = 0;	//slider_left
     290:	18 8e       	std	Y+24, r1	; 0x18
     292:	1f 8a       	std	Y+23, r1	; 0x17
	rcv_msg.data[2] = 0;	//button_left / interrupt
     294:	1a 8e       	std	Y+26, r1	; 0x1a
     296:	19 8e       	std	Y+25, r1	; 0x19
	
	
	menu_print();
     298:	0e 94 a6 04 	call	0x94c	; 0x94c <menu_print>
	rcv_msg.ID = RCV_ID;
	rcv_msg.length = 4;
	
	
	int8_t previous_slider_pos=-128;
	uint8_t current_highscore = 0;
     29c:	d1 2c       	mov	r13, r1
	CAN_struct rcv_msg;
	rcv_msg.ID = RCV_ID;
	rcv_msg.length = 4;
	
	
	int8_t previous_slider_pos=-128;
     29e:	68 94       	set
     2a0:	bb 24       	eor	r11, r11
     2a2:	b7 f8       	bld	r11, 7
		send_msg.data[2] = 0;	//button_left / interrupt	<---
		
		joy_relative_pos();
		
		if (current_node==&ingame_node){
			int8_t current_joy_x = rel_position.x_pos;
     2a4:	08 e1       	ldi	r16, 0x18	; 24
     2a6:	12 e0       	ldi	r17, 0x02	; 2
				current_slide_pos = 0;
			}
			send_msg.data[1] = current_slide_pos;
			
			if(solenoid_flag == 1){ /* detected button push->send data*/
				send_msg.data[2] = 1;
     2a8:	ee 24       	eor	r14, r14
     2aa:	e3 94       	inc	r14
     2ac:	f1 2c       	mov	r15, r1
	menu_print();
	

	
	while(1){
		send_msg.data[0] = 0;	//joy_x						<---
     2ae:	1c 82       	std	Y+4, r1	; 0x04
     2b0:	1b 82       	std	Y+3, r1	; 0x03
		send_msg.data[1] = 0;	//slider_left				<---
     2b2:	1e 82       	std	Y+6, r1	; 0x06
     2b4:	1d 82       	std	Y+5, r1	; 0x05
		send_msg.data[2] = 0;	//button_left / interrupt	<---
     2b6:	18 86       	std	Y+8, r1	; 0x08
     2b8:	1f 82       	std	Y+7, r1	; 0x07
		
		joy_relative_pos();
     2ba:	0e 94 35 03 	call	0x66a	; 0x66a <joy_relative_pos>
		
		if (current_node==&ingame_node){
     2be:	20 91 2a 02 	lds	r18, 0x022A
     2c2:	30 91 2b 02 	lds	r19, 0x022B
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	24 3f       	cpi	r18, 0xF4	; 244
     2ca:	38 07       	cpc	r19, r24
     2cc:	f1 f5       	brne	.+124    	; 0x34a <main+0x120>
			int8_t current_joy_x = rel_position.x_pos;
			send_msg.data[0] = current_joy_x;
     2ce:	f8 01       	movw	r30, r16
     2d0:	80 81       	ld	r24, Z
     2d2:	99 27       	eor	r25, r25
     2d4:	87 fd       	sbrc	r24, 7
     2d6:	90 95       	com	r25
     2d8:	9c 83       	std	Y+4, r25	; 0x04
     2da:	8b 83       	std	Y+3, r24	; 0x03
			
			int8_t current_slide_pos = get_slider_pos(SLIDE_L);
     2dc:	86 e0       	ldi	r24, 0x06	; 6
     2de:	0e 94 47 07 	call	0xe8e	; 0xe8e <get_slider_pos>
     2e2:	c8 2e       	mov	r12, r24
			if((current_slide_pos>=previous_slider_pos+SLIDER_TRESHOLD)||(current_slide_pos<=previous_slider_pos-SLIDER_TRESHOLD)){
     2e4:	28 2f       	mov	r18, r24
     2e6:	33 27       	eor	r19, r19
     2e8:	27 fd       	sbrc	r18, 7
     2ea:	30 95       	com	r19
     2ec:	4b 2d       	mov	r20, r11
     2ee:	55 27       	eor	r21, r21
     2f0:	47 fd       	sbrc	r20, 7
     2f2:	50 95       	com	r21
     2f4:	ca 01       	movw	r24, r20
     2f6:	05 96       	adiw	r24, 0x05	; 5
     2f8:	28 17       	cp	r18, r24
     2fa:	39 07       	cpc	r19, r25
     2fc:	44 f4       	brge	.+16     	; 0x30e <main+0xe4>
     2fe:	45 50       	subi	r20, 0x05	; 5
     300:	51 09       	sbc	r21, r1
     302:	42 17       	cp	r20, r18
     304:	53 07       	cpc	r21, r19
     306:	2c f4       	brge	.+10     	; 0x312 <main+0xe8>
     308:	cb 2c       	mov	r12, r11
				previous_slider_pos = current_slide_pos;
			}
			else{
				current_slide_pos = 0;
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	03 c0       	rjmp	.+6      	; 0x314 <main+0xea>
		
		if (current_node==&ingame_node){
			int8_t current_joy_x = rel_position.x_pos;
			send_msg.data[0] = current_joy_x;
			
			int8_t current_slide_pos = get_slider_pos(SLIDE_L);
     30e:	2c 2d       	mov	r18, r12
     310:	01 c0       	rjmp	.+2      	; 0x314 <main+0xea>
     312:	2c 2d       	mov	r18, r12
				previous_slider_pos = current_slide_pos;
			}
			else{
				current_slide_pos = 0;
			}
			send_msg.data[1] = current_slide_pos;
     314:	33 27       	eor	r19, r19
     316:	27 fd       	sbrc	r18, 7
     318:	30 95       	com	r19
     31a:	3e 83       	std	Y+6, r19	; 0x06
     31c:	2d 83       	std	Y+5, r18	; 0x05
			
			if(solenoid_flag == 1){ /* detected button push->send data*/
     31e:	80 91 28 02 	lds	r24, 0x0228
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	21 f4       	brne	.+8      	; 0x32e <main+0x104>
				send_msg.data[2] = 1;
     326:	f8 86       	std	Y+8, r15	; 0x08
     328:	ef 82       	std	Y+7, r14	; 0x07
				solenoid_flag = 0;
     32a:	10 92 28 02 	sts	0x0228, r1
			}
			
			if (rcv_msg.data[3] != 0){		//highscore value
     32e:	2b 8d       	ldd	r18, Y+27	; 0x1b
     330:	3c 8d       	ldd	r19, Y+28	; 0x1c
     332:	21 15       	cp	r18, r1
     334:	31 05       	cpc	r19, r1
     336:	99 f1       	breq	.+102    	; 0x39e <main+0x174>
				current_highscore += rcv_msg.data[3];
     338:	c9 01       	movw	r24, r18
     33a:	8d 0d       	add	r24, r13
     33c:	91 1d       	adc	r25, r1
     33e:	d8 2e       	mov	r13, r24
				menu_score(current_highscore);
     340:	99 27       	eor	r25, r25
     342:	0e 94 09 05 	call	0xa12	; 0xa12 <menu_score>
     346:	bc 2c       	mov	r11, r12
     348:	2b c0       	rjmp	.+86     	; 0x3a0 <main+0x176>
				previous_highscore=current_highscore;
			}
		}
		else if (leave_game_flag == 1){
     34a:	80 91 29 02 	lds	r24, 0x0229
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	39 f4       	brne	.+14     	; 0x360 <main+0x136>
			store_highscore(current_highscore);
     352:	8d 2d       	mov	r24, r13
     354:	0e 94 91 02 	call	0x522	; 0x522 <store_highscore>
			current_highscore=0;
			previous_highscore=0;
			leave_game_flag = 0;
     358:	10 92 29 02 	sts	0x0229, r1
				previous_highscore=current_highscore;
			}
		}
		else if (leave_game_flag == 1){
			store_highscore(current_highscore);
			current_highscore=0;
     35c:	d1 2c       	mov	r13, r1
     35e:	20 c0       	rjmp	.+64     	; 0x3a0 <main+0x176>
			previous_highscore=0;
			leave_game_flag = 0;
		}
		else if (current_node == &highscore_node){
     360:	f2 e0       	ldi	r31, 0x02	; 2
     362:	2c 31       	cpi	r18, 0x1C	; 28
     364:	3f 07       	cpc	r19, r31
     366:	19 f4       	brne	.+6      	; 0x36e <main+0x144>
			menu_highscore();
     368:	0e 94 c3 02 	call	0x586	; 0x586 <menu_highscore>
     36c:	19 c0       	rjmp	.+50     	; 0x3a0 <main+0x176>
		}
		else if(current_node== &draw_node){
     36e:	2c 50       	subi	r18, 0x0C	; 12
     370:	32 40       	sbci	r19, 0x02	; 2
     372:	49 f4       	brne	.+18     	; 0x386 <main+0x15c>
		
			draw_OLED();
     374:	0e 94 32 07 	call	0xe64	; 0xe64 <draw_OLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     378:	ef e4       	ldi	r30, 0x4F	; 79
     37a:	f3 ec       	ldi	r31, 0xC3	; 195
     37c:	31 97       	sbiw	r30, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <main+0x152>
     380:	00 c0       	rjmp	.+0      	; 0x382 <main+0x158>
     382:	00 00       	nop
     384:	0d c0       	rjmp	.+26     	; 0x3a0 <main+0x176>
			_delay_ms(200);
		}
		else{
			menu_arrow();
     386:	0e 94 7f 04 	call	0x8fe	; 0x8fe <menu_arrow>
     38a:	ff e7       	ldi	r31, 0x7F	; 127
     38c:	28 e3       	ldi	r18, 0x38	; 56
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	f1 50       	subi	r31, 0x01	; 1
     392:	20 40       	sbci	r18, 0x00	; 0
     394:	80 40       	sbci	r24, 0x00	; 0
     396:	e1 f7       	brne	.-8      	; 0x390 <main+0x166>
     398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x170>
     39a:	00 00       	nop
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <main+0x176>
     39e:	bc 2c       	mov	r11, r12
			_delay_ms(400);
		}	
		
		send_CAN_message(&send_msg);
     3a0:	ce 01       	movw	r24, r28
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_CAN_message>
		
		rcv_msg.data[3] = 0;	//highscore value			<---
     3a8:	1c 8e       	std	Y+28, r1	; 0x1c
     3aa:	1b 8e       	std	Y+27, r1	; 0x1b
		
		rcv_CAN_message(& rcv_msg);
     3ac:	ce 01       	movw	r24, r28
     3ae:	43 96       	adiw	r24, 0x13	; 19
     3b0:	0e 94 39 02 	call	0x472	; 0x472 <rcv_CAN_message>
		
	}
     3b4:	7c cf       	rjmp	.-264    	; 0x2ae <main+0x84>

000003b6 <CAN_init>:
#define RX0IF 0



void CAN_init(){
	MCP2515_init();
     3b6:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <MCP2515_init>
	
	bit_modify_MCP2515(MCP_RXB0CTRL, 0b01100000, 0xff);//set filters off
     3ba:	4f ef       	ldi	r20, 0xFF	; 255
     3bc:	60 e6       	ldi	r22, 0x60	; 96
     3be:	80 e6       	ldi	r24, 0x60	; 96
     3c0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <bit_modify_MCP2515>
	bit_modify_MCP2515( MCP_RXB0CTRL, 0b00000100, 0x00);//set rollover off
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	64 e0       	ldi	r22, 0x04	; 4
     3c8:	80 e6       	ldi	r24, 0x60	; 96
     3ca:	0e 94 d6 03 	call	0x7ac	; 0x7ac <bit_modify_MCP2515>

	bit_modify_MCP2515(MCP_CANINTE, 0x05, 0b00000101);//Set RX0 full and TX0 empty enable interrupt
     3ce:	45 e0       	ldi	r20, 0x05	; 5
     3d0:	65 e0       	ldi	r22, 0x05	; 5
     3d2:	8b e2       	ldi	r24, 0x2B	; 43
     3d4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <bit_modify_MCP2515>
	
	
	bit_modify_MCP2515(MCP_CANCTRL,0xE0,MODE_NORMAL);//Enables normal mode
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	60 ee       	ldi	r22, 0xE0	; 224
     3dc:	8f e0       	ldi	r24, 0x0F	; 15
     3de:	0e 94 d6 03 	call	0x7ac	; 0x7ac <bit_modify_MCP2515>
     3e2:	08 95       	ret

000003e4 <send_CAN_message>:
}

void send_CAN_message(CAN_struct * msg){
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	7c 01       	movw	r14, r24

	while (read_MCP2515(MCP_TXB0CTRL) & (1<<TXREQ)){//will be cleared when finished
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <send_CAN_message+0x16>
		if (read_MCP2515(MCP_TXB0CTRL)&(1<<MLOA)){ //Message lost arbitration while being sent, means we have a message from Arduino
     3f4:	80 e3       	ldi	r24, 0x30	; 48
     3f6:	0e 94 a3 03 	call	0x746	; 0x746 <read_MCP2515>
	bit_modify_MCP2515(MCP_CANCTRL,0xE0,MODE_NORMAL);//Enables normal mode
}

void send_CAN_message(CAN_struct * msg){

	while (read_MCP2515(MCP_TXB0CTRL) & (1<<TXREQ)){//will be cleared when finished
     3fa:	80 e3       	ldi	r24, 0x30	; 48
     3fc:	0e 94 a3 03 	call	0x746	; 0x746 <read_MCP2515>
     400:	83 fd       	sbrc	r24, 3
     402:	f8 cf       	rjmp	.-16     	; 0x3f4 <send_CAN_message+0x10>
			}
			//wait until finished transmitting
	}
	
	//load SIDL
	write_MCP2515(MCP_TXB0_SIDL, (*msg).ID << 5);
     404:	f7 01       	movw	r30, r14
     406:	60 81       	ld	r22, Z
     408:	62 95       	swap	r22
     40a:	66 0f       	add	r22, r22
     40c:	60 7e       	andi	r22, 0xE0	; 224
     40e:	82 e3       	ldi	r24, 0x32	; 50
     410:	0e 94 b5 03 	call	0x76a	; 0x76a <write_MCP2515>
	
	//load SIDH
	write_MCP2515(MCP_TXB0_SIDH, (*msg).ID >> 3);
     414:	f7 01       	movw	r30, r14
     416:	60 81       	ld	r22, Z
     418:	66 95       	lsr	r22
     41a:	66 95       	lsr	r22
     41c:	66 95       	lsr	r22
     41e:	81 e3       	ldi	r24, 0x31	; 49
     420:	0e 94 b5 03 	call	0x76a	; 0x76a <write_MCP2515>

	write_MCP2515(MCP_TXB0_DLC,(char)(*msg).length);
     424:	f7 01       	movw	r30, r14
     426:	61 81       	ldd	r22, Z+1	; 0x01
     428:	85 e3       	ldi	r24, 0x35	; 53
     42a:	0e 94 b5 03 	call	0x76a	; 0x76a <write_MCP2515>

	/*PUTTING DATA IN DATABUFFER*/
	for (int i=0; i < (*msg).length; i++){
     42e:	f7 01       	movw	r30, r14
     430:	81 81       	ldd	r24, Z+1	; 0x01
     432:	88 23       	and	r24, r24
     434:	a1 f0       	breq	.+40     	; 0x45e <send_CAN_message+0x7a>
     436:	87 01       	movw	r16, r14
     438:	0e 5f       	subi	r16, 0xFE	; 254
     43a:	1f 4f       	sbci	r17, 0xFF	; 255
     43c:	c0 e0       	ldi	r28, 0x00	; 0
     43e:	d0 e0       	ldi	r29, 0x00	; 0
		write_MCP2515(MCP_TXB0_D0+i,(char)(*msg).data[i]);
     440:	f8 01       	movw	r30, r16
     442:	60 81       	ld	r22, Z
     444:	0e 5f       	subi	r16, 0xFE	; 254
     446:	1f 4f       	sbci	r17, 0xFF	; 255
     448:	8c 2f       	mov	r24, r28
     44a:	8a 5c       	subi	r24, 0xCA	; 202
     44c:	0e 94 b5 03 	call	0x76a	; 0x76a <write_MCP2515>
	write_MCP2515(MCP_TXB0_SIDH, (*msg).ID >> 3);

	write_MCP2515(MCP_TXB0_DLC,(char)(*msg).length);

	/*PUTTING DATA IN DATABUFFER*/
	for (int i=0; i < (*msg).length; i++){
     450:	21 96       	adiw	r28, 0x01	; 1
     452:	f7 01       	movw	r30, r14
     454:	21 81       	ldd	r18, Z+1	; 0x01
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	c2 17       	cp	r28, r18
     45a:	d3 07       	cpc	r29, r19
     45c:	8c f3       	brlt	.-30     	; 0x440 <send_CAN_message+0x5c>
		write_MCP2515(MCP_TXB0_D0+i,(char)(*msg).data[i]);
	}

	/*REQUEST TO SEND*/
	request_to_send_MCP2515(0x01);// Setting the TXBnCTRL for buffer 0.
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	0e 94 c9 03 	call	0x792	; 0x792 <request_to_send_MCP2515>
}
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	1f 91       	pop	r17
     46a:	0f 91       	pop	r16
     46c:	ff 90       	pop	r15
     46e:	ef 90       	pop	r14
     470:	08 95       	ret

00000472 <rcv_CAN_message>:


void rcv_CAN_message(CAN_struct * msg){
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	7c 01       	movw	r14, r24
	
	msg->data[0] = 0;
     480:	fc 01       	movw	r30, r24
     482:	13 82       	std	Z+3, r1	; 0x03
     484:	12 82       	std	Z+2, r1	; 0x02
	msg->ID = 0;
     486:	10 82       	st	Z, r1
	msg->length = 0;
     488:	11 82       	std	Z+1, r1	; 0x01
	
	while (!(read_MCP2515(MCP_CANINTF) & (1<<RX0IF))) {} //wait for interrupt
     48a:	8c e2       	ldi	r24, 0x2C	; 44
     48c:	0e 94 a3 03 	call	0x746	; 0x746 <read_MCP2515>
     490:	80 ff       	sbrs	r24, 0
     492:	fb cf       	rjmp	.-10     	; 0x48a <rcv_CAN_message+0x18>
	
	msg->ID=((read_MCP2515(MCP_RXB0SIDH))<<3|((read_MCP2515(MCP_RXB0SIDL))>>5));
     494:	81 e6       	ldi	r24, 0x61	; 97
     496:	0e 94 a3 03 	call	0x746	; 0x746 <read_MCP2515>
     49a:	c8 2f       	mov	r28, r24
     49c:	82 e6       	ldi	r24, 0x62	; 98
     49e:	0e 94 a3 03 	call	0x746	; 0x746 <read_MCP2515>
     4a2:	cc 0f       	add	r28, r28
     4a4:	cc 0f       	add	r28, r28
     4a6:	cc 0f       	add	r28, r28
     4a8:	82 95       	swap	r24
     4aa:	86 95       	lsr	r24
     4ac:	87 70       	andi	r24, 0x07	; 7
     4ae:	c8 2b       	or	r28, r24
     4b0:	f7 01       	movw	r30, r14
     4b2:	c0 83       	st	Z, r28
	msg->length=	(int)(read_MCP2515(MCP_RXB0_DLC) & 0x0f);
     4b4:	85 e6       	ldi	r24, 0x65	; 101
     4b6:	0e 94 a3 03 	call	0x746	; 0x746 <read_MCP2515>
     4ba:	8f 70       	andi	r24, 0x0F	; 15
     4bc:	f7 01       	movw	r30, r14
     4be:	81 83       	std	Z+1, r24	; 0x01
	
	/*READING DATA FROM DATABUFFER*/
	for (int i=0; i < msg->length; i++){
     4c0:	88 23       	and	r24, r24
     4c2:	b1 f0       	breq	.+44     	; 0x4f0 <rcv_CAN_message+0x7e>
     4c4:	87 01       	movw	r16, r14
     4c6:	0e 5f       	subi	r16, 0xFE	; 254
     4c8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ca:	c0 e0       	ldi	r28, 0x00	; 0
     4cc:	d0 e0       	ldi	r29, 0x00	; 0
		msg->data[i]= read_MCP2515(MCP_RXB0_D0+i);
     4ce:	8c 2f       	mov	r24, r28
     4d0:	8a 59       	subi	r24, 0x9A	; 154
     4d2:	0e 94 a3 03 	call	0x746	; 0x746 <read_MCP2515>
     4d6:	28 2f       	mov	r18, r24
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	f8 01       	movw	r30, r16
     4dc:	21 93       	st	Z+, r18
     4de:	31 93       	st	Z+, r19
     4e0:	8f 01       	movw	r16, r30
	
	msg->ID=((read_MCP2515(MCP_RXB0SIDH))<<3|((read_MCP2515(MCP_RXB0SIDL))>>5));
	msg->length=	(int)(read_MCP2515(MCP_RXB0_DLC) & 0x0f);
	
	/*READING DATA FROM DATABUFFER*/
	for (int i=0; i < msg->length; i++){
     4e2:	21 96       	adiw	r28, 0x01	; 1
     4e4:	f7 01       	movw	r30, r14
     4e6:	21 81       	ldd	r18, Z+1	; 0x01
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	c2 17       	cp	r28, r18
     4ec:	d3 07       	cpc	r29, r19
     4ee:	7c f3       	brlt	.-34     	; 0x4ce <rcv_CAN_message+0x5c>
		msg->data[i]= read_MCP2515(MCP_RXB0_D0+i);
	}
	
		
	//MUST clear RXB0IF after reading message
	bit_modify_MCP2515(MCP_CANINTF, (1<<RX0IF),0x00);
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	8c e2       	ldi	r24, 0x2C	; 44
     4f6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <bit_modify_MCP2515>
}
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	08 95       	ret

00000508 <reset_highscores>:

uint8_t score_table[SCORE_TABLE_SIZE];

void reset_highscores(){
	for (int i=0; i<SCORE_TABLE_SIZE; i++){
		score_table[i] = 0;
     508:	10 92 32 02 	sts	0x0232, r1
     50c:	10 92 33 02 	sts	0x0233, r1
     510:	10 92 34 02 	sts	0x0234, r1
     514:	10 92 35 02 	sts	0x0235, r1
     518:	10 92 36 02 	sts	0x0236, r1
     51c:	10 92 37 02 	sts	0x0237, r1
     520:	08 95       	ret

00000522 <store_highscore>:

void store_highscore(int8_t insert_data){
	int i = 0;
	uint8_t shiftvalue = 0;
	for (i=0; i<SCORE_TABLE_SIZE; i++){
		if (insert_data > score_table[i]){
     522:	48 2f       	mov	r20, r24
     524:	55 27       	eor	r21, r21
     526:	47 fd       	sbrc	r20, 7
     528:	50 95       	com	r21
     52a:	60 91 32 02 	lds	r22, 0x0232
     52e:	26 2f       	mov	r18, r22
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	24 17       	cp	r18, r20
     534:	35 07       	cpc	r19, r21
     536:	5c f0       	brlt	.+22     	; 0x54e <store_highscore+0x2c>
     538:	a3 e3       	ldi	r26, 0x33	; 51
     53a:	b2 e0       	ldi	r27, 0x02	; 2
}

void store_highscore(int8_t insert_data){
	int i = 0;
	uint8_t shiftvalue = 0;
	for (i=0; i<SCORE_TABLE_SIZE; i++){
     53c:	e1 e0       	ldi	r30, 0x01	; 1
     53e:	f0 e0       	ldi	r31, 0x00	; 0
		if (insert_data > score_table[i]){
     540:	6d 91       	ld	r22, X+
     542:	26 2f       	mov	r18, r22
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	24 17       	cp	r18, r20
     548:	35 07       	cpc	r19, r21
     54a:	64 f4       	brge	.+24     	; 0x564 <store_highscore+0x42>
     54c:	02 c0       	rjmp	.+4      	; 0x552 <store_highscore+0x30>
}

void store_highscore(int8_t insert_data){
	int i = 0;
	uint8_t shiftvalue = 0;
	for (i=0; i<SCORE_TABLE_SIZE; i++){
     54e:	e0 e0       	ldi	r30, 0x00	; 0
     550:	f0 e0       	ldi	r31, 0x00	; 0
		if (insert_data > score_table[i]){
			shiftvalue = score_table[i];
			score_table[i] = insert_data;
     552:	df 01       	movw	r26, r30
     554:	ae 5c       	subi	r26, 0xCE	; 206
     556:	bd 4f       	sbci	r27, 0xFD	; 253
     558:	8c 93       	st	X, r24
			break;
		}
	}
	for (i=i+1; i<SCORE_TABLE_SIZE; i++){
     55a:	31 96       	adiw	r30, 0x01	; 1
     55c:	e6 30       	cpi	r30, 0x06	; 6
     55e:	f1 05       	cpc	r31, r1
     560:	34 f0       	brlt	.+12     	; 0x56e <store_highscore+0x4c>
     562:	08 95       	ret
}

void store_highscore(int8_t insert_data){
	int i = 0;
	uint8_t shiftvalue = 0;
	for (i=0; i<SCORE_TABLE_SIZE; i++){
     564:	31 96       	adiw	r30, 0x01	; 1
     566:	e6 30       	cpi	r30, 0x06	; 6
     568:	f1 05       	cpc	r31, r1
     56a:	51 f7       	brne	.-44     	; 0x540 <store_highscore+0x1e>
     56c:	08 95       	ret
     56e:	ee 5c       	subi	r30, 0xCE	; 206
     570:	fd 4f       	sbci	r31, 0xFD	; 253
     572:	88 e3       	ldi	r24, 0x38	; 56
     574:	92 e0       	ldi	r25, 0x02	; 2
			score_table[i] = insert_data;
			break;
		}
	}
	for (i=i+1; i<SCORE_TABLE_SIZE; i++){
		uint8_t temp = score_table[i];
     576:	20 81       	ld	r18, Z
		score_table[i] = shiftvalue;
     578:	61 93       	st	Z+, r22
			shiftvalue = score_table[i];
			score_table[i] = insert_data;
			break;
		}
	}
	for (i=i+1; i<SCORE_TABLE_SIZE; i++){
     57a:	e8 17       	cp	r30, r24
     57c:	f9 07       	cpc	r31, r25
     57e:	11 f0       	breq	.+4      	; 0x584 <store_highscore+0x62>
		uint8_t temp = score_table[i];
		score_table[i] = shiftvalue;
		shiftvalue = temp;
     580:	62 2f       	mov	r22, r18
     582:	f9 cf       	rjmp	.-14     	; 0x576 <store_highscore+0x54>
     584:	08 95       	ret

00000586 <menu_highscore>:
		printf("%i, \n", score_table[i]);
	}
}


void menu_highscore(){
     586:	af 92       	push	r10
     588:	bf 92       	push	r11
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	27 97       	sbiw	r28, 0x07	; 7
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
	OLED_reset();
     5aa:	0e 94 0b 06 	call	0xc16	; 0xc16 <OLED_reset>
	goto_OLED_page(0);
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	0e 94 ac 05 	call	0xb58	; 0xb58 <goto_OLED_page>
	char string_print[MENU_HIGHSCORE_STRING];
	print_to_OLED("Back     > Highscore < \n", 2);
     5b4:	62 e0       	ldi	r22, 0x02	; 2
     5b6:	8c e1       	ldi	r24, 0x1C	; 28
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 4c 06 	call	0xc98	; 0xc98 <print_to_OLED>
     5be:	0f 2e       	mov	r0, r31
     5c0:	f2 e3       	ldi	r31, 0x32	; 50
     5c2:	ef 2e       	mov	r14, r31
     5c4:	f2 e0       	ldi	r31, 0x02	; 2
     5c6:	ff 2e       	mov	r15, r31
     5c8:	f0 2d       	mov	r31, r0
     5ca:	0f 2e       	mov	r0, r31
     5cc:	f8 e3       	ldi	r31, 0x38	; 56
     5ce:	af 2e       	mov	r10, r31
     5d0:	f2 e0       	ldi	r31, 0x02	; 2
     5d2:	bf 2e       	mov	r11, r31
     5d4:	f0 2d       	mov	r31, r0
	for (int i=0; i<SCORE_TABLE_SIZE; i++){
		sprintf(string_print, "%i\n", score_table[i]);
     5d6:	0f 2e       	mov	r0, r31
     5d8:	f5 e3       	ldi	r31, 0x35	; 53
     5da:	cf 2e       	mov	r12, r31
     5dc:	f1 e0       	ldi	r31, 0x01	; 1
     5de:	df 2e       	mov	r13, r31
     5e0:	f0 2d       	mov	r31, r0
     5e2:	8e 01       	movw	r16, r28
     5e4:	0f 5f       	subi	r16, 0xFF	; 255
     5e6:	1f 4f       	sbci	r17, 0xFF	; 255
     5e8:	f7 01       	movw	r30, r14
     5ea:	81 91       	ld	r24, Z+
     5ec:	7f 01       	movw	r14, r30
     5ee:	1f 92       	push	r1
     5f0:	8f 93       	push	r24
     5f2:	df 92       	push	r13
     5f4:	cf 92       	push	r12
     5f6:	1f 93       	push	r17
     5f8:	0f 93       	push	r16
     5fa:	0e 94 2e 08 	call	0x105c	; 0x105c <sprintf>
		print_to_OLED(string_print, 2);
     5fe:	62 e0       	ldi	r22, 0x02	; 2
     600:	c8 01       	movw	r24, r16
     602:	0e 94 4c 06 	call	0xc98	; 0xc98 <print_to_OLED>
void menu_highscore(){
	OLED_reset();
	goto_OLED_page(0);
	char string_print[MENU_HIGHSCORE_STRING];
	print_to_OLED("Back     > Highscore < \n", 2);
	for (int i=0; i<SCORE_TABLE_SIZE; i++){
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	ea 14       	cp	r14, r10
     614:	fb 04       	cpc	r15, r11
     616:	41 f7       	brne	.-48     	; 0x5e8 <menu_highscore+0x62>
		sprintf(string_print, "%i\n", score_table[i]);
		print_to_OLED(string_print, 2);
	}
}
     618:	27 96       	adiw	r28, 0x07	; 7
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	bf 90       	pop	r11
     636:	af 90       	pop	r10
     638:	08 95       	ret

0000063a <get_joy_position>:


uint8_t get_joy_position(ADC_channel adc_ch){
	volatile char *ext_adc = (char *) 0x1400; // Start address for the ADC
	
	*ext_adc	= adc_ch;
     63a:	80 93 00 14 	sts	0x1400, r24
	
	while (PINB & (1<<PINB3)) {	}	//wait for adc interrupt on conversion finish.
     63e:	b3 99       	sbic	0x16, 3	; 22
     640:	fe cf       	rjmp	.-4      	; 0x63e <get_joy_position+0x4>
	
	
	uint8_t position = *ext_adc;
     642:	80 91 00 14 	lds	r24, 0x1400
	
	return position;
}
     646:	08 95       	ret

00000648 <joy_init>:
	int x_pos;
	int y_pos;
} null_position;

void joy_init(){
	null_position.x_pos = get_joy_position(JOY_X);
     648:	84 e0       	ldi	r24, 0x04	; 4
     64a:	0e 94 1d 03 	call	0x63a	; 0x63a <get_joy_position>
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	90 93 39 02 	sts	0x0239, r25
     654:	80 93 38 02 	sts	0x0238, r24
	null_position.y_pos = get_joy_position(JOY_Y);
     658:	85 e0       	ldi	r24, 0x05	; 5
     65a:	0e 94 1d 03 	call	0x63a	; 0x63a <get_joy_position>
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	90 93 3b 02 	sts	0x023B, r25
     664:	80 93 3a 02 	sts	0x023A, r24
     668:	08 95       	ret

0000066a <joy_relative_pos>:
}

void joy_relative_pos(){
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
	int x= get_joy_position(JOY_X);
     670:	84 e0       	ldi	r24, 0x04	; 4
     672:	0e 94 1d 03 	call	0x63a	; 0x63a <get_joy_position>
     676:	28 2f       	mov	r18, r24
     678:	30 e0       	ldi	r19, 0x00	; 0
	rel_position.x_pos=(int)(x-null_position.x_pos)*(JOY_MAX-1)/127;
     67a:	40 91 38 02 	lds	r20, 0x0238
     67e:	50 91 39 02 	lds	r21, 0x0239
     682:	24 1b       	sub	r18, r20
     684:	35 0b       	sbc	r19, r21
     686:	13 e6       	ldi	r17, 0x63	; 99
     688:	12 9f       	mul	r17, r18
     68a:	c0 01       	movw	r24, r0
     68c:	13 9f       	mul	r17, r19
     68e:	90 0d       	add	r25, r0
     690:	11 24       	eor	r1, r1
     692:	cf e7       	ldi	r28, 0x7F	; 127
     694:	d0 e0       	ldi	r29, 0x00	; 0
     696:	be 01       	movw	r22, r28
     698:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__divmodhi4>
     69c:	70 93 19 02 	sts	0x0219, r23
     6a0:	60 93 18 02 	sts	0x0218, r22
	
	int y= get_joy_position(JOY_Y);
     6a4:	85 e0       	ldi	r24, 0x05	; 5
     6a6:	0e 94 1d 03 	call	0x63a	; 0x63a <get_joy_position>
     6aa:	28 2f       	mov	r18, r24
     6ac:	30 e0       	ldi	r19, 0x00	; 0
	rel_position.y_pos=(int)(y-null_position.y_pos)*(JOY_MAX-1)/127;
     6ae:	40 91 3a 02 	lds	r20, 0x023A
     6b2:	50 91 3b 02 	lds	r21, 0x023B
     6b6:	24 1b       	sub	r18, r20
     6b8:	35 0b       	sbc	r19, r21
     6ba:	12 9f       	mul	r17, r18
     6bc:	c0 01       	movw	r24, r0
     6be:	13 9f       	mul	r17, r19
     6c0:	90 0d       	add	r25, r0
     6c2:	11 24       	eor	r1, r1
     6c4:	be 01       	movw	r22, r28
     6c6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__divmodhi4>
     6ca:	70 93 1b 02 	sts	0x021B, r23
     6ce:	60 93 1a 02 	sts	0x021A, r22
}
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	08 95       	ret

000006da <get_joy_direction>:
	//legg inn rom for neutral f.eks. <20%. 
	joy_direction x_dir=NEUTRAL;
	joy_direction y_dir=NEUTRAL;
	int8_t priority=1; 
	
	if (abs(rel_position.x_pos)>abs(rel_position.y_pos)){
     6da:	80 91 18 02 	lds	r24, 0x0218
     6de:	90 91 19 02 	lds	r25, 0x0219
     6e2:	20 91 1a 02 	lds	r18, 0x021A
     6e6:	30 91 1b 02 	lds	r19, 0x021B
     6ea:	bc 01       	movw	r22, r24
     6ec:	99 23       	and	r25, r25
     6ee:	24 f4       	brge	.+8      	; 0x6f8 <get_joy_direction+0x1e>
     6f0:	66 27       	eor	r22, r22
     6f2:	77 27       	eor	r23, r23
     6f4:	68 1b       	sub	r22, r24
     6f6:	79 0b       	sbc	r23, r25
     6f8:	a9 01       	movw	r20, r18
     6fa:	33 23       	and	r19, r19
     6fc:	24 f4       	brge	.+8      	; 0x706 <get_joy_direction+0x2c>
     6fe:	44 27       	eor	r20, r20
     700:	55 27       	eor	r21, r21
     702:	42 1b       	sub	r20, r18
     704:	53 0b       	sbc	r21, r19
		priority=0;
	}
	
	if(! priority){
     706:	46 17       	cp	r20, r22
     708:	57 07       	cpc	r21, r23
     70a:	7c f4       	brge	.+30     	; 0x72a <get_joy_direction+0x50>
		if (rel_position.x_pos>=-JOY_NEUTRAL && rel_position.x_pos<=JOY_NEUTRAL){
     70c:	9c 01       	movw	r18, r24
     70e:	2c 5e       	subi	r18, 0xEC	; 236
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	29 32       	cpi	r18, 0x29	; 41
     714:	31 05       	cpc	r19, r1
     716:	20 f0       	brcs	.+8      	; 0x720 <get_joy_direction+0x46>
		x_dir=NEUTRAL;
		}
		else if (rel_position.x_pos>=JOY_NEUTRAL){
     718:	44 97       	sbiw	r24, 0x14	; 20
     71a:	24 f0       	brlt	.+8      	; 0x724 <get_joy_direction+0x4a>
			x_dir=RIGHT;
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	03 c0       	rjmp	.+6      	; 0x726 <get_joy_direction+0x4c>
		priority=0;
	}
	
	if(! priority){
		if (rel_position.x_pos>=-JOY_NEUTRAL && rel_position.x_pos<=JOY_NEUTRAL){
		x_dir=NEUTRAL;
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	01 c0       	rjmp	.+2      	; 0x726 <get_joy_direction+0x4c>
		}
		else if (rel_position.x_pos>=JOY_NEUTRAL){
			x_dir=RIGHT;
		}
		else{
			x_dir=LEFT;
     724:	81 e0       	ldi	r24, 0x01	; 1
		}	
		return x_dir;
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	08 95       	ret
	}
	else{
		if (rel_position.y_pos>=-JOY_NEUTRAL && rel_position.y_pos<=JOY_NEUTRAL){
     72a:	c9 01       	movw	r24, r18
     72c:	44 96       	adiw	r24, 0x14	; 20
     72e:	89 97       	sbiw	r24, 0x29	; 41
     730:	28 f0       	brcs	.+10     	; 0x73c <get_joy_direction+0x62>
			y_dir=NEUTRAL;
		}
		else if (rel_position.y_pos>=JOY_NEUTRAL){
     732:	24 31       	cpi	r18, 0x14	; 20
     734:	31 05       	cpc	r19, r1
     736:	24 f0       	brlt	.+8      	; 0x740 <get_joy_direction+0x66>
			y_dir=UP;
     738:	83 e0       	ldi	r24, 0x03	; 3
     73a:	03 c0       	rjmp	.+6      	; 0x742 <get_joy_direction+0x68>
		}	
		return x_dir;
	}
	else{
		if (rel_position.y_pos>=-JOY_NEUTRAL && rel_position.y_pos<=JOY_NEUTRAL){
			y_dir=NEUTRAL;
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	01 c0       	rjmp	.+2      	; 0x742 <get_joy_direction+0x68>
		}
		else if (rel_position.y_pos>=JOY_NEUTRAL){
			y_dir=UP;
		}
		else{
			y_dir=DOWN;
     740:	84 e0       	ldi	r24, 0x04	; 4
		}
		return y_dir;
     742:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
     744:	08 95       	ret

00000746 <read_MCP2515>:
	SPI_init();
	reset_MCP2515();	
}


char read_MCP2515(char read_address){
     746:	cf 93       	push	r28
     748:	c8 2f       	mov	r28, r24
	spi_chipselect_deactivate();
     74a:	0e 94 64 07 	call	0xec8	; 0xec8 <spi_chipselect_deactivate>
	send_SPI(0x03);	//'read' instruction. 
     74e:	83 e0       	ldi	r24, 0x03	; 3
     750:	0e 94 57 07 	call	0xeae	; 0xeae <send_SPI>
	send_SPI(read_address);
     754:	8c 2f       	mov	r24, r28
     756:	0e 94 57 07 	call	0xeae	; 0xeae <send_SPI>
	
	char val=read_SPI();
     75a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <read_SPI>
     75e:	c8 2f       	mov	r28, r24
	spi_chipselect_activate();
     760:	0e 94 62 07 	call	0xec4	; 0xec4 <spi_chipselect_activate>
	return val;
}
     764:	8c 2f       	mov	r24, r28
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <write_MCP2515>:


void write_MCP2515(char write_address, char write_data){
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	d8 2f       	mov	r29, r24
     770:	c6 2f       	mov	r28, r22
	spi_chipselect_deactivate();
     772:	0e 94 64 07 	call	0xec8	; 0xec8 <spi_chipselect_deactivate>
	send_SPI(0x02);	//'write byte' instruction.
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	0e 94 57 07 	call	0xeae	; 0xeae <send_SPI>
	send_SPI(write_address);
     77c:	8d 2f       	mov	r24, r29
     77e:	0e 94 57 07 	call	0xeae	; 0xeae <send_SPI>
	send_SPI(write_data);
     782:	8c 2f       	mov	r24, r28
     784:	0e 94 57 07 	call	0xeae	; 0xeae <send_SPI>
	spi_chipselect_activate();
     788:	0e 94 62 07 	call	0xec4	; 0xec4 <spi_chipselect_activate>
	
}
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <request_to_send_MCP2515>:

void request_to_send_MCP2515(char RTS_in){
     792:	cf 93       	push	r28
     794:	c8 2f       	mov	r28, r24
	spi_chipselect_deactivate();
     796:	0e 94 64 07 	call	0xec8	; 0xec8 <spi_chipselect_deactivate>
	RTS_in = RTS_in % 8;		//Ensures no more than 3 bits proceed.
     79a:	8c 2f       	mov	r24, r28
     79c:	87 70       	andi	r24, 0x07	; 7
	send_SPI(0x80 + RTS_in);
     79e:	80 58       	subi	r24, 0x80	; 128
     7a0:	0e 94 57 07 	call	0xeae	; 0xeae <send_SPI>

	spi_chipselect_activate();
     7a4:	0e 94 62 07 	call	0xec4	; 0xec4 <spi_chipselect_activate>
}
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <bit_modify_MCP2515>:
	char repeat = read_SPI();
	spi_chipselect_activate();
	return out;
}

void bit_modify_MCP2515(char address, char mask_byte, char data){
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	18 2f       	mov	r17, r24
     7b4:	d6 2f       	mov	r29, r22
     7b6:	c4 2f       	mov	r28, r20
	spi_chipselect_deactivate();
     7b8:	0e 94 64 07 	call	0xec8	; 0xec8 <spi_chipselect_deactivate>
	send_SPI(0x05);	//'bit modify' instruction.
     7bc:	85 e0       	ldi	r24, 0x05	; 5
     7be:	0e 94 57 07 	call	0xeae	; 0xeae <send_SPI>
	send_SPI(address);
     7c2:	81 2f       	mov	r24, r17
     7c4:	0e 94 57 07 	call	0xeae	; 0xeae <send_SPI>
	send_SPI(mask_byte);
     7c8:	8d 2f       	mov	r24, r29
     7ca:	0e 94 57 07 	call	0xeae	; 0xeae <send_SPI>
	send_SPI(data);
     7ce:	8c 2f       	mov	r24, r28
     7d0:	0e 94 57 07 	call	0xeae	; 0xeae <send_SPI>
	spi_chipselect_activate();
     7d4:	0e 94 62 07 	call	0xec4	; 0xec4 <spi_chipselect_activate>
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	08 95       	ret

000007e0 <reset_MCP2515>:

void reset_MCP2515(){
	spi_chipselect_deactivate();
     7e0:	0e 94 64 07 	call	0xec8	; 0xec8 <spi_chipselect_deactivate>
	send_SPI(0xC0);	//'reset' instruction.
     7e4:	80 ec       	ldi	r24, 0xC0	; 192
     7e6:	0e 94 57 07 	call	0xeae	; 0xeae <send_SPI>
	spi_chipselect_activate();
     7ea:	0e 94 62 07 	call	0xec4	; 0xec4 <spi_chipselect_activate>
     7ee:	08 95       	ret

000007f0 <MCP2515_init>:
#include "../../CAN MCP2515 header files/MCP2515.h"



void MCP2515_init(){
	SPI_init();
     7f0:	0e 94 4e 07 	call	0xe9c	; 0xe9c <SPI_init>
	reset_MCP2515();	
     7f4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <reset_MCP2515>
     7f8:	08 95       	ret

000007fa <memory_init>:
#include <avr/io.h>



void memory_init(void){
	MCUCR|=(1<<SRE);
     7fa:	85 b7       	in	r24, 0x35	; 53
     7fc:	80 68       	ori	r24, 0x80	; 128
     7fe:	85 bf       	out	0x35, r24	; 53
	SFIOR|=(1<<XMM2);
     800:	80 b7       	in	r24, 0x30	; 48
     802:	80 62       	ori	r24, 0x20	; 32
     804:	80 bf       	out	0x30, r24	; 48
     806:	08 95       	ret

00000808 <adc_init>:
}


void adc_init(void){
	//enable ADC interrupt on finished convertion.
	DDRB &= ~(1<<DDB3);
     808:	bb 98       	cbi	0x17, 3	; 23
     80a:	08 95       	ret

0000080c <menu_init>:

uint8_t arrow_page;



void menu_init(){
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
	OLED_init();
     810:	0e 94 1a 06 	call	0xc34	; 0xc34 <OLED_init>
	
	root_node.name = "        > Main menu < \n";
     814:	89 e3       	ldi	r24, 0x39	; 57
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	90 93 09 02 	sts	0x0209, r25
     81c:	80 93 08 02 	sts	0x0208, r24
	root_node.parent = &root_node;
     820:	e0 e0       	ldi	r30, 0x00	; 0
     822:	f2 e0       	ldi	r31, 0x02	; 2
     824:	f1 83       	std	Z+1, r31	; 0x01
     826:	e0 83       	st	Z, r30
	for (int i=0; i<3;i++){ root_node.children[i] = NULL; }
	root_node.children[0] = &ingame_node;
     828:	44 ef       	ldi	r20, 0xF4	; 244
     82a:	51 e0       	ldi	r21, 0x01	; 1
     82c:	50 93 03 02 	sts	0x0203, r21
     830:	40 93 02 02 	sts	0x0202, r20
	root_node.children[1] = &highscore_node;
     834:	8c e1       	ldi	r24, 0x1C	; 28
     836:	92 e0       	ldi	r25, 0x02	; 2
     838:	90 93 05 02 	sts	0x0205, r25
     83c:	80 93 04 02 	sts	0x0204, r24
	root_node.children[2] = &draw_node;
     840:	cc e0       	ldi	r28, 0x0C	; 12
     842:	d2 e0       	ldi	r29, 0x02	; 2
     844:	d0 93 07 02 	sts	0x0207, r29
     848:	c0 93 06 02 	sts	0x0206, r28
	root_node.content_string = "Play Ping-Pong game \nHighscores \nDraw a doodle \n";
     84c:	21 e5       	ldi	r18, 0x51	; 81
     84e:	31 e0       	ldi	r19, 0x01	; 1
     850:	30 93 0b 02 	sts	0x020B, r19
     854:	20 93 0a 02 	sts	0x020A, r18

	highscore_node.name = "Back     > Highscore < \n";
     858:	2c e1       	ldi	r18, 0x1C	; 28
     85a:	31 e0       	ldi	r19, 0x01	; 1
     85c:	30 93 25 02 	sts	0x0225, r19
     860:	20 93 24 02 	sts	0x0224, r18
	highscore_node.parent = &root_node;
     864:	dc 01       	movw	r26, r24
     866:	ed 93       	st	X+, r30
     868:	fc 93       	st	X, r31
	for (int i=0; i<3;i++){ highscore_node.children[i] = NULL; }
     86a:	10 92 1f 02 	sts	0x021F, r1
     86e:	10 92 1e 02 	sts	0x021E, r1
     872:	10 92 21 02 	sts	0x0221, r1
     876:	10 92 20 02 	sts	0x0220, r1
     87a:	10 92 23 02 	sts	0x0223, r1
     87e:	10 92 22 02 	sts	0x0222, r1
	highscore_node.content_string = " ";
     882:	80 ef       	ldi	r24, 0xF0	; 240
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	90 93 27 02 	sts	0x0227, r25
     88a:	80 93 26 02 	sts	0x0226, r24


	
	draw_node.name = "         > Drawing board < \n";
     88e:	82 e8       	ldi	r24, 0x82	; 130
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	90 93 15 02 	sts	0x0215, r25
     896:	80 93 14 02 	sts	0x0214, r24
	draw_node.parent = &root_node;
     89a:	f9 83       	std	Y+1, r31	; 0x01
     89c:	e8 83       	st	Y, r30
	for (int i=0; i<3;i++){ draw_node.children[i] = NULL; }
     89e:	10 92 0f 02 	sts	0x020F, r1
     8a2:	10 92 0e 02 	sts	0x020E, r1
     8a6:	10 92 11 02 	sts	0x0211, r1
     8aa:	10 92 10 02 	sts	0x0210, r1
     8ae:	10 92 13 02 	sts	0x0213, r1
     8b2:	10 92 12 02 	sts	0x0212, r1
	
	
	
	ingame_node.name = "         > In-game < \n";
     8b6:	8f e9       	ldi	r24, 0x9F	; 159
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	90 93 fd 01 	sts	0x01FD, r25
     8be:	80 93 fc 01 	sts	0x01FC, r24
	ingame_node.parent = &root_node;
     8c2:	da 01       	movw	r26, r20
     8c4:	ed 93       	st	X+, r30
     8c6:	fc 93       	st	X, r31
	for (int i=0; i<3;i++){ ingame_node.children[i] = NULL; }
     8c8:	10 92 f7 01 	sts	0x01F7, r1
     8cc:	10 92 f6 01 	sts	0x01F6, r1
     8d0:	10 92 f9 01 	sts	0x01F9, r1
     8d4:	10 92 f8 01 	sts	0x01F8, r1
     8d8:	10 92 fb 01 	sts	0x01FB, r1
     8dc:	10 92 fa 01 	sts	0x01FA, r1
	ingame_node.content_string = "\nCurrent score: \n";
     8e0:	86 eb       	ldi	r24, 0xB6	; 182
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	90 93 ff 01 	sts	0x01FF, r25
     8e8:	80 93 fe 01 	sts	0x01FE, r24
	
	
	
	current_node = &root_node; 
     8ec:	f0 93 2b 02 	sts	0x022B, r31
     8f0:	e0 93 2a 02 	sts	0x022A, r30
	arrow_page = 0;
     8f4:	10 92 3c 02 	sts	0x023C, r1
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <menu_arrow>:


void menu_arrow(){
	clear_arrow_space();
     8fe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <clear_arrow_space>
	int direction = get_joy_direction();
     902:	0e 94 6d 03 	call	0x6da	; 0x6da <get_joy_direction>
	if (direction == 0){
     906:	00 97       	sbiw	r24, 0x00	; 0
     908:	e1 f0       	breq	.+56     	; 0x942 <menu_arrow+0x44>
	} else if (direction == 3){
     90a:	83 30       	cpi	r24, 0x03	; 3
     90c:	91 05       	cpc	r25, r1
     90e:	79 f4       	brne	.+30     	; 0x92e <menu_arrow+0x30>
		arrow_page = (arrow_page -1) % DISPLAY_PAGES;
     910:	80 91 3c 02 	lds	r24, 0x023C
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	87 70       	andi	r24, 0x07	; 7
     91a:	90 78       	andi	r25, 0x80	; 128
     91c:	99 23       	and	r25, r25
     91e:	24 f4       	brge	.+8      	; 0x928 <menu_arrow+0x2a>
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	88 6f       	ori	r24, 0xF8	; 248
     924:	9f 6f       	ori	r25, 0xFF	; 255
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	80 93 3c 02 	sts	0x023C, r24
     92c:	0a c0       	rjmp	.+20     	; 0x942 <menu_arrow+0x44>
	} else if (direction == 4){
     92e:	04 97       	sbiw	r24, 0x04	; 4
     930:	41 f4       	brne	.+16     	; 0x942 <menu_arrow+0x44>
		arrow_page = (arrow_page +1) % DISPLAY_PAGES;
     932:	80 91 3c 02 	lds	r24, 0x023C
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	87 70       	andi	r24, 0x07	; 7
     93c:	90 78       	andi	r25, 0x80	; 128
     93e:	80 93 3c 02 	sts	0x023C, r24
	}
	OLED_print_arrow(arrow_page);
     942:	80 91 3c 02 	lds	r24, 0x023C
     946:	0e 94 d7 06 	call	0xdae	; 0xdae <OLED_print_arrow>
     94a:	08 95       	ret

0000094c <menu_print>:
	OLED_reset();
	menu_print();
}

void menu_print(){
	OLED_reset();
     94c:	0e 94 0b 06 	call	0xc16	; 0xc16 <OLED_reset>
	print_to_OLED(current_node->name, 2);
     950:	e0 91 2a 02 	lds	r30, 0x022A
     954:	f0 91 2b 02 	lds	r31, 0x022B
     958:	62 e0       	ldi	r22, 0x02	; 2
     95a:	80 85       	ldd	r24, Z+8	; 0x08
     95c:	91 85       	ldd	r25, Z+9	; 0x09
     95e:	0e 94 4c 06 	call	0xc98	; 0xc98 <print_to_OLED>
	print_to_OLED(current_node->content_string, 2);
     962:	e0 91 2a 02 	lds	r30, 0x022A
     966:	f0 91 2b 02 	lds	r31, 0x022B
     96a:	62 e0       	ldi	r22, 0x02	; 2
     96c:	82 85       	ldd	r24, Z+10	; 0x0a
     96e:	93 85       	ldd	r25, Z+11	; 0x0b
     970:	0e 94 4c 06 	call	0xc98	; 0xc98 <print_to_OLED>
	if ((current_node != &ingame_node) | (current_node != &draw_node)){
     974:	80 91 2a 02 	lds	r24, 0x022A
     978:	90 91 2b 02 	lds	r25, 0x022B
     97c:	21 e0       	ldi	r18, 0x01	; 1
     97e:	32 e0       	ldi	r19, 0x02	; 2
     980:	8c 30       	cpi	r24, 0x0C	; 12
     982:	93 07       	cpc	r25, r19
     984:	09 f4       	brne	.+2      	; 0x988 <menu_print+0x3c>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	21 11       	cpse	r18, r1
     98a:	07 c0       	rjmp	.+14     	; 0x99a <menu_print+0x4e>
     98c:	21 e0       	ldi	r18, 0x01	; 1
     98e:	84 5f       	subi	r24, 0xF4	; 244
     990:	91 40       	sbci	r25, 0x01	; 1
     992:	09 f4       	brne	.+2      	; 0x996 <menu_print+0x4a>
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	22 23       	and	r18, r18
     998:	21 f0       	breq	.+8      	; 0x9a2 <menu_print+0x56>
		OLED_print_arrow(arrow_page);
     99a:	80 91 3c 02 	lds	r24, 0x023C
     99e:	0e 94 d7 06 	call	0xdae	; 0xdae <OLED_print_arrow>
     9a2:	08 95       	ret

000009a4 <__vector_2>:
	}
	
}

/*Used for going backwards/upwards in menu*/
ISR(INT1_vect){
     9a4:	1f 92       	push	r1
     9a6:	0f 92       	push	r0
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	0f 92       	push	r0
     9ac:	11 24       	eor	r1, r1
     9ae:	2f 93       	push	r18
     9b0:	3f 93       	push	r19
     9b2:	4f 93       	push	r20
     9b4:	5f 93       	push	r21
     9b6:	6f 93       	push	r22
     9b8:	7f 93       	push	r23
     9ba:	8f 93       	push	r24
     9bc:	9f 93       	push	r25
     9be:	af 93       	push	r26
     9c0:	bf 93       	push	r27
     9c2:	ef 93       	push	r30
     9c4:	ff 93       	push	r31
	if (current_node == &ingame_node){
     9c6:	e0 91 2a 02 	lds	r30, 0x022A
     9ca:	f0 91 2b 02 	lds	r31, 0x022B
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	e4 3f       	cpi	r30, 0xF4	; 244
     9d2:	f8 07       	cpc	r31, r24
     9d4:	19 f4       	brne	.+6      	; 0x9dc <__vector_2+0x38>
		leave_game_flag = 1;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	80 93 29 02 	sts	0x0229, r24
	}
	
	current_node = current_node->parent;
     9dc:	80 81       	ld	r24, Z
     9de:	91 81       	ldd	r25, Z+1	; 0x01
     9e0:	90 93 2b 02 	sts	0x022B, r25
     9e4:	80 93 2a 02 	sts	0x022A, r24
	
	OLED_reset();
     9e8:	0e 94 0b 06 	call	0xc16	; 0xc16 <OLED_reset>
	menu_print();
     9ec:	0e 94 a6 04 	call	0x94c	; 0x94c <menu_print>
}
     9f0:	ff 91       	pop	r31
     9f2:	ef 91       	pop	r30
     9f4:	bf 91       	pop	r27
     9f6:	af 91       	pop	r26
     9f8:	9f 91       	pop	r25
     9fa:	8f 91       	pop	r24
     9fc:	7f 91       	pop	r23
     9fe:	6f 91       	pop	r22
     a00:	5f 91       	pop	r21
     a02:	4f 91       	pop	r20
     a04:	3f 91       	pop	r19
     a06:	2f 91       	pop	r18
     a08:	0f 90       	pop	r0
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	0f 90       	pop	r0
     a0e:	1f 90       	pop	r1
     a10:	18 95       	reti

00000a12 <menu_score>:
		OLED_print_arrow(arrow_page);
	}
}

//Call when in-game.
void menu_score(uint8_t score){
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	2a 97       	sbiw	r28, 0x0a	; 10
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	18 2f       	mov	r17, r24
	
	goto_OLED_page(0);
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 ac 05 	call	0xb58	; 0xb58 <goto_OLED_page>
	char string[10];
	sprintf(string, "%i", score);
     a32:	1f 92       	push	r1
     a34:	1f 93       	push	r17
     a36:	88 ec       	ldi	r24, 0xC8	; 200
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	9f 93       	push	r25
     a3c:	8f 93       	push	r24
     a3e:	8e 01       	movw	r16, r28
     a40:	0f 5f       	subi	r16, 0xFF	; 255
     a42:	1f 4f       	sbci	r17, 0xFF	; 255
     a44:	1f 93       	push	r17
     a46:	0f 93       	push	r16
     a48:	0e 94 2e 08 	call	0x105c	; 0x105c <sprintf>
	
	print_to_OLED("         > In-game < \n\nCurrent score: ", 2);
     a4c:	62 e0       	ldi	r22, 0x02	; 2
     a4e:	8b ec       	ldi	r24, 0xCB	; 203
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	0e 94 4c 06 	call	0xc98	; 0xc98 <print_to_OLED>
	print_to_OLED(string, 20);
     a56:	64 e1       	ldi	r22, 0x14	; 20
     a58:	c8 01       	movw	r24, r16
     a5a:	0e 94 4c 06 	call	0xc98	; 0xc98 <print_to_OLED>
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
}
     a6a:	2a 96       	adiw	r28, 0x0a	; 10
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	08 95       	ret

00000a80 <__vector_1>:
	}
	OLED_print_arrow(arrow_page);
}

/* Left slider button, INT0_vect, pin PD2. Right slider button, INT1_vect, pin PD3.*/
ISR(INT0_vect){
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	2f 93       	push	r18
     a8c:	3f 93       	push	r19
     a8e:	4f 93       	push	r20
     a90:	5f 93       	push	r21
     a92:	6f 93       	push	r22
     a94:	7f 93       	push	r23
     a96:	8f 93       	push	r24
     a98:	9f 93       	push	r25
     a9a:	af 93       	push	r26
     a9c:	bf 93       	push	r27
     a9e:	ef 93       	push	r30
     aa0:	ff 93       	push	r31
	
	if (current_node == &ingame_node){
     aa2:	e0 91 2a 02 	lds	r30, 0x022A
     aa6:	f0 91 2b 02 	lds	r31, 0x022B
     aaa:	21 e0       	ldi	r18, 0x01	; 1
     aac:	e4 3f       	cpi	r30, 0xF4	; 244
     aae:	f2 07       	cpc	r31, r18
     ab0:	21 f4       	brne	.+8      	; 0xaba <__vector_1+0x3a>
		solenoid_flag = 1;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 28 02 	sts	0x0228, r24
     ab8:	2e c0       	rjmp	.+92     	; 0xb16 <__vector_1+0x96>
	}
	else if (current_node == &draw_node){
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	ec 30       	cpi	r30, 0x0C	; 12
     abe:	f8 07       	cpc	r31, r24
     ac0:	19 f4       	brne	.+6      	; 0xac8 <__vector_1+0x48>
		OLED_reset();	
     ac2:	0e 94 0b 06 	call	0xc16	; 0xc16 <OLED_reset>
     ac6:	27 c0       	rjmp	.+78     	; 0xb16 <__vector_1+0x96>
	}
	else{	//This means we are in normal menu mode.
		if (arrow_page <= 0){
     ac8:	80 91 3c 02 	lds	r24, 0x023C
     acc:	81 11       	cpse	r24, r1
     ace:	07 c0       	rjmp	.+14     	; 0xade <__vector_1+0x5e>
			current_node = current_node->parent;
     ad0:	80 81       	ld	r24, Z
     ad2:	91 81       	ldd	r25, Z+1	; 0x01
     ad4:	90 93 2b 02 	sts	0x022B, r25
     ad8:	80 93 2a 02 	sts	0x022A, r24
     adc:	0d c0       	rjmp	.+26     	; 0xaf8 <__vector_1+0x78>
		} else if (!(current_node->children[arrow_page - 1] == NULL)){
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	e8 0f       	add	r30, r24
     ae6:	f9 1f       	adc	r31, r25
     ae8:	80 81       	ld	r24, Z
     aea:	91 81       	ldd	r25, Z+1	; 0x01
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	21 f0       	breq	.+8      	; 0xaf8 <__vector_1+0x78>
			current_node = current_node->children[arrow_page -1];
     af0:	90 93 2b 02 	sts	0x022B, r25
     af4:	80 93 2a 02 	sts	0x022A, r24
		}
		arrow_page = 0;
     af8:	10 92 3c 02 	sts	0x023C, r1
		menu_print();
     afc:	0e 94 a6 04 	call	0x94c	; 0x94c <menu_print>
		if (current_node == &ingame_node){
     b00:	80 91 2a 02 	lds	r24, 0x022A
     b04:	90 91 2b 02 	lds	r25, 0x022B
     b08:	84 5f       	subi	r24, 0xF4	; 244
     b0a:	91 40       	sbci	r25, 0x01	; 1
     b0c:	21 f4       	brne	.+8      	; 0xb16 <__vector_1+0x96>
			menu_score(0);
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 09 05 	call	0xa12	; 0xa12 <menu_score>
		}
	}
	
}
     b16:	ff 91       	pop	r31
     b18:	ef 91       	pop	r30
     b1a:	bf 91       	pop	r27
     b1c:	af 91       	pop	r26
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	7f 91       	pop	r23
     b24:	6f 91       	pop	r22
     b26:	5f 91       	pop	r21
     b28:	4f 91       	pop	r20
     b2a:	3f 91       	pop	r19
     b2c:	2f 91       	pop	r18
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	0f 90       	pop	r0
     b34:	1f 90       	pop	r1
     b36:	18 95       	reti

00000b38 <set_font4x6>:
};



void set_font4x6(){
	font_type.data = font4x6;
     b38:	80 e7       	ldi	r24, 0x70	; 112
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	90 93 30 02 	sts	0x0230, r25
     b40:	80 93 2f 02 	sts	0x022F, r24
	font_type.width = 4;
     b44:	84 e0       	ldi	r24, 0x04	; 4
     b46:	80 93 2c 02 	sts	0x022C, r24
	font_type.height = 6;
     b4a:	86 e0       	ldi	r24, 0x06	; 6
     b4c:	80 93 2d 02 	sts	0x022D, r24
	font_type.ascii_offset = 32;
     b50:	80 e2       	ldi	r24, 0x20	; 32
     b52:	80 93 2e 02 	sts	0x022E, r24
     b56:	08 95       	ret

00000b58 <goto_OLED_page>:
	goto_OLED_char_column(0);
	return;
}

void goto_OLED_page(uint8_t page){
	current_page = page % DISPLAY_PAGES;
     b58:	87 70       	andi	r24, 0x07	; 7
     b5a:	80 93 f2 01 	sts	0x01F2, r24
	write_OLED_cmd(0xB0 + current_page);
     b5e:	80 55       	subi	r24, 0x50	; 80
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
     b60:	80 93 00 10 	sts	0x1000, r24
     b64:	08 95       	ret

00000b66 <goto_OLED_char_column>:
	write_OLED_cmd(0xB0 + current_page);
	return;
}

void goto_OLED_char_column(uint8_t column){
	uint8_t c = column * font_type.width;
     b66:	90 91 2c 02 	lds	r25, 0x022C
     b6a:	89 9f       	mul	r24, r25
     b6c:	90 2d       	mov	r25, r0
     b6e:	11 24       	eor	r1, r1
	uint8_t low_bits = c & 0x0f;
     b70:	29 2f       	mov	r18, r25
     b72:	2f 70       	andi	r18, 0x0F	; 15
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
     b74:	e0 e0       	ldi	r30, 0x00	; 0
     b76:	f0 e1       	ldi	r31, 0x10	; 16
     b78:	20 83       	st	Z, r18
void goto_OLED_char_column(uint8_t column){
	uint8_t c = column * font_type.width;
	uint8_t low_bits = c & 0x0f;
	uint8_t high_bits = c & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
     b7a:	92 95       	swap	r25
     b7c:	9f 70       	andi	r25, 0x0F	; 15
     b7e:	90 5f       	subi	r25, 0xF0	; 240
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
     b80:	90 83       	st	Z, r25
	uint8_t low_bits = c & 0x0f;
	uint8_t high_bits = c & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
	
	current_column = column;
     b82:	80 93 f3 01 	sts	0x01F3, r24
     b86:	08 95       	ret

00000b88 <OLED_home>:
	OLED_home();
	return;
}

void OLED_home(){
	goto_OLED_page(0);
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	0e 94 ac 05 	call	0xb58	; 0xb58 <goto_OLED_page>
	goto_OLED_char_column(0);
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	0e 94 b3 05 	call	0xb66	; 0xb66 <goto_OLED_char_column>
     b94:	08 95       	ret

00000b96 <goto_OLED_physical_column>:
	current_column = temp_col;
	return;
}

void goto_OLED_physical_column(uint8_t column){
	uint8_t low_bits = column & 0x0f;
     b96:	98 2f       	mov	r25, r24
     b98:	9f 70       	andi	r25, 0x0F	; 15
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
     b9a:	e0 e0       	ldi	r30, 0x00	; 0
     b9c:	f0 e1       	ldi	r31, 0x10	; 16
     b9e:	90 83       	st	Z, r25

void goto_OLED_physical_column(uint8_t column){
	uint8_t low_bits = column & 0x0f;
	uint8_t high_bits = column & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
     ba0:	98 2f       	mov	r25, r24
     ba2:	92 95       	swap	r25
     ba4:	9f 70       	andi	r25, 0x0F	; 15
     ba6:	90 5f       	subi	r25, 0xF0	; 240
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
     ba8:	90 83       	st	Z, r25
	uint8_t low_bits = column & 0x0f;
	uint8_t high_bits = column & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
	
	current_column = column;
     baa:	80 93 f3 01 	sts	0x01F3, r24
     bae:	08 95       	ret

00000bb0 <clear_arrow_space>:
	
	current_column = column;
	return;
}

void clear_arrow_space(){
     bb0:	df 92       	push	r13
     bb2:	ef 92       	push	r14
     bb4:	ff 92       	push	r15
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
	int temp_page = current_page;
     bbe:	d0 90 f2 01 	lds	r13, 0x01F2
	int temp_col = current_column;
     bc2:	e0 90 f3 01 	lds	r14, 0x01F3
	for (uint8_t j = 0; j < DISPLAY_PAGES; j++){
     bc6:	00 e0       	ldi	r16, 0x00	; 0
		goto_OLED_page(j);
		for (uint8_t i = 0; i < ARROW_WIDTH; i++){
     bc8:	f1 2c       	mov	r15, r1
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
     bca:	c0 e0       	ldi	r28, 0x00	; 0
     bcc:	d2 e1       	ldi	r29, 0x12	; 18

void clear_arrow_space(){
	int temp_page = current_page;
	int temp_col = current_column;
	for (uint8_t j = 0; j < DISPLAY_PAGES; j++){
		goto_OLED_page(j);
     bce:	80 2f       	mov	r24, r16
     bd0:	0e 94 ac 05 	call	0xb58	; 0xb58 <goto_OLED_page>
		for (uint8_t i = 0; i < ARROW_WIDTH; i++){
     bd4:	1f 2d       	mov	r17, r15
			goto_OLED_physical_column(i);
     bd6:	81 2f       	mov	r24, r17
     bd8:	0e 94 cb 05 	call	0xb96	; 0xb96 <goto_OLED_physical_column>
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
     bdc:	18 82       	st	Y, r1
void clear_arrow_space(){
	int temp_page = current_page;
	int temp_col = current_column;
	for (uint8_t j = 0; j < DISPLAY_PAGES; j++){
		goto_OLED_page(j);
		for (uint8_t i = 0; i < ARROW_WIDTH; i++){
     bde:	1f 5f       	subi	r17, 0xFF	; 255
     be0:	18 30       	cpi	r17, 0x08	; 8
     be2:	c9 f7       	brne	.-14     	; 0xbd6 <clear_arrow_space+0x26>
}

void clear_arrow_space(){
	int temp_page = current_page;
	int temp_col = current_column;
	for (uint8_t j = 0; j < DISPLAY_PAGES; j++){
     be4:	0f 5f       	subi	r16, 0xFF	; 255
     be6:	08 30       	cpi	r16, 0x08	; 8
     be8:	91 f7       	brne	.-28     	; 0xbce <clear_arrow_space+0x1e>
		for (uint8_t i = 0; i < ARROW_WIDTH; i++){
			goto_OLED_physical_column(i);
			write_OLED_data(0);
		}
	}
	current_page = temp_page;
     bea:	d0 92 f2 01 	sts	0x01F2, r13
	current_column = temp_col;
     bee:	e0 92 f3 01 	sts	0x01F3, r14
	return;
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	df 90       	pop	r13
     c00:	08 95       	ret

00000c02 <clear_OLED_page>:
	current_column = column;
	return;
}

void clear_OLED_page(uint8_t page){
	goto_OLED_page(page);
     c02:	0e 94 ac 05 	call	0xb58	; 0xb58 <goto_OLED_page>
	for (uint8_t i = 0; i < DISPLAY_COLUMNS; i++){
     c06:	80 e0       	ldi	r24, 0x00	; 0
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
     c08:	e0 e0       	ldi	r30, 0x00	; 0
     c0a:	f2 e1       	ldi	r31, 0x12	; 18
     c0c:	10 82       	st	Z, r1
	return;
}

void clear_OLED_page(uint8_t page){
	goto_OLED_page(page);
	for (uint8_t i = 0; i < DISPLAY_COLUMNS; i++){
     c0e:	8f 5f       	subi	r24, 0xFF	; 255
     c10:	80 38       	cpi	r24, 0x80	; 128
     c12:	e1 f7       	brne	.-8      	; 0xc0c <clear_OLED_page+0xa>
		write_OLED_data(0);
	}
	return;
}
     c14:	08 95       	ret

00000c16 <OLED_reset>:
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
}


void OLED_reset(){
     c16:	cf 93       	push	r28
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
     c18:	80 e4       	ldi	r24, 0x40	; 64
     c1a:	80 93 00 10 	sts	0x1000, r24
}


void OLED_reset(){
	write_OLED_cmd(0x40);		//Set display line start at page 0. 
	for (uint8_t i = 0; i < DISPLAY_PAGES; i++){
     c1e:	c0 e0       	ldi	r28, 0x00	; 0
		clear_OLED_page(i);
     c20:	8c 2f       	mov	r24, r28
     c22:	0e 94 01 06 	call	0xc02	; 0xc02 <clear_OLED_page>
}


void OLED_reset(){
	write_OLED_cmd(0x40);		//Set display line start at page 0. 
	for (uint8_t i = 0; i < DISPLAY_PAGES; i++){
     c26:	cf 5f       	subi	r28, 0xFF	; 255
     c28:	c8 30       	cpi	r28, 0x08	; 8
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <OLED_reset+0xa>
		clear_OLED_page(i);
	}
	OLED_home();
     c2c:	0e 94 c4 05 	call	0xb88	; 0xb88 <OLED_home>
	return;
}
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <OLED_init>:
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
     c34:	e0 e0       	ldi	r30, 0x00	; 0
     c36:	f0 e1       	ldi	r31, 0x10	; 16
     c38:	8e ea       	ldi	r24, 0xAE	; 174
     c3a:	80 83       	st	Z, r24
     c3c:	81 ea       	ldi	r24, 0xA1	; 161
     c3e:	80 83       	st	Z, r24
     c40:	8a ed       	ldi	r24, 0xDA	; 218
     c42:	80 83       	st	Z, r24
     c44:	82 e1       	ldi	r24, 0x12	; 18
     c46:	80 83       	st	Z, r24
     c48:	88 ec       	ldi	r24, 0xC8	; 200
     c4a:	80 83       	st	Z, r24
     c4c:	88 ea       	ldi	r24, 0xA8	; 168
     c4e:	80 83       	st	Z, r24
     c50:	8f e3       	ldi	r24, 0x3F	; 63
     c52:	80 83       	st	Z, r24
     c54:	85 ed       	ldi	r24, 0xD5	; 213
     c56:	80 83       	st	Z, r24
     c58:	80 e8       	ldi	r24, 0x80	; 128
     c5a:	80 83       	st	Z, r24
     c5c:	81 e8       	ldi	r24, 0x81	; 129
     c5e:	80 83       	st	Z, r24
     c60:	80 e5       	ldi	r24, 0x50	; 80
     c62:	80 83       	st	Z, r24
     c64:	89 ed       	ldi	r24, 0xD9	; 217
     c66:	80 83       	st	Z, r24
     c68:	81 e2       	ldi	r24, 0x21	; 33
     c6a:	80 83       	st	Z, r24
     c6c:	80 e2       	ldi	r24, 0x20	; 32
     c6e:	80 83       	st	Z, r24
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	80 83       	st	Z, r24
     c74:	8b ed       	ldi	r24, 0xDB	; 219
     c76:	80 83       	st	Z, r24
     c78:	80 e3       	ldi	r24, 0x30	; 48
     c7a:	80 83       	st	Z, r24
     c7c:	8d ea       	ldi	r24, 0xAD	; 173
     c7e:	80 83       	st	Z, r24
     c80:	10 82       	st	Z, r1
     c82:	84 ea       	ldi	r24, 0xA4	; 164
     c84:	80 83       	st	Z, r24
     c86:	86 ea       	ldi	r24, 0xA6	; 166
     c88:	80 83       	st	Z, r24
     c8a:	8f ea       	ldi	r24, 0xAF	; 175
     c8c:	80 83       	st	Z, r24
	write_OLED_cmd(0xa6);        //set  normal  display
	write_OLED_cmd(0xaf);        //  display  on
	
	
	
	OLED_reset();
     c8e:	0e 94 0b 06 	call	0xc16	; 0xc16 <OLED_reset>
	set_font4x6();
     c92:	0e 94 9c 05 	call	0xb38	; 0xb38 <set_font4x6>
     c96:	08 95       	ret

00000c98 <print_to_OLED>:

void OLED_pos(uint8_t page, uint8_t column){
	return;
}

void print_to_OLED(const char * string, uint8_t start_column){
     c98:	3f 92       	push	r3
     c9a:	4f 92       	push	r4
     c9c:	5f 92       	push	r5
     c9e:	6f 92       	push	r6
     ca0:	7f 92       	push	r7
     ca2:	8f 92       	push	r8
     ca4:	9f 92       	push	r9
     ca6:	af 92       	push	r10
     ca8:	bf 92       	push	r11
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	ec 01       	movw	r28, r24
     cbc:	36 2e       	mov	r3, r22
	goto_OLED_char_column(start_column);
     cbe:	86 2f       	mov	r24, r22
     cc0:	0e 94 b3 05 	call	0xb66	; 0xb66 <goto_OLED_char_column>
	int length = strlen(string);
     cc4:	fe 01       	movw	r30, r28
     cc6:	01 90       	ld	r0, Z+
     cc8:	00 20       	and	r0, r0
     cca:	e9 f7       	brne	.-6      	; 0xcc6 <print_to_OLED+0x2e>
     ccc:	31 97       	sbiw	r30, 0x01	; 1
     cce:	3f 01       	movw	r6, r30
     cd0:	6c 1a       	sub	r6, r28
     cd2:	7d 0a       	sbc	r7, r29
	
	for (int i = 0; i < length; i++){
     cd4:	16 14       	cp	r1, r6
     cd6:	17 04       	cpc	r1, r7
     cd8:	0c f0       	brlt	.+2      	; 0xcdc <print_to_OLED+0x44>
     cda:	57 c0       	rjmp	.+174    	; 0xd8a <print_to_OLED+0xf2>
     cdc:	4e 01       	movw	r8, r28
     cde:	a1 2c       	mov	r10, r1
     ce0:	b1 2c       	mov	r11, r1
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
     ce2:	cc e2       	ldi	r28, 0x2C	; 44
     ce4:	d2 e0       	ldi	r29, 0x02	; 2
     ce6:	51 2c       	mov	r5, r1
     ce8:	41 2c       	mov	r4, r1
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
     cea:	0f 2e       	mov	r0, r31
     cec:	ff e2       	ldi	r31, 0x2F	; 47
     cee:	cf 2e       	mov	r12, r31
     cf0:	f2 e0       	ldi	r31, 0x02	; 2
     cf2:	df 2e       	mov	r13, r31
     cf4:	f0 2d       	mov	r31, r0
     cf6:	0f 2e       	mov	r0, r31
     cf8:	fe e2       	ldi	r31, 0x2E	; 46
     cfa:	ef 2e       	mov	r14, r31
     cfc:	f2 e0       	ldi	r31, 0x02	; 2
     cfe:	ff 2e       	mov	r15, r31
     d00:	f0 2d       	mov	r31, r0
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
     d02:	00 e0       	ldi	r16, 0x00	; 0
     d04:	12 e1       	ldi	r17, 0x12	; 18
void print_to_OLED(const char * string, uint8_t start_column){
	goto_OLED_char_column(start_column);
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
		char c = string[i];
     d06:	d4 01       	movw	r26, r8
     d08:	4d 91       	ld	r20, X+
     d0a:	4d 01       	movw	r8, r26
		if (c == '\n') {
     d0c:	4a 30       	cpi	r20, 0x0A	; 10
     d0e:	31 f0       	breq	.+12     	; 0xd1c <print_to_OLED+0x84>
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
     d10:	28 81       	ld	r18, Y
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	12 16       	cp	r1, r18
     d16:	13 06       	cpc	r1, r19
     d18:	6c f0       	brlt	.+26     	; 0xd34 <print_to_OLED+0x9c>
     d1a:	30 c0       	rjmp	.+96     	; 0xd7c <print_to_OLED+0xe4>
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
		char c = string[i];
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
     d1c:	80 91 f2 01 	lds	r24, 0x01F2
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	87 70       	andi	r24, 0x07	; 7
     d26:	90 78       	andi	r25, 0x80	; 128
     d28:	0e 94 ac 05 	call	0xb58	; 0xb58 <goto_OLED_page>
			goto_OLED_char_column(start_column);
     d2c:	83 2d       	mov	r24, r3
     d2e:	0e 94 b3 05 	call	0xb66	; 0xb66 <goto_OLED_char_column>
     d32:	24 c0       	rjmp	.+72     	; 0xd7c <print_to_OLED+0xe4>
		}
		else{
			for (int j = 0; j < font_type.width; j++){
     d34:	85 2d       	mov	r24, r5
     d36:	94 2d       	mov	r25, r4
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	f7 01       	movw	r30, r14
     d3c:	60 81       	ld	r22, Z
     d3e:	da 01       	movw	r26, r20
     d40:	a6 1b       	sub	r26, r22
     d42:	b1 09       	sbc	r27, r1
     d44:	2a 9f       	mul	r18, r26
     d46:	f0 01       	movw	r30, r0
     d48:	2b 9f       	mul	r18, r27
     d4a:	f0 0d       	add	r31, r0
     d4c:	3a 9f       	mul	r19, r26
     d4e:	f0 0d       	add	r31, r0
     d50:	11 24       	eor	r1, r1
     d52:	e8 0f       	add	r30, r24
     d54:	f9 1f       	adc	r31, r25
     d56:	d6 01       	movw	r26, r12
     d58:	2d 91       	ld	r18, X+
     d5a:	3c 91       	ld	r19, X
     d5c:	e2 0f       	add	r30, r18
     d5e:	f3 1f       	adc	r31, r19
     d60:	e4 91       	lpm	r30, Z
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
     d62:	d8 01       	movw	r26, r16
     d64:	ec 93       	st	X, r30
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
				current_column = current_column + font_type.width;
     d66:	30 91 f3 01 	lds	r19, 0x01F3
     d6a:	28 81       	ld	r18, Y
     d6c:	32 0f       	add	r19, r18
     d6e:	30 93 f3 01 	sts	0x01F3, r19
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	82 17       	cp	r24, r18
     d78:	93 07       	cpc	r25, r19
     d7a:	fc f2       	brlt	.-66     	; 0xd3a <print_to_OLED+0xa2>

void print_to_OLED(const char * string, uint8_t start_column){
	goto_OLED_char_column(start_column);
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
     d7c:	bf ef       	ldi	r27, 0xFF	; 255
     d7e:	ab 1a       	sub	r10, r27
     d80:	bb 0a       	sbc	r11, r27
     d82:	6a 14       	cp	r6, r10
     d84:	7b 04       	cpc	r7, r11
     d86:	09 f0       	breq	.+2      	; 0xd8a <print_to_OLED+0xf2>
     d88:	be cf       	rjmp	.-132    	; 0xd06 <print_to_OLED+0x6e>
				current_column = current_column + font_type.width;
			}
		}
	}
	return;
}
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	bf 90       	pop	r11
     d9c:	af 90       	pop	r10
     d9e:	9f 90       	pop	r9
     da0:	8f 90       	pop	r8
     da2:	7f 90       	pop	r7
     da4:	6f 90       	pop	r6
     da6:	5f 90       	pop	r5
     da8:	4f 90       	pop	r4
     daa:	3f 90       	pop	r3
     dac:	08 95       	ret

00000dae <OLED_print_arrow>:

void OLED_print_arrow(uint8_t page)
{	int temp = current_page;
     dae:	cf 93       	push	r28
     db0:	c0 91 f2 01 	lds	r28, 0x01F2
	goto_OLED_page(page);
     db4:	0e 94 ac 05 	call	0xb58	; 0xb58 <goto_OLED_page>
	goto_OLED_physical_column(1);
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	0e 94 cb 05 	call	0xb96	; 0xb96 <goto_OLED_physical_column>
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
     dbe:	e0 e0       	ldi	r30, 0x00	; 0
     dc0:	f2 e1       	ldi	r31, 0x12	; 18
     dc2:	98 e1       	ldi	r25, 0x18	; 24
     dc4:	90 83       	st	Z, r25
     dc6:	90 83       	st	Z, r25
     dc8:	8e e7       	ldi	r24, 0x7E	; 126
     dca:	80 83       	st	Z, r24
     dcc:	8c e3       	ldi	r24, 0x3C	; 60
     dce:	80 83       	st	Z, r24
     dd0:	90 83       	st	Z, r25
	write_OLED_data(0b00011000);
	write_OLED_data(0b00011000);
	write_OLED_data(0b01111110);
	write_OLED_data(0b00111100);
	write_OLED_data(0b00011000);
	current_column = ARROW_WIDTH;
     dd2:	88 e0       	ldi	r24, 0x08	; 8
     dd4:	80 93 f3 01 	sts	0x01F3, r24
	
	goto_OLED_page(temp);
     dd8:	8c 2f       	mov	r24, r28
     dda:	0e 94 ac 05 	call	0xb58	; 0xb58 <goto_OLED_page>
}
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <OLED_print_square>:

void OLED_print_square(uint8_t page,uint8_t column){
     de2:	cf 93       	push	r28
     de4:	c6 2f       	mov	r28, r22
	goto_OLED_page(page);
     de6:	0e 94 ac 05 	call	0xb58	; 0xb58 <goto_OLED_page>
	goto_OLED_physical_column(column);
     dea:	8c 2f       	mov	r24, r28
     dec:	0e 94 cb 05 	call	0xb96	; 0xb96 <goto_OLED_physical_column>
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
     df0:	e0 e0       	ldi	r30, 0x00	; 0
     df2:	f2 e1       	ldi	r31, 0x12	; 18
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	80 83       	st	Z, r24
     df8:	80 83       	st	Z, r24
     dfa:	80 83       	st	Z, r24
     dfc:	80 83       	st	Z, r24
	goto_OLED_physical_column(column);
	write_OLED_data(0b11111111);
	write_OLED_data(0b11111111);
	write_OLED_data(0b11111111);
	write_OLED_data(0b11111111);
}
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <goto_next_pixel>:
	
	OLED_print_square(current_page, current_column);
}

void goto_next_pixel(){
	joy_relative_pos();
     e02:	0e 94 35 03 	call	0x66a	; 0x66a <joy_relative_pos>
	
	joy_direction x_dir=NEUTRAL;
	joy_direction y_dir=NEUTRAL;

	if (rel_position.x_pos>=-20 && rel_position.x_pos<=20){
     e06:	80 91 18 02 	lds	r24, 0x0218
     e0a:	90 91 19 02 	lds	r25, 0x0219
     e0e:	9c 01       	movw	r18, r24
     e10:	2c 5e       	subi	r18, 0xEC	; 236
     e12:	3f 4f       	sbci	r19, 0xFF	; 255
     e14:	29 32       	cpi	r18, 0x29	; 41
     e16:	31 05       	cpc	r19, r1
     e18:	68 f0       	brcs	.+26     	; 0xe34 <goto_next_pixel+0x32>
		x_dir=NEUTRAL;
	}
	else if (rel_position.x_pos>=20){
     e1a:	44 97       	sbiw	r24, 0x14	; 20
     e1c:	34 f0       	brlt	.+12     	; 0xe2a <goto_next_pixel+0x28>
		x_dir=RIGHT;
		goto_OLED_physical_column(current_column+1);
     e1e:	80 91 f3 01 	lds	r24, 0x01F3
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	0e 94 cb 05 	call	0xb96	; 0xb96 <goto_OLED_physical_column>
     e28:	05 c0       	rjmp	.+10     	; 0xe34 <goto_next_pixel+0x32>
	}
	else{
		x_dir=LEFT;
		goto_OLED_physical_column(current_column-1);
     e2a:	80 91 f3 01 	lds	r24, 0x01F3
     e2e:	81 50       	subi	r24, 0x01	; 1
     e30:	0e 94 cb 05 	call	0xb96	; 0xb96 <goto_OLED_physical_column>
	}


	if (rel_position.y_pos>=-20 && rel_position.y_pos<=20){
     e34:	80 91 1a 02 	lds	r24, 0x021A
     e38:	90 91 1b 02 	lds	r25, 0x021B
     e3c:	9c 01       	movw	r18, r24
     e3e:	2c 5e       	subi	r18, 0xEC	; 236
     e40:	3f 4f       	sbci	r19, 0xFF	; 255
     e42:	29 32       	cpi	r18, 0x29	; 41
     e44:	31 05       	cpc	r19, r1
     e46:	68 f0       	brcs	.+26     	; 0xe62 <goto_next_pixel+0x60>
		y_dir=NEUTRAL;
	}
	else if (rel_position.y_pos>=20){
     e48:	44 97       	sbiw	r24, 0x14	; 20
     e4a:	34 f0       	brlt	.+12     	; 0xe58 <goto_next_pixel+0x56>
		y_dir=UP;
		goto_OLED_page(current_page-1);
     e4c:	80 91 f2 01 	lds	r24, 0x01F2
     e50:	81 50       	subi	r24, 0x01	; 1
     e52:	0e 94 ac 05 	call	0xb58	; 0xb58 <goto_OLED_page>
     e56:	08 95       	ret
	}
	else{
		y_dir=DOWN;
		goto_OLED_page(current_page+1);
     e58:	80 91 f2 01 	lds	r24, 0x01F2
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	0e 94 ac 05 	call	0xb58	; 0xb58 <goto_OLED_page>
     e62:	08 95       	ret

00000e64 <draw_OLED>:
}


void draw_OLED(){
	
	goto_next_pixel();
     e64:	0e 94 01 07 	call	0xe02	; 0xe02 <goto_next_pixel>
	
	OLED_print_square(current_page, current_column);
     e68:	60 91 f3 01 	lds	r22, 0x01F3
     e6c:	80 91 f2 01 	lds	r24, 0x01F2
     e70:	0e 94 f1 06 	call	0xde2	; 0xde2 <OLED_print_square>
     e74:	08 95       	ret

00000e76 <slider_init>:




void slider_init(void){
	DDRD &= ~((1<<PD2) | (1<<PD3));
     e76:	81 b3       	in	r24, 0x11	; 17
     e78:	83 7f       	andi	r24, 0xF3	; 243
     e7a:	81 bb       	out	0x11, r24	; 17
	
	/* Enable slider button interrupts. */
	cli();								// Disable global interrupts
     e7c:	f8 94       	cli
	MCUCR |= (1<<ISC01) | (1<<ISC11);	// Interrupt on rising edge PD2 and PD3. 
     e7e:	85 b7       	in	r24, 0x35	; 53
     e80:	8a 60       	ori	r24, 0x0A	; 10
     e82:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0) | (1<< INT1);		// Enable interrupt on PD2 and PD3. 
     e84:	8b b7       	in	r24, 0x3b	; 59
     e86:	80 6c       	ori	r24, 0xC0	; 192
     e88:	8b bf       	out	0x3b, r24	; 59
	sei();								// Enable global interrupts
     e8a:	78 94       	sei
     e8c:	08 95       	ret

00000e8e <get_slider_pos>:


int8_t get_slider_pos(ADC_channel adc_ch){
	//slider_init();
	volatile char *ext_adc = (char *) 0x1400; // Start address for the ADC
	*ext_adc	= adc_ch;
     e8e:	80 93 00 14 	sts	0x1400, r24
	
	//_delay_us(40);
	while (PINB & (1<<PINB3)) {	}	//wait for adc interrupt on conversion finish.
     e92:	b3 99       	sbic	0x16, 3	; 22
     e94:	fe cf       	rjmp	.-4      	; 0xe92 <get_slider_pos+0x4>
		
		
	int8_t position = *ext_adc;
     e96:	80 91 00 14 	lds	r24, 0x1400
	
	return position;
	
}
     e9a:	08 95       	ret

00000e9c <SPI_init>:
#define SCK		7



void SPI_init(){
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SSn);		//Set MOSI, SCK, SSn output.
     e9c:	87 b3       	in	r24, 0x17	; 23
     e9e:	80 6b       	ori	r24, 0xB0	; 176
     ea0:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~((1<<MISO));		//Set MISO input.
     ea2:	be 98       	cbi	0x17, 6	; 23
	PORTB|=(1<<MISO);
     ea4:	c6 9a       	sbi	0x18, 6	; 24
	SPCR |= (1<<SPE) | (1<<MSTR)|(1<<SPR0);	//Enable SPI, Master, set clock rate fck/16.
     ea6:	8d b1       	in	r24, 0x0d	; 13
     ea8:	81 65       	ori	r24, 0x51	; 81
     eaa:	8d b9       	out	0x0d, r24	; 13
     eac:	08 95       	ret

00000eae <send_SPI>:
}


void send_SPI(char data){
	
	SPDR = data;			//Send data.
     eae:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF))) {}		//Wait for transmission complete.
     eb0:	77 9b       	sbis	0x0e, 7	; 14
     eb2:	fe cf       	rjmp	.-4      	; 0xeb0 <send_SPI+0x2>
	
}
     eb4:	08 95       	ret

00000eb6 <read_SPI>:

char read_SPI(){	
	send_SPI(0xFF);		//Send dummy byte.		
     eb6:	8f ef       	ldi	r24, 0xFF	; 255
     eb8:	0e 94 57 07 	call	0xeae	; 0xeae <send_SPI>
	while (!(SPSR & (1<<SPIF))) {}		//Wait for transmission complete.
     ebc:	77 9b       	sbis	0x0e, 7	; 14
     ebe:	fe cf       	rjmp	.-4      	; 0xebc <read_SPI+0x6>
	return SPDR;
     ec0:	8f b1       	in	r24, 0x0f	; 15
}
     ec2:	08 95       	ret

00000ec4 <spi_chipselect_activate>:

void spi_chipselect_activate(){
	PORTB |=(1<<SSn);
     ec4:	c4 9a       	sbi	0x18, 4	; 24
     ec6:	08 95       	ret

00000ec8 <spi_chipselect_deactivate>:
}

void spi_chipselect_deactivate(){
	PORTB &=~(1<<SSn);
     ec8:	c4 98       	cbi	0x18, 4	; 24
     eca:	08 95       	ret

00000ecc <SRAM_clear>:
}

void SRAM_clear(){
	uint16_t ext_ram_size = 0x800;
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	for (int i = 0; i < ext_ram_size; i++){
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
		ext_ram[i] = 0;
     ed4:	f9 01       	movw	r30, r18
     ed6:	f8 5e       	subi	r31, 0xE8	; 232
     ed8:	10 82       	st	Z, r1
}

void SRAM_clear(){
	uint16_t ext_ram_size = 0x800;
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	for (int i = 0; i < ext_ram_size; i++){
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	9c 01       	movw	r18, r24
     ede:	81 15       	cp	r24, r1
     ee0:	48 e0       	ldi	r20, 0x08	; 8
     ee2:	94 07       	cpc	r25, r20
     ee4:	b9 f7       	brne	.-18     	; 0xed4 <SRAM_clear+0x8>
		ext_ram[i] = 0;
	}
}
     ee6:	08 95       	ret

00000ee8 <SRAM_init>:




void SRAM_init(){
	memory_init();
     ee8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <memory_init>
	SRAM_clear();
     eec:	0e 94 66 07 	call	0xecc	; 0xecc <SRAM_clear>
     ef0:	08 95       	ret

00000ef2 <UART_Transmit>:
	}
	
void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer*/
		while( !( UCSR0A & (1<<UDRE0)) )
     ef2:	5d 9b       	sbis	0x0b, 5	; 11
     ef4:	fe cf       	rjmp	.-4      	; 0xef2 <UART_Transmit>
		;
	/* Put data into buffer, sends the data*/
		UDR0 = data;
     ef6:	8c b9       	out	0x0c, r24	; 12
     ef8:	08 95       	ret

00000efa <UART_Receive>:
}

unsigned char UART_Receive(void)
	{
		/* Wait for data to be received*/
		while( !(UCSR0A & (1<<RXC0)) )
     efa:	5f 9b       	sbis	0x0b, 7	; 11
     efc:	fe cf       	rjmp	.-4      	; 0xefa <UART_Receive>
			;
		/* Get and return received data from buffer*/
		return UDR0;
     efe:	8c b1       	in	r24, 0x0c	; 12
     f00:	08 95       	ret

00000f02 <UART_Init>:
#define MYUBRR FOSC/16/BAUD-1

void UART_Init(unsigned int ubrr)
	{
		/* Set baud rate */
		UBRR0H = (unsigned char)(ubrr>>8);
     f02:	90 bd       	out	0x20, r25	; 32
		UBRR0L = (unsigned char)ubrr;
     f04:	89 b9       	out	0x09, r24	; 9
		/* Enable receiver and transmitter */
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     f06:	88 e1       	ldi	r24, 0x18	; 24
     f08:	8a b9       	out	0x0a, r24	; 10
		/* 
		Set frame format: 8data, 2stop bit
		*/
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     f0a:	8e e8       	ldi	r24, 0x8E	; 142
     f0c:	80 bd       	out	0x20, r24	; 32
		fdevopen(&UART_Transmit, &UART_Receive);
     f0e:	6d e7       	ldi	r22, 0x7D	; 125
     f10:	77 e0       	ldi	r23, 0x07	; 7
     f12:	89 e7       	ldi	r24, 0x79	; 121
     f14:	97 e0       	ldi	r25, 0x07	; 7
     f16:	0e 94 b6 07 	call	0xf6c	; 0xf6c <fdevopen>
     f1a:	08 95       	ret

00000f1c <__divmodhi4>:
     f1c:	97 fb       	bst	r25, 7
     f1e:	07 2e       	mov	r0, r23
     f20:	16 f4       	brtc	.+4      	; 0xf26 <__divmodhi4+0xa>
     f22:	00 94       	com	r0
     f24:	07 d0       	rcall	.+14     	; 0xf34 <__divmodhi4_neg1>
     f26:	77 fd       	sbrc	r23, 7
     f28:	09 d0       	rcall	.+18     	; 0xf3c <__divmodhi4_neg2>
     f2a:	0e 94 a2 07 	call	0xf44	; 0xf44 <__udivmodhi4>
     f2e:	07 fc       	sbrc	r0, 7
     f30:	05 d0       	rcall	.+10     	; 0xf3c <__divmodhi4_neg2>
     f32:	3e f4       	brtc	.+14     	; 0xf42 <__divmodhi4_exit>

00000f34 <__divmodhi4_neg1>:
     f34:	90 95       	com	r25
     f36:	81 95       	neg	r24
     f38:	9f 4f       	sbci	r25, 0xFF	; 255
     f3a:	08 95       	ret

00000f3c <__divmodhi4_neg2>:
     f3c:	70 95       	com	r23
     f3e:	61 95       	neg	r22
     f40:	7f 4f       	sbci	r23, 0xFF	; 255

00000f42 <__divmodhi4_exit>:
     f42:	08 95       	ret

00000f44 <__udivmodhi4>:
     f44:	aa 1b       	sub	r26, r26
     f46:	bb 1b       	sub	r27, r27
     f48:	51 e1       	ldi	r21, 0x11	; 17
     f4a:	07 c0       	rjmp	.+14     	; 0xf5a <__udivmodhi4_ep>

00000f4c <__udivmodhi4_loop>:
     f4c:	aa 1f       	adc	r26, r26
     f4e:	bb 1f       	adc	r27, r27
     f50:	a6 17       	cp	r26, r22
     f52:	b7 07       	cpc	r27, r23
     f54:	10 f0       	brcs	.+4      	; 0xf5a <__udivmodhi4_ep>
     f56:	a6 1b       	sub	r26, r22
     f58:	b7 0b       	sbc	r27, r23

00000f5a <__udivmodhi4_ep>:
     f5a:	88 1f       	adc	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	5a 95       	dec	r21
     f60:	a9 f7       	brne	.-22     	; 0xf4c <__udivmodhi4_loop>
     f62:	80 95       	com	r24
     f64:	90 95       	com	r25
     f66:	bc 01       	movw	r22, r24
     f68:	cd 01       	movw	r24, r26
     f6a:	08 95       	ret

00000f6c <fdevopen>:
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	ec 01       	movw	r28, r24
     f76:	8b 01       	movw	r16, r22
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	31 f4       	brne	.+12     	; 0xf88 <fdevopen+0x1c>
     f7c:	61 15       	cp	r22, r1
     f7e:	71 05       	cpc	r23, r1
     f80:	19 f4       	brne	.+6      	; 0xf88 <fdevopen+0x1c>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	38 c0       	rjmp	.+112    	; 0xff8 <fdevopen+0x8c>
     f88:	6e e0       	ldi	r22, 0x0E	; 14
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 22 0a 	call	0x1444	; 0x1444 <calloc>
     f94:	fc 01       	movw	r30, r24
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	a1 f3       	breq	.-24     	; 0xf82 <fdevopen+0x16>
     f9a:	80 e8       	ldi	r24, 0x80	; 128
     f9c:	83 83       	std	Z+3, r24	; 0x03
     f9e:	01 15       	cp	r16, r1
     fa0:	11 05       	cpc	r17, r1
     fa2:	71 f0       	breq	.+28     	; 0xfc0 <fdevopen+0x54>
     fa4:	13 87       	std	Z+11, r17	; 0x0b
     fa6:	02 87       	std	Z+10, r16	; 0x0a
     fa8:	81 e8       	ldi	r24, 0x81	; 129
     faa:	83 83       	std	Z+3, r24	; 0x03
     fac:	80 91 4f 02 	lds	r24, 0x024F
     fb0:	90 91 50 02 	lds	r25, 0x0250
     fb4:	89 2b       	or	r24, r25
     fb6:	21 f4       	brne	.+8      	; 0xfc0 <fdevopen+0x54>
     fb8:	f0 93 50 02 	sts	0x0250, r31
     fbc:	e0 93 4f 02 	sts	0x024F, r30
     fc0:	20 97       	sbiw	r28, 0x00	; 0
     fc2:	c9 f0       	breq	.+50     	; 0xff6 <fdevopen+0x8a>
     fc4:	d1 87       	std	Z+9, r29	; 0x09
     fc6:	c0 87       	std	Z+8, r28	; 0x08
     fc8:	83 81       	ldd	r24, Z+3	; 0x03
     fca:	82 60       	ori	r24, 0x02	; 2
     fcc:	83 83       	std	Z+3, r24	; 0x03
     fce:	80 91 51 02 	lds	r24, 0x0251
     fd2:	90 91 52 02 	lds	r25, 0x0252
     fd6:	89 2b       	or	r24, r25
     fd8:	71 f4       	brne	.+28     	; 0xff6 <fdevopen+0x8a>
     fda:	f0 93 52 02 	sts	0x0252, r31
     fde:	e0 93 51 02 	sts	0x0251, r30
     fe2:	80 91 53 02 	lds	r24, 0x0253
     fe6:	90 91 54 02 	lds	r25, 0x0254
     fea:	89 2b       	or	r24, r25
     fec:	21 f4       	brne	.+8      	; 0xff6 <fdevopen+0x8a>
     fee:	f0 93 54 02 	sts	0x0254, r31
     ff2:	e0 93 53 02 	sts	0x0253, r30
     ff6:	cf 01       	movw	r24, r30
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	08 95       	ret

00001002 <puts>:
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	e0 91 51 02 	lds	r30, 0x0251
    100e:	f0 91 52 02 	lds	r31, 0x0252
    1012:	23 81       	ldd	r18, Z+3	; 0x03
    1014:	21 ff       	sbrs	r18, 1
    1016:	1b c0       	rjmp	.+54     	; 0x104e <puts+0x4c>
    1018:	ec 01       	movw	r28, r24
    101a:	00 e0       	ldi	r16, 0x00	; 0
    101c:	10 e0       	ldi	r17, 0x00	; 0
    101e:	89 91       	ld	r24, Y+
    1020:	60 91 51 02 	lds	r22, 0x0251
    1024:	70 91 52 02 	lds	r23, 0x0252
    1028:	db 01       	movw	r26, r22
    102a:	18 96       	adiw	r26, 0x08	; 8
    102c:	ed 91       	ld	r30, X+
    102e:	fc 91       	ld	r31, X
    1030:	19 97       	sbiw	r26, 0x09	; 9
    1032:	88 23       	and	r24, r24
    1034:	31 f0       	breq	.+12     	; 0x1042 <puts+0x40>
    1036:	09 95       	icall
    1038:	89 2b       	or	r24, r25
    103a:	89 f3       	breq	.-30     	; 0x101e <puts+0x1c>
    103c:	0f ef       	ldi	r16, 0xFF	; 255
    103e:	1f ef       	ldi	r17, 0xFF	; 255
    1040:	ee cf       	rjmp	.-36     	; 0x101e <puts+0x1c>
    1042:	8a e0       	ldi	r24, 0x0A	; 10
    1044:	09 95       	icall
    1046:	89 2b       	or	r24, r25
    1048:	11 f4       	brne	.+4      	; 0x104e <puts+0x4c>
    104a:	c8 01       	movw	r24, r16
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <puts+0x50>
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	9f ef       	ldi	r25, 0xFF	; 255
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	08 95       	ret

0000105c <sprintf>:
    105c:	ae e0       	ldi	r26, 0x0E	; 14
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e4 e3       	ldi	r30, 0x34	; 52
    1062:	f8 e0       	ldi	r31, 0x08	; 8
    1064:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__prologue_saves__+0x1c>
    1068:	0d 89       	ldd	r16, Y+21	; 0x15
    106a:	1e 89       	ldd	r17, Y+22	; 0x16
    106c:	86 e0       	ldi	r24, 0x06	; 6
    106e:	8c 83       	std	Y+4, r24	; 0x04
    1070:	1a 83       	std	Y+2, r17	; 0x02
    1072:	09 83       	std	Y+1, r16	; 0x01
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	9f e7       	ldi	r25, 0x7F	; 127
    1078:	9e 83       	std	Y+6, r25	; 0x06
    107a:	8d 83       	std	Y+5, r24	; 0x05
    107c:	ae 01       	movw	r20, r28
    107e:	47 5e       	subi	r20, 0xE7	; 231
    1080:	5f 4f       	sbci	r21, 0xFF	; 255
    1082:	6f 89       	ldd	r22, Y+23	; 0x17
    1084:	78 8d       	ldd	r23, Y+24	; 0x18
    1086:	ce 01       	movw	r24, r28
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <vfprintf>
    108e:	ef 81       	ldd	r30, Y+7	; 0x07
    1090:	f8 85       	ldd	r31, Y+8	; 0x08
    1092:	e0 0f       	add	r30, r16
    1094:	f1 1f       	adc	r31, r17
    1096:	10 82       	st	Z, r1
    1098:	2e 96       	adiw	r28, 0x0e	; 14
    109a:	e4 e0       	ldi	r30, 0x04	; 4
    109c:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <__epilogue_restores__+0x1c>

000010a0 <vfprintf>:
    10a0:	ac e0       	ldi	r26, 0x0C	; 12
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e6 e5       	ldi	r30, 0x56	; 86
    10a6:	f8 e0       	ldi	r31, 0x08	; 8
    10a8:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__prologue_saves__>
    10ac:	7c 01       	movw	r14, r24
    10ae:	6b 01       	movw	r12, r22
    10b0:	8a 01       	movw	r16, r20
    10b2:	fc 01       	movw	r30, r24
    10b4:	17 82       	std	Z+7, r1	; 0x07
    10b6:	16 82       	std	Z+6, r1	; 0x06
    10b8:	83 81       	ldd	r24, Z+3	; 0x03
    10ba:	81 ff       	sbrs	r24, 1
    10bc:	bd c1       	rjmp	.+890    	; 0x1438 <vfprintf+0x398>
    10be:	ce 01       	movw	r24, r28
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	4c 01       	movw	r8, r24
    10c4:	f7 01       	movw	r30, r14
    10c6:	93 81       	ldd	r25, Z+3	; 0x03
    10c8:	f6 01       	movw	r30, r12
    10ca:	93 fd       	sbrc	r25, 3
    10cc:	85 91       	lpm	r24, Z+
    10ce:	93 ff       	sbrs	r25, 3
    10d0:	81 91       	ld	r24, Z+
    10d2:	6f 01       	movw	r12, r30
    10d4:	88 23       	and	r24, r24
    10d6:	09 f4       	brne	.+2      	; 0x10da <vfprintf+0x3a>
    10d8:	ab c1       	rjmp	.+854    	; 0x1430 <vfprintf+0x390>
    10da:	85 32       	cpi	r24, 0x25	; 37
    10dc:	39 f4       	brne	.+14     	; 0x10ec <vfprintf+0x4c>
    10de:	93 fd       	sbrc	r25, 3
    10e0:	85 91       	lpm	r24, Z+
    10e2:	93 ff       	sbrs	r25, 3
    10e4:	81 91       	ld	r24, Z+
    10e6:	6f 01       	movw	r12, r30
    10e8:	85 32       	cpi	r24, 0x25	; 37
    10ea:	29 f4       	brne	.+10     	; 0x10f6 <vfprintf+0x56>
    10ec:	b7 01       	movw	r22, r14
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    10f4:	e7 cf       	rjmp	.-50     	; 0x10c4 <vfprintf+0x24>
    10f6:	51 2c       	mov	r5, r1
    10f8:	31 2c       	mov	r3, r1
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	20 32       	cpi	r18, 0x20	; 32
    10fe:	a0 f4       	brcc	.+40     	; 0x1128 <vfprintf+0x88>
    1100:	8b 32       	cpi	r24, 0x2B	; 43
    1102:	69 f0       	breq	.+26     	; 0x111e <vfprintf+0x7e>
    1104:	30 f4       	brcc	.+12     	; 0x1112 <vfprintf+0x72>
    1106:	80 32       	cpi	r24, 0x20	; 32
    1108:	59 f0       	breq	.+22     	; 0x1120 <vfprintf+0x80>
    110a:	83 32       	cpi	r24, 0x23	; 35
    110c:	69 f4       	brne	.+26     	; 0x1128 <vfprintf+0x88>
    110e:	20 61       	ori	r18, 0x10	; 16
    1110:	2c c0       	rjmp	.+88     	; 0x116a <vfprintf+0xca>
    1112:	8d 32       	cpi	r24, 0x2D	; 45
    1114:	39 f0       	breq	.+14     	; 0x1124 <vfprintf+0x84>
    1116:	80 33       	cpi	r24, 0x30	; 48
    1118:	39 f4       	brne	.+14     	; 0x1128 <vfprintf+0x88>
    111a:	21 60       	ori	r18, 0x01	; 1
    111c:	26 c0       	rjmp	.+76     	; 0x116a <vfprintf+0xca>
    111e:	22 60       	ori	r18, 0x02	; 2
    1120:	24 60       	ori	r18, 0x04	; 4
    1122:	23 c0       	rjmp	.+70     	; 0x116a <vfprintf+0xca>
    1124:	28 60       	ori	r18, 0x08	; 8
    1126:	21 c0       	rjmp	.+66     	; 0x116a <vfprintf+0xca>
    1128:	27 fd       	sbrc	r18, 7
    112a:	27 c0       	rjmp	.+78     	; 0x117a <vfprintf+0xda>
    112c:	30 ed       	ldi	r19, 0xD0	; 208
    112e:	38 0f       	add	r19, r24
    1130:	3a 30       	cpi	r19, 0x0A	; 10
    1132:	78 f4       	brcc	.+30     	; 0x1152 <vfprintf+0xb2>
    1134:	26 ff       	sbrs	r18, 6
    1136:	06 c0       	rjmp	.+12     	; 0x1144 <vfprintf+0xa4>
    1138:	fa e0       	ldi	r31, 0x0A	; 10
    113a:	5f 9e       	mul	r5, r31
    113c:	30 0d       	add	r19, r0
    113e:	11 24       	eor	r1, r1
    1140:	53 2e       	mov	r5, r19
    1142:	13 c0       	rjmp	.+38     	; 0x116a <vfprintf+0xca>
    1144:	8a e0       	ldi	r24, 0x0A	; 10
    1146:	38 9e       	mul	r3, r24
    1148:	30 0d       	add	r19, r0
    114a:	11 24       	eor	r1, r1
    114c:	33 2e       	mov	r3, r19
    114e:	20 62       	ori	r18, 0x20	; 32
    1150:	0c c0       	rjmp	.+24     	; 0x116a <vfprintf+0xca>
    1152:	8e 32       	cpi	r24, 0x2E	; 46
    1154:	21 f4       	brne	.+8      	; 0x115e <vfprintf+0xbe>
    1156:	26 fd       	sbrc	r18, 6
    1158:	6b c1       	rjmp	.+726    	; 0x1430 <vfprintf+0x390>
    115a:	20 64       	ori	r18, 0x40	; 64
    115c:	06 c0       	rjmp	.+12     	; 0x116a <vfprintf+0xca>
    115e:	8c 36       	cpi	r24, 0x6C	; 108
    1160:	11 f4       	brne	.+4      	; 0x1166 <vfprintf+0xc6>
    1162:	20 68       	ori	r18, 0x80	; 128
    1164:	02 c0       	rjmp	.+4      	; 0x116a <vfprintf+0xca>
    1166:	88 36       	cpi	r24, 0x68	; 104
    1168:	41 f4       	brne	.+16     	; 0x117a <vfprintf+0xda>
    116a:	f6 01       	movw	r30, r12
    116c:	93 fd       	sbrc	r25, 3
    116e:	85 91       	lpm	r24, Z+
    1170:	93 ff       	sbrs	r25, 3
    1172:	81 91       	ld	r24, Z+
    1174:	6f 01       	movw	r12, r30
    1176:	81 11       	cpse	r24, r1
    1178:	c1 cf       	rjmp	.-126    	; 0x10fc <vfprintf+0x5c>
    117a:	98 2f       	mov	r25, r24
    117c:	9f 7d       	andi	r25, 0xDF	; 223
    117e:	95 54       	subi	r25, 0x45	; 69
    1180:	93 30       	cpi	r25, 0x03	; 3
    1182:	28 f4       	brcc	.+10     	; 0x118e <vfprintf+0xee>
    1184:	0c 5f       	subi	r16, 0xFC	; 252
    1186:	1f 4f       	sbci	r17, 0xFF	; 255
    1188:	ff e3       	ldi	r31, 0x3F	; 63
    118a:	f9 83       	std	Y+1, r31	; 0x01
    118c:	0d c0       	rjmp	.+26     	; 0x11a8 <vfprintf+0x108>
    118e:	83 36       	cpi	r24, 0x63	; 99
    1190:	31 f0       	breq	.+12     	; 0x119e <vfprintf+0xfe>
    1192:	83 37       	cpi	r24, 0x73	; 115
    1194:	71 f0       	breq	.+28     	; 0x11b2 <vfprintf+0x112>
    1196:	83 35       	cpi	r24, 0x53	; 83
    1198:	09 f0       	breq	.+2      	; 0x119c <vfprintf+0xfc>
    119a:	5b c0       	rjmp	.+182    	; 0x1252 <vfprintf+0x1b2>
    119c:	22 c0       	rjmp	.+68     	; 0x11e2 <vfprintf+0x142>
    119e:	f8 01       	movw	r30, r16
    11a0:	80 81       	ld	r24, Z
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	0e 5f       	subi	r16, 0xFE	; 254
    11a6:	1f 4f       	sbci	r17, 0xFF	; 255
    11a8:	44 24       	eor	r4, r4
    11aa:	43 94       	inc	r4
    11ac:	51 2c       	mov	r5, r1
    11ae:	54 01       	movw	r10, r8
    11b0:	15 c0       	rjmp	.+42     	; 0x11dc <vfprintf+0x13c>
    11b2:	38 01       	movw	r6, r16
    11b4:	f2 e0       	ldi	r31, 0x02	; 2
    11b6:	6f 0e       	add	r6, r31
    11b8:	71 1c       	adc	r7, r1
    11ba:	f8 01       	movw	r30, r16
    11bc:	a0 80       	ld	r10, Z
    11be:	b1 80       	ldd	r11, Z+1	; 0x01
    11c0:	26 ff       	sbrs	r18, 6
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <vfprintf+0x12a>
    11c4:	65 2d       	mov	r22, r5
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <vfprintf+0x12e>
    11ca:	6f ef       	ldi	r22, 0xFF	; 255
    11cc:	7f ef       	ldi	r23, 0xFF	; 255
    11ce:	c5 01       	movw	r24, r10
    11d0:	2c 87       	std	Y+12, r18	; 0x0c
    11d2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <strnlen>
    11d6:	2c 01       	movw	r4, r24
    11d8:	83 01       	movw	r16, r6
    11da:	2c 85       	ldd	r18, Y+12	; 0x0c
    11dc:	2f 77       	andi	r18, 0x7F	; 127
    11de:	22 2e       	mov	r2, r18
    11e0:	17 c0       	rjmp	.+46     	; 0x1210 <vfprintf+0x170>
    11e2:	38 01       	movw	r6, r16
    11e4:	f2 e0       	ldi	r31, 0x02	; 2
    11e6:	6f 0e       	add	r6, r31
    11e8:	71 1c       	adc	r7, r1
    11ea:	f8 01       	movw	r30, r16
    11ec:	a0 80       	ld	r10, Z
    11ee:	b1 80       	ldd	r11, Z+1	; 0x01
    11f0:	26 ff       	sbrs	r18, 6
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <vfprintf+0x15a>
    11f4:	65 2d       	mov	r22, r5
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <vfprintf+0x15e>
    11fa:	6f ef       	ldi	r22, 0xFF	; 255
    11fc:	7f ef       	ldi	r23, 0xFF	; 255
    11fe:	c5 01       	movw	r24, r10
    1200:	2c 87       	std	Y+12, r18	; 0x0c
    1202:	0e 94 65 0b 	call	0x16ca	; 0x16ca <strnlen_P>
    1206:	2c 01       	movw	r4, r24
    1208:	2c 85       	ldd	r18, Y+12	; 0x0c
    120a:	20 68       	ori	r18, 0x80	; 128
    120c:	22 2e       	mov	r2, r18
    120e:	83 01       	movw	r16, r6
    1210:	23 fc       	sbrc	r2, 3
    1212:	1b c0       	rjmp	.+54     	; 0x124a <vfprintf+0x1aa>
    1214:	83 2d       	mov	r24, r3
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	48 16       	cp	r4, r24
    121a:	59 06       	cpc	r5, r25
    121c:	b0 f4       	brcc	.+44     	; 0x124a <vfprintf+0x1aa>
    121e:	b7 01       	movw	r22, r14
    1220:	80 e2       	ldi	r24, 0x20	; 32
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    1228:	3a 94       	dec	r3
    122a:	f4 cf       	rjmp	.-24     	; 0x1214 <vfprintf+0x174>
    122c:	f5 01       	movw	r30, r10
    122e:	27 fc       	sbrc	r2, 7
    1230:	85 91       	lpm	r24, Z+
    1232:	27 fe       	sbrs	r2, 7
    1234:	81 91       	ld	r24, Z+
    1236:	5f 01       	movw	r10, r30
    1238:	b7 01       	movw	r22, r14
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    1240:	31 10       	cpse	r3, r1
    1242:	3a 94       	dec	r3
    1244:	f1 e0       	ldi	r31, 0x01	; 1
    1246:	4f 1a       	sub	r4, r31
    1248:	51 08       	sbc	r5, r1
    124a:	41 14       	cp	r4, r1
    124c:	51 04       	cpc	r5, r1
    124e:	71 f7       	brne	.-36     	; 0x122c <vfprintf+0x18c>
    1250:	e5 c0       	rjmp	.+458    	; 0x141c <vfprintf+0x37c>
    1252:	84 36       	cpi	r24, 0x64	; 100
    1254:	11 f0       	breq	.+4      	; 0x125a <vfprintf+0x1ba>
    1256:	89 36       	cpi	r24, 0x69	; 105
    1258:	39 f5       	brne	.+78     	; 0x12a8 <vfprintf+0x208>
    125a:	f8 01       	movw	r30, r16
    125c:	27 ff       	sbrs	r18, 7
    125e:	07 c0       	rjmp	.+14     	; 0x126e <vfprintf+0x1ce>
    1260:	60 81       	ld	r22, Z
    1262:	71 81       	ldd	r23, Z+1	; 0x01
    1264:	82 81       	ldd	r24, Z+2	; 0x02
    1266:	93 81       	ldd	r25, Z+3	; 0x03
    1268:	0c 5f       	subi	r16, 0xFC	; 252
    126a:	1f 4f       	sbci	r17, 0xFF	; 255
    126c:	08 c0       	rjmp	.+16     	; 0x127e <vfprintf+0x1de>
    126e:	60 81       	ld	r22, Z
    1270:	71 81       	ldd	r23, Z+1	; 0x01
    1272:	88 27       	eor	r24, r24
    1274:	77 fd       	sbrc	r23, 7
    1276:	80 95       	com	r24
    1278:	98 2f       	mov	r25, r24
    127a:	0e 5f       	subi	r16, 0xFE	; 254
    127c:	1f 4f       	sbci	r17, 0xFF	; 255
    127e:	2f 76       	andi	r18, 0x6F	; 111
    1280:	b2 2e       	mov	r11, r18
    1282:	97 ff       	sbrs	r25, 7
    1284:	09 c0       	rjmp	.+18     	; 0x1298 <vfprintf+0x1f8>
    1286:	90 95       	com	r25
    1288:	80 95       	com	r24
    128a:	70 95       	com	r23
    128c:	61 95       	neg	r22
    128e:	7f 4f       	sbci	r23, 0xFF	; 255
    1290:	8f 4f       	sbci	r24, 0xFF	; 255
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	20 68       	ori	r18, 0x80	; 128
    1296:	b2 2e       	mov	r11, r18
    1298:	2a e0       	ldi	r18, 0x0A	; 10
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	a4 01       	movw	r20, r8
    129e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__ultoa_invert>
    12a2:	a8 2e       	mov	r10, r24
    12a4:	a8 18       	sub	r10, r8
    12a6:	44 c0       	rjmp	.+136    	; 0x1330 <vfprintf+0x290>
    12a8:	85 37       	cpi	r24, 0x75	; 117
    12aa:	29 f4       	brne	.+10     	; 0x12b6 <vfprintf+0x216>
    12ac:	2f 7e       	andi	r18, 0xEF	; 239
    12ae:	b2 2e       	mov	r11, r18
    12b0:	2a e0       	ldi	r18, 0x0A	; 10
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	25 c0       	rjmp	.+74     	; 0x1300 <vfprintf+0x260>
    12b6:	f2 2f       	mov	r31, r18
    12b8:	f9 7f       	andi	r31, 0xF9	; 249
    12ba:	bf 2e       	mov	r11, r31
    12bc:	8f 36       	cpi	r24, 0x6F	; 111
    12be:	c1 f0       	breq	.+48     	; 0x12f0 <vfprintf+0x250>
    12c0:	18 f4       	brcc	.+6      	; 0x12c8 <vfprintf+0x228>
    12c2:	88 35       	cpi	r24, 0x58	; 88
    12c4:	79 f0       	breq	.+30     	; 0x12e4 <vfprintf+0x244>
    12c6:	b4 c0       	rjmp	.+360    	; 0x1430 <vfprintf+0x390>
    12c8:	80 37       	cpi	r24, 0x70	; 112
    12ca:	19 f0       	breq	.+6      	; 0x12d2 <vfprintf+0x232>
    12cc:	88 37       	cpi	r24, 0x78	; 120
    12ce:	21 f0       	breq	.+8      	; 0x12d8 <vfprintf+0x238>
    12d0:	af c0       	rjmp	.+350    	; 0x1430 <vfprintf+0x390>
    12d2:	2f 2f       	mov	r18, r31
    12d4:	20 61       	ori	r18, 0x10	; 16
    12d6:	b2 2e       	mov	r11, r18
    12d8:	b4 fe       	sbrs	r11, 4
    12da:	0d c0       	rjmp	.+26     	; 0x12f6 <vfprintf+0x256>
    12dc:	8b 2d       	mov	r24, r11
    12de:	84 60       	ori	r24, 0x04	; 4
    12e0:	b8 2e       	mov	r11, r24
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <vfprintf+0x256>
    12e4:	24 ff       	sbrs	r18, 4
    12e6:	0a c0       	rjmp	.+20     	; 0x12fc <vfprintf+0x25c>
    12e8:	9f 2f       	mov	r25, r31
    12ea:	96 60       	ori	r25, 0x06	; 6
    12ec:	b9 2e       	mov	r11, r25
    12ee:	06 c0       	rjmp	.+12     	; 0x12fc <vfprintf+0x25c>
    12f0:	28 e0       	ldi	r18, 0x08	; 8
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	05 c0       	rjmp	.+10     	; 0x1300 <vfprintf+0x260>
    12f6:	20 e1       	ldi	r18, 0x10	; 16
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <vfprintf+0x260>
    12fc:	20 e1       	ldi	r18, 0x10	; 16
    12fe:	32 e0       	ldi	r19, 0x02	; 2
    1300:	f8 01       	movw	r30, r16
    1302:	b7 fe       	sbrs	r11, 7
    1304:	07 c0       	rjmp	.+14     	; 0x1314 <vfprintf+0x274>
    1306:	60 81       	ld	r22, Z
    1308:	71 81       	ldd	r23, Z+1	; 0x01
    130a:	82 81       	ldd	r24, Z+2	; 0x02
    130c:	93 81       	ldd	r25, Z+3	; 0x03
    130e:	0c 5f       	subi	r16, 0xFC	; 252
    1310:	1f 4f       	sbci	r17, 0xFF	; 255
    1312:	06 c0       	rjmp	.+12     	; 0x1320 <vfprintf+0x280>
    1314:	60 81       	ld	r22, Z
    1316:	71 81       	ldd	r23, Z+1	; 0x01
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 5f       	subi	r16, 0xFE	; 254
    131e:	1f 4f       	sbci	r17, 0xFF	; 255
    1320:	a4 01       	movw	r20, r8
    1322:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__ultoa_invert>
    1326:	a8 2e       	mov	r10, r24
    1328:	a8 18       	sub	r10, r8
    132a:	fb 2d       	mov	r31, r11
    132c:	ff 77       	andi	r31, 0x7F	; 127
    132e:	bf 2e       	mov	r11, r31
    1330:	b6 fe       	sbrs	r11, 6
    1332:	0b c0       	rjmp	.+22     	; 0x134a <vfprintf+0x2aa>
    1334:	2b 2d       	mov	r18, r11
    1336:	2e 7f       	andi	r18, 0xFE	; 254
    1338:	a5 14       	cp	r10, r5
    133a:	50 f4       	brcc	.+20     	; 0x1350 <vfprintf+0x2b0>
    133c:	b4 fe       	sbrs	r11, 4
    133e:	0a c0       	rjmp	.+20     	; 0x1354 <vfprintf+0x2b4>
    1340:	b2 fc       	sbrc	r11, 2
    1342:	08 c0       	rjmp	.+16     	; 0x1354 <vfprintf+0x2b4>
    1344:	2b 2d       	mov	r18, r11
    1346:	2e 7e       	andi	r18, 0xEE	; 238
    1348:	05 c0       	rjmp	.+10     	; 0x1354 <vfprintf+0x2b4>
    134a:	7a 2c       	mov	r7, r10
    134c:	2b 2d       	mov	r18, r11
    134e:	03 c0       	rjmp	.+6      	; 0x1356 <vfprintf+0x2b6>
    1350:	7a 2c       	mov	r7, r10
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <vfprintf+0x2b6>
    1354:	75 2c       	mov	r7, r5
    1356:	24 ff       	sbrs	r18, 4
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <vfprintf+0x2d4>
    135a:	fe 01       	movw	r30, r28
    135c:	ea 0d       	add	r30, r10
    135e:	f1 1d       	adc	r31, r1
    1360:	80 81       	ld	r24, Z
    1362:	80 33       	cpi	r24, 0x30	; 48
    1364:	11 f4       	brne	.+4      	; 0x136a <vfprintf+0x2ca>
    1366:	29 7e       	andi	r18, 0xE9	; 233
    1368:	09 c0       	rjmp	.+18     	; 0x137c <vfprintf+0x2dc>
    136a:	22 ff       	sbrs	r18, 2
    136c:	06 c0       	rjmp	.+12     	; 0x137a <vfprintf+0x2da>
    136e:	73 94       	inc	r7
    1370:	73 94       	inc	r7
    1372:	04 c0       	rjmp	.+8      	; 0x137c <vfprintf+0x2dc>
    1374:	82 2f       	mov	r24, r18
    1376:	86 78       	andi	r24, 0x86	; 134
    1378:	09 f0       	breq	.+2      	; 0x137c <vfprintf+0x2dc>
    137a:	73 94       	inc	r7
    137c:	23 fd       	sbrc	r18, 3
    137e:	13 c0       	rjmp	.+38     	; 0x13a6 <vfprintf+0x306>
    1380:	20 ff       	sbrs	r18, 0
    1382:	06 c0       	rjmp	.+12     	; 0x1390 <vfprintf+0x2f0>
    1384:	5a 2c       	mov	r5, r10
    1386:	73 14       	cp	r7, r3
    1388:	18 f4       	brcc	.+6      	; 0x1390 <vfprintf+0x2f0>
    138a:	53 0c       	add	r5, r3
    138c:	57 18       	sub	r5, r7
    138e:	73 2c       	mov	r7, r3
    1390:	73 14       	cp	r7, r3
    1392:	68 f4       	brcc	.+26     	; 0x13ae <vfprintf+0x30e>
    1394:	b7 01       	movw	r22, r14
    1396:	80 e2       	ldi	r24, 0x20	; 32
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	2c 87       	std	Y+12, r18	; 0x0c
    139c:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    13a0:	73 94       	inc	r7
    13a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    13a4:	f5 cf       	rjmp	.-22     	; 0x1390 <vfprintf+0x2f0>
    13a6:	73 14       	cp	r7, r3
    13a8:	10 f4       	brcc	.+4      	; 0x13ae <vfprintf+0x30e>
    13aa:	37 18       	sub	r3, r7
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <vfprintf+0x310>
    13ae:	31 2c       	mov	r3, r1
    13b0:	24 ff       	sbrs	r18, 4
    13b2:	12 c0       	rjmp	.+36     	; 0x13d8 <vfprintf+0x338>
    13b4:	b7 01       	movw	r22, r14
    13b6:	80 e3       	ldi	r24, 0x30	; 48
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	2c 87       	std	Y+12, r18	; 0x0c
    13bc:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    13c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    13c2:	22 ff       	sbrs	r18, 2
    13c4:	17 c0       	rjmp	.+46     	; 0x13f4 <vfprintf+0x354>
    13c6:	21 ff       	sbrs	r18, 1
    13c8:	03 c0       	rjmp	.+6      	; 0x13d0 <vfprintf+0x330>
    13ca:	88 e5       	ldi	r24, 0x58	; 88
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <vfprintf+0x334>
    13d0:	88 e7       	ldi	r24, 0x78	; 120
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	b7 01       	movw	r22, r14
    13d6:	0c c0       	rjmp	.+24     	; 0x13f0 <vfprintf+0x350>
    13d8:	82 2f       	mov	r24, r18
    13da:	86 78       	andi	r24, 0x86	; 134
    13dc:	59 f0       	breq	.+22     	; 0x13f4 <vfprintf+0x354>
    13de:	21 fd       	sbrc	r18, 1
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <vfprintf+0x346>
    13e2:	80 e2       	ldi	r24, 0x20	; 32
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <vfprintf+0x348>
    13e6:	8b e2       	ldi	r24, 0x2B	; 43
    13e8:	27 fd       	sbrc	r18, 7
    13ea:	8d e2       	ldi	r24, 0x2D	; 45
    13ec:	b7 01       	movw	r22, r14
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    13f4:	a5 14       	cp	r10, r5
    13f6:	38 f4       	brcc	.+14     	; 0x1406 <vfprintf+0x366>
    13f8:	b7 01       	movw	r22, r14
    13fa:	80 e3       	ldi	r24, 0x30	; 48
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    1402:	5a 94       	dec	r5
    1404:	f7 cf       	rjmp	.-18     	; 0x13f4 <vfprintf+0x354>
    1406:	aa 94       	dec	r10
    1408:	f4 01       	movw	r30, r8
    140a:	ea 0d       	add	r30, r10
    140c:	f1 1d       	adc	r31, r1
    140e:	80 81       	ld	r24, Z
    1410:	b7 01       	movw	r22, r14
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    1418:	a1 10       	cpse	r10, r1
    141a:	f5 cf       	rjmp	.-22     	; 0x1406 <vfprintf+0x366>
    141c:	33 20       	and	r3, r3
    141e:	09 f4       	brne	.+2      	; 0x1422 <vfprintf+0x382>
    1420:	51 ce       	rjmp	.-862    	; 0x10c4 <vfprintf+0x24>
    1422:	b7 01       	movw	r22, r14
    1424:	80 e2       	ldi	r24, 0x20	; 32
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    142c:	3a 94       	dec	r3
    142e:	f6 cf       	rjmp	.-20     	; 0x141c <vfprintf+0x37c>
    1430:	f7 01       	movw	r30, r14
    1432:	86 81       	ldd	r24, Z+6	; 0x06
    1434:	97 81       	ldd	r25, Z+7	; 0x07
    1436:	02 c0       	rjmp	.+4      	; 0x143c <vfprintf+0x39c>
    1438:	8f ef       	ldi	r24, 0xFF	; 255
    143a:	9f ef       	ldi	r25, 0xFF	; 255
    143c:	2c 96       	adiw	r28, 0x0c	; 12
    143e:	e2 e1       	ldi	r30, 0x12	; 18
    1440:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__epilogue_restores__>

00001444 <calloc>:
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	86 9f       	mul	r24, r22
    144e:	80 01       	movw	r16, r0
    1450:	87 9f       	mul	r24, r23
    1452:	10 0d       	add	r17, r0
    1454:	96 9f       	mul	r25, r22
    1456:	10 0d       	add	r17, r0
    1458:	11 24       	eor	r1, r1
    145a:	c8 01       	movw	r24, r16
    145c:	0e 94 3e 0a 	call	0x147c	; 0x147c <malloc>
    1460:	ec 01       	movw	r28, r24
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	29 f0       	breq	.+10     	; 0x1470 <calloc+0x2c>
    1466:	a8 01       	movw	r20, r16
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <memset>
    1470:	ce 01       	movw	r24, r28
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	08 95       	ret

0000147c <malloc>:
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	91 05       	cpc	r25, r1
    1484:	10 f4       	brcc	.+4      	; 0x148a <malloc+0xe>
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	e0 91 57 02 	lds	r30, 0x0257
    148e:	f0 91 58 02 	lds	r31, 0x0258
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	a0 e0       	ldi	r26, 0x00	; 0
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	30 97       	sbiw	r30, 0x00	; 0
    149c:	39 f1       	breq	.+78     	; 0x14ec <malloc+0x70>
    149e:	40 81       	ld	r20, Z
    14a0:	51 81       	ldd	r21, Z+1	; 0x01
    14a2:	48 17       	cp	r20, r24
    14a4:	59 07       	cpc	r21, r25
    14a6:	b8 f0       	brcs	.+46     	; 0x14d6 <malloc+0x5a>
    14a8:	48 17       	cp	r20, r24
    14aa:	59 07       	cpc	r21, r25
    14ac:	71 f4       	brne	.+28     	; 0x14ca <malloc+0x4e>
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
    14b0:	93 81       	ldd	r25, Z+3	; 0x03
    14b2:	10 97       	sbiw	r26, 0x00	; 0
    14b4:	29 f0       	breq	.+10     	; 0x14c0 <malloc+0x44>
    14b6:	13 96       	adiw	r26, 0x03	; 3
    14b8:	9c 93       	st	X, r25
    14ba:	8e 93       	st	-X, r24
    14bc:	12 97       	sbiw	r26, 0x02	; 2
    14be:	2c c0       	rjmp	.+88     	; 0x1518 <malloc+0x9c>
    14c0:	90 93 58 02 	sts	0x0258, r25
    14c4:	80 93 57 02 	sts	0x0257, r24
    14c8:	27 c0       	rjmp	.+78     	; 0x1518 <malloc+0x9c>
    14ca:	21 15       	cp	r18, r1
    14cc:	31 05       	cpc	r19, r1
    14ce:	31 f0       	breq	.+12     	; 0x14dc <malloc+0x60>
    14d0:	42 17       	cp	r20, r18
    14d2:	53 07       	cpc	r21, r19
    14d4:	18 f0       	brcs	.+6      	; 0x14dc <malloc+0x60>
    14d6:	a9 01       	movw	r20, r18
    14d8:	db 01       	movw	r26, r22
    14da:	01 c0       	rjmp	.+2      	; 0x14de <malloc+0x62>
    14dc:	ef 01       	movw	r28, r30
    14de:	9a 01       	movw	r18, r20
    14e0:	bd 01       	movw	r22, r26
    14e2:	df 01       	movw	r26, r30
    14e4:	02 80       	ldd	r0, Z+2	; 0x02
    14e6:	f3 81       	ldd	r31, Z+3	; 0x03
    14e8:	e0 2d       	mov	r30, r0
    14ea:	d7 cf       	rjmp	.-82     	; 0x149a <malloc+0x1e>
    14ec:	21 15       	cp	r18, r1
    14ee:	31 05       	cpc	r19, r1
    14f0:	f9 f0       	breq	.+62     	; 0x1530 <malloc+0xb4>
    14f2:	28 1b       	sub	r18, r24
    14f4:	39 0b       	sbc	r19, r25
    14f6:	24 30       	cpi	r18, 0x04	; 4
    14f8:	31 05       	cpc	r19, r1
    14fa:	80 f4       	brcc	.+32     	; 0x151c <malloc+0xa0>
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1500:	61 15       	cp	r22, r1
    1502:	71 05       	cpc	r23, r1
    1504:	21 f0       	breq	.+8      	; 0x150e <malloc+0x92>
    1506:	fb 01       	movw	r30, r22
    1508:	93 83       	std	Z+3, r25	; 0x03
    150a:	82 83       	std	Z+2, r24	; 0x02
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <malloc+0x9a>
    150e:	90 93 58 02 	sts	0x0258, r25
    1512:	80 93 57 02 	sts	0x0257, r24
    1516:	fe 01       	movw	r30, r28
    1518:	32 96       	adiw	r30, 0x02	; 2
    151a:	44 c0       	rjmp	.+136    	; 0x15a4 <malloc+0x128>
    151c:	fe 01       	movw	r30, r28
    151e:	e2 0f       	add	r30, r18
    1520:	f3 1f       	adc	r31, r19
    1522:	81 93       	st	Z+, r24
    1524:	91 93       	st	Z+, r25
    1526:	22 50       	subi	r18, 0x02	; 2
    1528:	31 09       	sbc	r19, r1
    152a:	39 83       	std	Y+1, r19	; 0x01
    152c:	28 83       	st	Y, r18
    152e:	3a c0       	rjmp	.+116    	; 0x15a4 <malloc+0x128>
    1530:	20 91 55 02 	lds	r18, 0x0255
    1534:	30 91 56 02 	lds	r19, 0x0256
    1538:	23 2b       	or	r18, r19
    153a:	41 f4       	brne	.+16     	; 0x154c <malloc+0xd0>
    153c:	20 91 02 01 	lds	r18, 0x0102
    1540:	30 91 03 01 	lds	r19, 0x0103
    1544:	30 93 56 02 	sts	0x0256, r19
    1548:	20 93 55 02 	sts	0x0255, r18
    154c:	20 91 00 01 	lds	r18, 0x0100
    1550:	30 91 01 01 	lds	r19, 0x0101
    1554:	21 15       	cp	r18, r1
    1556:	31 05       	cpc	r19, r1
    1558:	41 f4       	brne	.+16     	; 0x156a <malloc+0xee>
    155a:	2d b7       	in	r18, 0x3d	; 61
    155c:	3e b7       	in	r19, 0x3e	; 62
    155e:	40 91 04 01 	lds	r20, 0x0104
    1562:	50 91 05 01 	lds	r21, 0x0105
    1566:	24 1b       	sub	r18, r20
    1568:	35 0b       	sbc	r19, r21
    156a:	e0 91 55 02 	lds	r30, 0x0255
    156e:	f0 91 56 02 	lds	r31, 0x0256
    1572:	e2 17       	cp	r30, r18
    1574:	f3 07       	cpc	r31, r19
    1576:	a0 f4       	brcc	.+40     	; 0x15a0 <malloc+0x124>
    1578:	2e 1b       	sub	r18, r30
    157a:	3f 0b       	sbc	r19, r31
    157c:	28 17       	cp	r18, r24
    157e:	39 07       	cpc	r19, r25
    1580:	78 f0       	brcs	.+30     	; 0x15a0 <malloc+0x124>
    1582:	ac 01       	movw	r20, r24
    1584:	4e 5f       	subi	r20, 0xFE	; 254
    1586:	5f 4f       	sbci	r21, 0xFF	; 255
    1588:	24 17       	cp	r18, r20
    158a:	35 07       	cpc	r19, r21
    158c:	48 f0       	brcs	.+18     	; 0x15a0 <malloc+0x124>
    158e:	4e 0f       	add	r20, r30
    1590:	5f 1f       	adc	r21, r31
    1592:	50 93 56 02 	sts	0x0256, r21
    1596:	40 93 55 02 	sts	0x0255, r20
    159a:	81 93       	st	Z+, r24
    159c:	91 93       	st	Z+, r25
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <malloc+0x128>
    15a0:	e0 e0       	ldi	r30, 0x00	; 0
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	cf 01       	movw	r24, r30
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <free>:
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <free+0xa>
    15b4:	87 c0       	rjmp	.+270    	; 0x16c4 <free+0x118>
    15b6:	fc 01       	movw	r30, r24
    15b8:	32 97       	sbiw	r30, 0x02	; 2
    15ba:	13 82       	std	Z+3, r1	; 0x03
    15bc:	12 82       	std	Z+2, r1	; 0x02
    15be:	c0 91 57 02 	lds	r28, 0x0257
    15c2:	d0 91 58 02 	lds	r29, 0x0258
    15c6:	20 97       	sbiw	r28, 0x00	; 0
    15c8:	81 f4       	brne	.+32     	; 0x15ea <free+0x3e>
    15ca:	20 81       	ld	r18, Z
    15cc:	31 81       	ldd	r19, Z+1	; 0x01
    15ce:	28 0f       	add	r18, r24
    15d0:	39 1f       	adc	r19, r25
    15d2:	80 91 55 02 	lds	r24, 0x0255
    15d6:	90 91 56 02 	lds	r25, 0x0256
    15da:	82 17       	cp	r24, r18
    15dc:	93 07       	cpc	r25, r19
    15de:	79 f5       	brne	.+94     	; 0x163e <free+0x92>
    15e0:	f0 93 56 02 	sts	0x0256, r31
    15e4:	e0 93 55 02 	sts	0x0255, r30
    15e8:	6d c0       	rjmp	.+218    	; 0x16c4 <free+0x118>
    15ea:	de 01       	movw	r26, r28
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	ae 17       	cp	r26, r30
    15f2:	bf 07       	cpc	r27, r31
    15f4:	50 f4       	brcc	.+20     	; 0x160a <free+0x5e>
    15f6:	12 96       	adiw	r26, 0x02	; 2
    15f8:	4d 91       	ld	r20, X+
    15fa:	5c 91       	ld	r21, X
    15fc:	13 97       	sbiw	r26, 0x03	; 3
    15fe:	9d 01       	movw	r18, r26
    1600:	41 15       	cp	r20, r1
    1602:	51 05       	cpc	r21, r1
    1604:	09 f1       	breq	.+66     	; 0x1648 <free+0x9c>
    1606:	da 01       	movw	r26, r20
    1608:	f3 cf       	rjmp	.-26     	; 0x15f0 <free+0x44>
    160a:	b3 83       	std	Z+3, r27	; 0x03
    160c:	a2 83       	std	Z+2, r26	; 0x02
    160e:	40 81       	ld	r20, Z
    1610:	51 81       	ldd	r21, Z+1	; 0x01
    1612:	84 0f       	add	r24, r20
    1614:	95 1f       	adc	r25, r21
    1616:	8a 17       	cp	r24, r26
    1618:	9b 07       	cpc	r25, r27
    161a:	71 f4       	brne	.+28     	; 0x1638 <free+0x8c>
    161c:	8d 91       	ld	r24, X+
    161e:	9c 91       	ld	r25, X
    1620:	11 97       	sbiw	r26, 0x01	; 1
    1622:	84 0f       	add	r24, r20
    1624:	95 1f       	adc	r25, r21
    1626:	02 96       	adiw	r24, 0x02	; 2
    1628:	91 83       	std	Z+1, r25	; 0x01
    162a:	80 83       	st	Z, r24
    162c:	12 96       	adiw	r26, 0x02	; 2
    162e:	8d 91       	ld	r24, X+
    1630:	9c 91       	ld	r25, X
    1632:	13 97       	sbiw	r26, 0x03	; 3
    1634:	93 83       	std	Z+3, r25	; 0x03
    1636:	82 83       	std	Z+2, r24	; 0x02
    1638:	21 15       	cp	r18, r1
    163a:	31 05       	cpc	r19, r1
    163c:	29 f4       	brne	.+10     	; 0x1648 <free+0x9c>
    163e:	f0 93 58 02 	sts	0x0258, r31
    1642:	e0 93 57 02 	sts	0x0257, r30
    1646:	3e c0       	rjmp	.+124    	; 0x16c4 <free+0x118>
    1648:	d9 01       	movw	r26, r18
    164a:	13 96       	adiw	r26, 0x03	; 3
    164c:	fc 93       	st	X, r31
    164e:	ee 93       	st	-X, r30
    1650:	12 97       	sbiw	r26, 0x02	; 2
    1652:	4d 91       	ld	r20, X+
    1654:	5d 91       	ld	r21, X+
    1656:	a4 0f       	add	r26, r20
    1658:	b5 1f       	adc	r27, r21
    165a:	ea 17       	cp	r30, r26
    165c:	fb 07       	cpc	r31, r27
    165e:	79 f4       	brne	.+30     	; 0x167e <free+0xd2>
    1660:	80 81       	ld	r24, Z
    1662:	91 81       	ldd	r25, Z+1	; 0x01
    1664:	84 0f       	add	r24, r20
    1666:	95 1f       	adc	r25, r21
    1668:	02 96       	adiw	r24, 0x02	; 2
    166a:	d9 01       	movw	r26, r18
    166c:	11 96       	adiw	r26, 0x01	; 1
    166e:	9c 93       	st	X, r25
    1670:	8e 93       	st	-X, r24
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	13 96       	adiw	r26, 0x03	; 3
    1678:	9c 93       	st	X, r25
    167a:	8e 93       	st	-X, r24
    167c:	12 97       	sbiw	r26, 0x02	; 2
    167e:	e0 e0       	ldi	r30, 0x00	; 0
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	9b 81       	ldd	r25, Y+3	; 0x03
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	19 f0       	breq	.+6      	; 0x1690 <free+0xe4>
    168a:	fe 01       	movw	r30, r28
    168c:	ec 01       	movw	r28, r24
    168e:	f9 cf       	rjmp	.-14     	; 0x1682 <free+0xd6>
    1690:	ce 01       	movw	r24, r28
    1692:	02 96       	adiw	r24, 0x02	; 2
    1694:	28 81       	ld	r18, Y
    1696:	39 81       	ldd	r19, Y+1	; 0x01
    1698:	82 0f       	add	r24, r18
    169a:	93 1f       	adc	r25, r19
    169c:	20 91 55 02 	lds	r18, 0x0255
    16a0:	30 91 56 02 	lds	r19, 0x0256
    16a4:	28 17       	cp	r18, r24
    16a6:	39 07       	cpc	r19, r25
    16a8:	69 f4       	brne	.+26     	; 0x16c4 <free+0x118>
    16aa:	30 97       	sbiw	r30, 0x00	; 0
    16ac:	29 f4       	brne	.+10     	; 0x16b8 <free+0x10c>
    16ae:	10 92 58 02 	sts	0x0258, r1
    16b2:	10 92 57 02 	sts	0x0257, r1
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <free+0x110>
    16b8:	13 82       	std	Z+3, r1	; 0x03
    16ba:	12 82       	std	Z+2, r1	; 0x02
    16bc:	d0 93 56 02 	sts	0x0256, r29
    16c0:	c0 93 55 02 	sts	0x0255, r28
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	08 95       	ret

000016ca <strnlen_P>:
    16ca:	fc 01       	movw	r30, r24
    16cc:	05 90       	lpm	r0, Z+
    16ce:	61 50       	subi	r22, 0x01	; 1
    16d0:	70 40       	sbci	r23, 0x00	; 0
    16d2:	01 10       	cpse	r0, r1
    16d4:	d8 f7       	brcc	.-10     	; 0x16cc <strnlen_P+0x2>
    16d6:	80 95       	com	r24
    16d8:	90 95       	com	r25
    16da:	8e 0f       	add	r24, r30
    16dc:	9f 1f       	adc	r25, r31
    16de:	08 95       	ret

000016e0 <memset>:
    16e0:	dc 01       	movw	r26, r24
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <memset+0x6>
    16e4:	6d 93       	st	X+, r22
    16e6:	41 50       	subi	r20, 0x01	; 1
    16e8:	50 40       	sbci	r21, 0x00	; 0
    16ea:	e0 f7       	brcc	.-8      	; 0x16e4 <memset+0x4>
    16ec:	08 95       	ret

000016ee <strnlen>:
    16ee:	fc 01       	movw	r30, r24
    16f0:	61 50       	subi	r22, 0x01	; 1
    16f2:	70 40       	sbci	r23, 0x00	; 0
    16f4:	01 90       	ld	r0, Z+
    16f6:	01 10       	cpse	r0, r1
    16f8:	d8 f7       	brcc	.-10     	; 0x16f0 <strnlen+0x2>
    16fa:	80 95       	com	r24
    16fc:	90 95       	com	r25
    16fe:	8e 0f       	add	r24, r30
    1700:	9f 1f       	adc	r25, r31
    1702:	08 95       	ret

00001704 <fputc>:
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	18 2f       	mov	r17, r24
    170e:	09 2f       	mov	r16, r25
    1710:	eb 01       	movw	r28, r22
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	81 fd       	sbrc	r24, 1
    1716:	03 c0       	rjmp	.+6      	; 0x171e <fputc+0x1a>
    1718:	8f ef       	ldi	r24, 0xFF	; 255
    171a:	9f ef       	ldi	r25, 0xFF	; 255
    171c:	20 c0       	rjmp	.+64     	; 0x175e <fputc+0x5a>
    171e:	82 ff       	sbrs	r24, 2
    1720:	10 c0       	rjmp	.+32     	; 0x1742 <fputc+0x3e>
    1722:	4e 81       	ldd	r20, Y+6	; 0x06
    1724:	5f 81       	ldd	r21, Y+7	; 0x07
    1726:	2c 81       	ldd	r18, Y+4	; 0x04
    1728:	3d 81       	ldd	r19, Y+5	; 0x05
    172a:	42 17       	cp	r20, r18
    172c:	53 07       	cpc	r21, r19
    172e:	7c f4       	brge	.+30     	; 0x174e <fputc+0x4a>
    1730:	e8 81       	ld	r30, Y
    1732:	f9 81       	ldd	r31, Y+1	; 0x01
    1734:	9f 01       	movw	r18, r30
    1736:	2f 5f       	subi	r18, 0xFF	; 255
    1738:	3f 4f       	sbci	r19, 0xFF	; 255
    173a:	39 83       	std	Y+1, r19	; 0x01
    173c:	28 83       	st	Y, r18
    173e:	10 83       	st	Z, r17
    1740:	06 c0       	rjmp	.+12     	; 0x174e <fputc+0x4a>
    1742:	e8 85       	ldd	r30, Y+8	; 0x08
    1744:	f9 85       	ldd	r31, Y+9	; 0x09
    1746:	81 2f       	mov	r24, r17
    1748:	09 95       	icall
    174a:	89 2b       	or	r24, r25
    174c:	29 f7       	brne	.-54     	; 0x1718 <fputc+0x14>
    174e:	2e 81       	ldd	r18, Y+6	; 0x06
    1750:	3f 81       	ldd	r19, Y+7	; 0x07
    1752:	2f 5f       	subi	r18, 0xFF	; 255
    1754:	3f 4f       	sbci	r19, 0xFF	; 255
    1756:	3f 83       	std	Y+7, r19	; 0x07
    1758:	2e 83       	std	Y+6, r18	; 0x06
    175a:	81 2f       	mov	r24, r17
    175c:	90 2f       	mov	r25, r16
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	08 95       	ret

00001768 <__ultoa_invert>:
    1768:	fa 01       	movw	r30, r20
    176a:	aa 27       	eor	r26, r26
    176c:	28 30       	cpi	r18, 0x08	; 8
    176e:	51 f1       	breq	.+84     	; 0x17c4 <__ultoa_invert+0x5c>
    1770:	20 31       	cpi	r18, 0x10	; 16
    1772:	81 f1       	breq	.+96     	; 0x17d4 <__ultoa_invert+0x6c>
    1774:	e8 94       	clt
    1776:	6f 93       	push	r22
    1778:	6e 7f       	andi	r22, 0xFE	; 254
    177a:	6e 5f       	subi	r22, 0xFE	; 254
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
    177e:	8f 4f       	sbci	r24, 0xFF	; 255
    1780:	9f 4f       	sbci	r25, 0xFF	; 255
    1782:	af 4f       	sbci	r26, 0xFF	; 255
    1784:	b1 e0       	ldi	r27, 0x01	; 1
    1786:	3e d0       	rcall	.+124    	; 0x1804 <__ultoa_invert+0x9c>
    1788:	b4 e0       	ldi	r27, 0x04	; 4
    178a:	3c d0       	rcall	.+120    	; 0x1804 <__ultoa_invert+0x9c>
    178c:	67 0f       	add	r22, r23
    178e:	78 1f       	adc	r23, r24
    1790:	89 1f       	adc	r24, r25
    1792:	9a 1f       	adc	r25, r26
    1794:	a1 1d       	adc	r26, r1
    1796:	68 0f       	add	r22, r24
    1798:	79 1f       	adc	r23, r25
    179a:	8a 1f       	adc	r24, r26
    179c:	91 1d       	adc	r25, r1
    179e:	a1 1d       	adc	r26, r1
    17a0:	6a 0f       	add	r22, r26
    17a2:	71 1d       	adc	r23, r1
    17a4:	81 1d       	adc	r24, r1
    17a6:	91 1d       	adc	r25, r1
    17a8:	a1 1d       	adc	r26, r1
    17aa:	20 d0       	rcall	.+64     	; 0x17ec <__ultoa_invert+0x84>
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <__ultoa_invert+0x48>
    17ae:	68 94       	set
    17b0:	3f 91       	pop	r19
    17b2:	2a e0       	ldi	r18, 0x0A	; 10
    17b4:	26 9f       	mul	r18, r22
    17b6:	11 24       	eor	r1, r1
    17b8:	30 19       	sub	r19, r0
    17ba:	30 5d       	subi	r19, 0xD0	; 208
    17bc:	31 93       	st	Z+, r19
    17be:	de f6       	brtc	.-74     	; 0x1776 <__ultoa_invert+0xe>
    17c0:	cf 01       	movw	r24, r30
    17c2:	08 95       	ret
    17c4:	46 2f       	mov	r20, r22
    17c6:	47 70       	andi	r20, 0x07	; 7
    17c8:	40 5d       	subi	r20, 0xD0	; 208
    17ca:	41 93       	st	Z+, r20
    17cc:	b3 e0       	ldi	r27, 0x03	; 3
    17ce:	0f d0       	rcall	.+30     	; 0x17ee <__ultoa_invert+0x86>
    17d0:	c9 f7       	brne	.-14     	; 0x17c4 <__ultoa_invert+0x5c>
    17d2:	f6 cf       	rjmp	.-20     	; 0x17c0 <__ultoa_invert+0x58>
    17d4:	46 2f       	mov	r20, r22
    17d6:	4f 70       	andi	r20, 0x0F	; 15
    17d8:	40 5d       	subi	r20, 0xD0	; 208
    17da:	4a 33       	cpi	r20, 0x3A	; 58
    17dc:	18 f0       	brcs	.+6      	; 0x17e4 <__ultoa_invert+0x7c>
    17de:	49 5d       	subi	r20, 0xD9	; 217
    17e0:	31 fd       	sbrc	r19, 1
    17e2:	40 52       	subi	r20, 0x20	; 32
    17e4:	41 93       	st	Z+, r20
    17e6:	02 d0       	rcall	.+4      	; 0x17ec <__ultoa_invert+0x84>
    17e8:	a9 f7       	brne	.-22     	; 0x17d4 <__ultoa_invert+0x6c>
    17ea:	ea cf       	rjmp	.-44     	; 0x17c0 <__ultoa_invert+0x58>
    17ec:	b4 e0       	ldi	r27, 0x04	; 4
    17ee:	a6 95       	lsr	r26
    17f0:	97 95       	ror	r25
    17f2:	87 95       	ror	r24
    17f4:	77 95       	ror	r23
    17f6:	67 95       	ror	r22
    17f8:	ba 95       	dec	r27
    17fa:	c9 f7       	brne	.-14     	; 0x17ee <__ultoa_invert+0x86>
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	61 05       	cpc	r22, r1
    1800:	71 05       	cpc	r23, r1
    1802:	08 95       	ret
    1804:	9b 01       	movw	r18, r22
    1806:	ac 01       	movw	r20, r24
    1808:	0a 2e       	mov	r0, r26
    180a:	06 94       	lsr	r0
    180c:	57 95       	ror	r21
    180e:	47 95       	ror	r20
    1810:	37 95       	ror	r19
    1812:	27 95       	ror	r18
    1814:	ba 95       	dec	r27
    1816:	c9 f7       	brne	.-14     	; 0x180a <__ultoa_invert+0xa2>
    1818:	62 0f       	add	r22, r18
    181a:	73 1f       	adc	r23, r19
    181c:	84 1f       	adc	r24, r20
    181e:	95 1f       	adc	r25, r21
    1820:	a0 1d       	adc	r26, r0
    1822:	08 95       	ret

00001824 <__prologue_saves__>:
    1824:	2f 92       	push	r2
    1826:	3f 92       	push	r3
    1828:	4f 92       	push	r4
    182a:	5f 92       	push	r5
    182c:	6f 92       	push	r6
    182e:	7f 92       	push	r7
    1830:	8f 92       	push	r8
    1832:	9f 92       	push	r9
    1834:	af 92       	push	r10
    1836:	bf 92       	push	r11
    1838:	cf 92       	push	r12
    183a:	df 92       	push	r13
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	ca 1b       	sub	r28, r26
    184e:	db 0b       	sbc	r29, r27
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	09 94       	ijmp

0000185c <__epilogue_restores__>:
    185c:	2a 88       	ldd	r2, Y+18	; 0x12
    185e:	39 88       	ldd	r3, Y+17	; 0x11
    1860:	48 88       	ldd	r4, Y+16	; 0x10
    1862:	5f 84       	ldd	r5, Y+15	; 0x0f
    1864:	6e 84       	ldd	r6, Y+14	; 0x0e
    1866:	7d 84       	ldd	r7, Y+13	; 0x0d
    1868:	8c 84       	ldd	r8, Y+12	; 0x0c
    186a:	9b 84       	ldd	r9, Y+11	; 0x0b
    186c:	aa 84       	ldd	r10, Y+10	; 0x0a
    186e:	b9 84       	ldd	r11, Y+9	; 0x09
    1870:	c8 84       	ldd	r12, Y+8	; 0x08
    1872:	df 80       	ldd	r13, Y+7	; 0x07
    1874:	ee 80       	ldd	r14, Y+6	; 0x06
    1876:	fd 80       	ldd	r15, Y+5	; 0x05
    1878:	0c 81       	ldd	r16, Y+4	; 0x04
    187a:	1b 81       	ldd	r17, Y+3	; 0x03
    187c:	aa 81       	ldd	r26, Y+2	; 0x02
    187e:	b9 81       	ldd	r27, Y+1	; 0x01
    1880:	ce 0f       	add	r28, r30
    1882:	d1 1d       	adc	r29, r1
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	ed 01       	movw	r28, r26
    1890:	08 95       	ret

00001892 <_exit>:
    1892:	f8 94       	cli

00001894 <__stop_program>:
    1894:	ff cf       	rjmp	.-2      	; 0x1894 <__stop_program>
