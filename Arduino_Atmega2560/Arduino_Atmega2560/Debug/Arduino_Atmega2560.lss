
Arduino_Atmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  0000073e  000007d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080020a  0080020a  000007dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c8d  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064c  00000000  00000000  000015e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007a0  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  000023d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004a3  00000000  00000000  00002a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00002eac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e3       	ldi	r30, 0x3E	; 62
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e0       	ldi	r26, 0x0A	; 10
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 31       	cpi	r26, 0x14	; 20
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	0c c3       	rjmp	.+1560   	; 0x73a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#define MYUBRR FOSC/16/BAUD-1


int main(void)
{
	UART_Init(MYUBRR);		
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	34 d1       	rcall	.+616    	; 0x392 <UART_Init>
	printf("hei\n");
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	92 e0       	ldi	r25, 0x02	; 2
 12e:	90 d1       	rcall	.+800    	; 0x450 <puts>
	CAN_test();
 130:	84 d0       	rcall	.+264    	; 0x23a <CAN_test>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	08 95       	ret

00000138 <CAN_init>:
#include <avr/io.h>



void CAN_init(){
	MCP2515_init();
 138:	00 d1       	rcall	.+512    	; 0x33a <MCP2515_init>
	bit_modify_MCP2515(MCP_CANCTRL,0xE0,MODE_NORMAL);//Enables normal mode
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	60 ee       	ldi	r22, 0xE0	; 224
 13e:	8f e0       	ldi	r24, 0x0F	; 15
 140:	e3 d0       	rcall	.+454    	; 0x308 <bit_modify_MCP2515>
	bit_modify_MCP2515(0x60, 0b01100000, 0xff);//set filters off
 142:	4f ef       	ldi	r20, 0xFF	; 255
 144:	60 e6       	ldi	r22, 0x60	; 96
 146:	80 e6       	ldi	r24, 0x60	; 96
 148:	df d0       	rcall	.+446    	; 0x308 <bit_modify_MCP2515>
	bit_modify_MCP2515( 0x60, 0b00000100, 0x00);//sett rollover off
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	64 e0       	ldi	r22, 0x04	; 4
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	db d0       	rcall	.+438    	; 0x308 <bit_modify_MCP2515>

	bit_modify_MCP2515(0x2b, 0b00000001, 0xff);//Set RX0 full enable
 152:	4f ef       	ldi	r20, 0xFF	; 255
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	8b e2       	ldi	r24, 0x2B	; 43
 158:	d7 c0       	rjmp	.+430    	; 0x308 <bit_modify_MCP2515>
 15a:	08 95       	ret

0000015c <send_CAN_message>:
	
}

void send_CAN_message(struct CAN_struct msg){
 15c:	8f 92       	push	r8
 15e:	9f 92       	push	r9
 160:	af 92       	push	r10
 162:	bf 92       	push	r11
 164:	cf 92       	push	r12
 166:	df 92       	push	r13
 168:	ef 92       	push	r14
 16a:	ff 92       	push	r15
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	62 97       	sbiw	r28, 0x12	; 18
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
 17e:	de bf       	out	0x3e, r29	; 62
 180:	0f be       	out	0x3f, r0	; 63
 182:	cd bf       	out	0x3d, r28	; 61
 184:	89 82       	std	Y+1, r8	; 0x01
 186:	9a 82       	std	Y+2, r9	; 0x02
 188:	ab 82       	std	Y+3, r10	; 0x03
 18a:	bc 82       	std	Y+4, r11	; 0x04
 18c:	cd 82       	std	Y+5, r12	; 0x05
 18e:	de 82       	std	Y+6, r13	; 0x06
 190:	ef 82       	std	Y+7, r14	; 0x07
 192:	f8 86       	std	Y+8, r15	; 0x08
 194:	09 87       	std	Y+9, r16	; 0x09
 196:	1a 87       	std	Y+10, r17	; 0x0a
 198:	2b 87       	std	Y+11, r18	; 0x0b
 19a:	3c 87       	std	Y+12, r19	; 0x0c
 19c:	4d 87       	std	Y+13, r20	; 0x0d
 19e:	5e 87       	std	Y+14, r21	; 0x0e
 1a0:	6f 87       	std	Y+15, r22	; 0x0f
 1a2:	78 8b       	std	Y+16, r23	; 0x10
 1a4:	89 8b       	std	Y+17, r24	; 0x11
 1a6:	9a 8b       	std	Y+18, r25	; 0x12

	//MCP_TXB0CTRL &= ~(1<<TXREQ);
	bit_modify_MCP2515(MCP_TXB0CTRL,TXREQ,4);//Choosing to write to buffer 0
 1a8:	44 e0       	ldi	r20, 0x04	; 4
 1aa:	63 e0       	ldi	r22, 0x03	; 3
 1ac:	80 e3       	ldi	r24, 0x30	; 48
 1ae:	ac d0       	rcall	.+344    	; 0x308 <bit_modify_MCP2515>
	
	//load SIDL
	write_MCP2515(MCP_TXB0_SIDL, msg.ID << 5);
 1b0:	69 81       	ldd	r22, Y+1	; 0x01
 1b2:	62 95       	swap	r22
 1b4:	66 0f       	add	r22, r22
 1b6:	60 7e       	andi	r22, 0xE0	; 224
 1b8:	82 e3       	ldi	r24, 0x32	; 50
 1ba:	8d d0       	rcall	.+282    	; 0x2d6 <write_MCP2515>
	
	//load SIDH
	write_MCP2515(MCP_TXB0_SIDH, msg.ID >> 3);
 1bc:	69 81       	ldd	r22, Y+1	; 0x01
 1be:	66 95       	lsr	r22
 1c0:	66 95       	lsr	r22
 1c2:	66 95       	lsr	r22
 1c4:	81 e3       	ldi	r24, 0x31	; 49
 1c6:	87 d0       	rcall	.+270    	; 0x2d6 <write_MCP2515>

	
	//load DLC
	//bit_modify_MCP2515(MCP_TXB0_DLC, 0x0F,(char)msg.length);//setting datalength
	
	write_MCP2515(MCP_TXB0_DLC,(char)msg.length);
 1c8:	6a 81       	ldd	r22, Y+2	; 0x02
 1ca:	85 e3       	ldi	r24, 0x35	; 53
 1cc:	84 d0       	rcall	.+264    	; 0x2d6 <write_MCP2515>
	//printf(" : %c\n",l);
	
	//if data--> TXBnDm load
	write_MCP2515(MCP_TXB0_D0,(char)msg.data);
 1ce:	be 01       	movw	r22, r28
 1d0:	6d 5f       	subi	r22, 0xFD	; 253
 1d2:	7f 4f       	sbci	r23, 0xFF	; 255
 1d4:	86 e3       	ldi	r24, 0x36	; 54
 1d6:	7f d0       	rcall	.+254    	; 0x2d6 <write_MCP2515>
	
	/*PUTTING DATA IN DATABUFFER*/
	for (int i=0; i < msg.length; i++){
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	88 23       	and	r24, r24
 1dc:	a9 f0       	breq	.+42     	; 0x208 <send_CAN_message+0xac>
 1de:	7e 01       	movw	r14, r28
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	e8 0e       	add	r14, r24
 1e4:	f1 1c       	adc	r15, r1
 1e6:	00 e0       	ldi	r16, 0x00	; 0
 1e8:	10 e0       	ldi	r17, 0x00	; 0
		//printf(" I: %i\n",i);
		write_MCP2515(MCP_TXB0_D0+i,(char)msg.data[i]);
 1ea:	f7 01       	movw	r30, r14
 1ec:	60 81       	ld	r22, Z
 1ee:	f2 e0       	ldi	r31, 0x02	; 2
 1f0:	ef 0e       	add	r14, r31
 1f2:	f1 1c       	adc	r15, r1
 1f4:	86 e3       	ldi	r24, 0x36	; 54
 1f6:	80 0f       	add	r24, r16
 1f8:	6e d0       	rcall	.+220    	; 0x2d6 <write_MCP2515>
	
	//if data--> TXBnDm load
	write_MCP2515(MCP_TXB0_D0,(char)msg.data);
	
	/*PUTTING DATA IN DATABUFFER*/
	for (int i=0; i < msg.length; i++){
 1fa:	0f 5f       	subi	r16, 0xFF	; 255
 1fc:	1f 4f       	sbci	r17, 0xFF	; 255
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	08 17       	cp	r16, r24
 204:	19 07       	cpc	r17, r25
 206:	8c f3       	brlt	.-30     	; 0x1ea <send_CAN_message+0x8e>
		write_MCP2515(MCP_TXB0_D0+i,(char)msg.data[i]);
		
	}
	
	/*REQUEST TO SEND*/
	request_to_send_MCP2515(0x01);// Setting the TXBnCTRL for buffer 0.
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	74 d0       	rcall	.+232    	; 0x2f4 <request_to_send_MCP2515>
	
	/*CHECK IF TRANSMIT SUCCEEDS*/
	while (read_MCP2515(MCP_TXB0CTRL) & TXREQ){//will be cleared when finished
 20c:	80 e3       	ldi	r24, 0x30	; 48
 20e:	56 d0       	rcall	.+172    	; 0x2bc <read_MCP2515>
 210:	83 70       	andi	r24, 0x03	; 3
 212:	e1 f7       	brne	.-8      	; 0x20c <send_CAN_message+0xb0>
	}
	
	
	/*ABORT TRANSMISSION?*/
	
}
 214:	62 96       	adiw	r28, 0x12	; 18
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	bf 90       	pop	r11
 232:	af 90       	pop	r10
 234:	9f 90       	pop	r9
 236:	8f 90       	pop	r8
 238:	08 95       	ret

0000023a <CAN_test>:
#include "CAN_driver.h"
#include "SPI_driver.h"
#include "MCP2515_driver.h"
#include <stdio.h>
void CAN_test(){
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	62 97       	sbiw	r28, 0x12	; 18
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	de bf       	out	0x3e, r29	; 62
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	cd bf       	out	0x3d, r28	; 61
	CAN_init();
 24e:	74 df       	rcall	.-280    	; 0x138 <CAN_init>
	CAN_struct msg;
	msg.ID=3;
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	89 83       	std	Y+1, r24	; 0x01
	msg.length=8;
 254:	88 e0       	ldi	r24, 0x08	; 8
 256:	8a 83       	std	Y+2, r24	; 0x02
	msg.data[0]='K';
 258:	8b e4       	ldi	r24, 0x4B	; 75
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	9c 83       	std	Y+4, r25	; 0x04
 25e:	8b 83       	std	Y+3, r24	; 0x03
	msg.data[1]='A';
 260:	81 e4       	ldi	r24, 0x41	; 65
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	9e 83       	std	Y+6, r25	; 0x06
 266:	8d 83       	std	Y+5, r24	; 0x05
	msg.data[2]='R';
 268:	22 e5       	ldi	r18, 0x52	; 82
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	38 87       	std	Y+8, r19	; 0x08
 26e:	2f 83       	std	Y+7, r18	; 0x07
	msg.data[3]='L';
 270:	2c e4       	ldi	r18, 0x4C	; 76
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	3a 87       	std	Y+10, r19	; 0x0a
 276:	29 87       	std	Y+9, r18	; 0x09
	msg.data[4]='S';
 278:	23 e5       	ldi	r18, 0x53	; 83
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	3c 87       	std	Y+12, r19	; 0x0c
 27e:	2b 87       	std	Y+11, r18	; 0x0b
	msg.data[5]='T';
 280:	24 e5       	ldi	r18, 0x54	; 84
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	3e 87       	std	Y+14, r19	; 0x0e
 286:	2d 87       	std	Y+13, r18	; 0x0d
	msg.data[6]='A';
 288:	98 8b       	std	Y+16, r25	; 0x10
 28a:	8f 87       	std	Y+15, r24	; 0x0f
	msg.data[7]='D';
 28c:	84 e4       	ldi	r24, 0x44	; 68
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	9a 8b       	std	Y+18, r25	; 0x12
 292:	89 8b       	std	Y+17, r24	; 0x11
	//bit_modify_MCP2515(MCP_CANCTRL,0xE0,MODE_LOOPBACK);//Enables loop back mode
	
	while (1){
		send_CAN_message(msg);
 294:	89 80       	ldd	r8, Y+1	; 0x01
 296:	9a 80       	ldd	r9, Y+2	; 0x02
 298:	ab 80       	ldd	r10, Y+3	; 0x03
 29a:	bc 80       	ldd	r11, Y+4	; 0x04
 29c:	cd 80       	ldd	r12, Y+5	; 0x05
 29e:	de 80       	ldd	r13, Y+6	; 0x06
 2a0:	ef 80       	ldd	r14, Y+7	; 0x07
 2a2:	f8 84       	ldd	r15, Y+8	; 0x08
 2a4:	09 85       	ldd	r16, Y+9	; 0x09
 2a6:	1a 85       	ldd	r17, Y+10	; 0x0a
 2a8:	2b 85       	ldd	r18, Y+11	; 0x0b
 2aa:	3c 85       	ldd	r19, Y+12	; 0x0c
 2ac:	4d 85       	ldd	r20, Y+13	; 0x0d
 2ae:	5e 85       	ldd	r21, Y+14	; 0x0e
 2b0:	6f 85       	ldd	r22, Y+15	; 0x0f
 2b2:	78 89       	ldd	r23, Y+16	; 0x10
 2b4:	89 89       	ldd	r24, Y+17	; 0x11
 2b6:	9a 89       	ldd	r25, Y+18	; 0x12
 2b8:	51 df       	rcall	.-350    	; 0x15c <send_CAN_message>
 2ba:	ec cf       	rjmp	.-40     	; 0x294 <CAN_test+0x5a>

000002bc <read_MCP2515>:
	spi_chipselect_activate();
	/*if (out != repeat){
		return repeat;
	}*/
	return out;
}
 2bc:	cf 93       	push	r28
 2be:	c8 2f       	mov	r28, r24
 2c0:	56 d0       	rcall	.+172    	; 0x36e <spi_chipselect_deactivate>
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	46 d0       	rcall	.+140    	; 0x352 <send_master_SPI>
 2c6:	8c 2f       	mov	r24, r28
 2c8:	44 d0       	rcall	.+136    	; 0x352 <send_master_SPI>
 2ca:	48 d0       	rcall	.+144    	; 0x35c <read_master_SPI>
 2cc:	c8 2f       	mov	r28, r24
 2ce:	4d d0       	rcall	.+154    	; 0x36a <spi_chipselect_activate>
 2d0:	8c 2f       	mov	r24, r28
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <write_MCP2515>:
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	d8 2f       	mov	r29, r24
 2dc:	c6 2f       	mov	r28, r22
 2de:	47 d0       	rcall	.+142    	; 0x36e <spi_chipselect_deactivate>
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	37 d0       	rcall	.+110    	; 0x352 <send_master_SPI>
 2e4:	8d 2f       	mov	r24, r29
 2e6:	35 d0       	rcall	.+106    	; 0x352 <send_master_SPI>
 2e8:	8c 2f       	mov	r24, r28
 2ea:	33 d0       	rcall	.+102    	; 0x352 <send_master_SPI>
 2ec:	3e d0       	rcall	.+124    	; 0x36a <spi_chipselect_activate>
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <request_to_send_MCP2515>:
 2f4:	cf 93       	push	r28
 2f6:	c8 2f       	mov	r28, r24
 2f8:	3a d0       	rcall	.+116    	; 0x36e <spi_chipselect_deactivate>
 2fa:	8c 2f       	mov	r24, r28
 2fc:	87 70       	andi	r24, 0x07	; 7
 2fe:	80 58       	subi	r24, 0x80	; 128
 300:	28 d0       	rcall	.+80     	; 0x352 <send_master_SPI>
 302:	33 d0       	rcall	.+102    	; 0x36a <spi_chipselect_activate>
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <bit_modify_MCP2515>:

void bit_modify_MCP2515(char address, char mask_byte, char data){
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	18 2f       	mov	r17, r24
 310:	d6 2f       	mov	r29, r22
 312:	c4 2f       	mov	r28, r20
	spi_chipselect_deactivate();
 314:	2c d0       	rcall	.+88     	; 0x36e <spi_chipselect_deactivate>
	send_master_SPI(0x05);	//'bit modify' instruction.
 316:	85 e0       	ldi	r24, 0x05	; 5
 318:	1c d0       	rcall	.+56     	; 0x352 <send_master_SPI>
	send_master_SPI(address);
 31a:	81 2f       	mov	r24, r17
 31c:	1a d0       	rcall	.+52     	; 0x352 <send_master_SPI>
	send_master_SPI(mask_byte);
 31e:	8d 2f       	mov	r24, r29
 320:	18 d0       	rcall	.+48     	; 0x352 <send_master_SPI>
	send_master_SPI(data);
 322:	8c 2f       	mov	r24, r28
 324:	16 d0       	rcall	.+44     	; 0x352 <send_master_SPI>
	spi_chipselect_activate();
 326:	21 d0       	rcall	.+66     	; 0x36a <spi_chipselect_activate>
}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	08 95       	ret

00000330 <reset_MCP2515>:

void reset_MCP2515(){
	spi_chipselect_deactivate();
 330:	1e d0       	rcall	.+60     	; 0x36e <spi_chipselect_deactivate>
	send_master_SPI(0xC0);	//'reset' instruction.
 332:	80 ec       	ldi	r24, 0xC0	; 192
 334:	0e d0       	rcall	.+28     	; 0x352 <send_master_SPI>
	spi_chipselect_activate();
 336:	19 c0       	rjmp	.+50     	; 0x36a <spi_chipselect_activate>
 338:	08 95       	ret

0000033a <MCP2515_init>:
#include "MCP2515.h"



void MCP2515_init(){
	reset_MCP2515();
 33a:	fa df       	rcall	.-12     	; 0x330 <reset_MCP2515>
	SPI_master_init();	
 33c:	01 c0       	rjmp	.+2      	; 0x340 <SPI_master_init>
 33e:	08 95       	ret

00000340 <SPI_master_init>:
}

void SPI_slave_init(){
	DDRB |= (1<<MISO);	//Set as output.
	DDRB &= ~((1<<MOSI)|(1<<SCK)|(1<<SSn)); //Set as input.
	SPCR = (1<<SPE);	//Enable SPI.
 340:	84 b1       	in	r24, 0x04	; 4
 342:	87 60       	ori	r24, 0x07	; 7
 344:	84 b9       	out	0x04, r24	; 4
 346:	23 98       	cbi	0x04, 3	; 4
 348:	2b 9a       	sbi	0x05, 3	; 5
 34a:	8c b5       	in	r24, 0x2c	; 44
 34c:	81 65       	ori	r24, 0x51	; 81
 34e:	8c bd       	out	0x2c, r24	; 44
 350:	08 95       	ret

00000352 <send_master_SPI>:
}

void send_master_SPI(char data){
	
	SPDR = data;			//Send data.
 352:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF))) {}		//Wait for transmission complete.
 354:	0d b4       	in	r0, 0x2d	; 45
 356:	07 fe       	sbrs	r0, 7
 358:	fd cf       	rjmp	.-6      	; 0x354 <send_master_SPI+0x2>
	
}
 35a:	08 95       	ret

0000035c <read_master_SPI>:

char read_master_SPI(){
	
	
	send_master_SPI(0xFF);		//Send dummy byte.		
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	f9 df       	rcall	.-14     	; 0x352 <send_master_SPI>
	while (!(SPSR & (1<<SPIF))) {}		//Wait for transmission complete.
 360:	0d b4       	in	r0, 0x2d	; 45
 362:	07 fe       	sbrs	r0, 7
 364:	fd cf       	rjmp	.-6      	; 0x360 <read_master_SPI+0x4>
	return SPDR;
 366:	8e b5       	in	r24, 0x2e	; 46
}
 368:	08 95       	ret

0000036a <spi_chipselect_activate>:

void spi_chipselect_activate(){
	PORTB |=(1<<SSn);
 36a:	28 9a       	sbi	0x05, 0	; 5
 36c:	08 95       	ret

0000036e <spi_chipselect_deactivate>:
}

void spi_chipselect_deactivate(){
	PORTB &=~(1<<SSn);
 36e:	28 98       	cbi	0x05, 0	; 5
 370:	08 95       	ret

00000372 <UART_Transmit>:
	}
	
void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer*/
		while( !( UCSR0A & (1<<UDRE0)) )
 372:	e0 ec       	ldi	r30, 0xC0	; 192
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	90 81       	ld	r25, Z
 378:	95 ff       	sbrs	r25, 5
 37a:	fd cf       	rjmp	.-6      	; 0x376 <UART_Transmit+0x4>
		;
	/* Put data into buffer, sends the data*/
		UDR0 = data;
 37c:	80 93 c6 00 	sts	0x00C6, r24
 380:	08 95       	ret

00000382 <UART_Receive>:
}

unsigned char UART_Receive(void)
	{
		/* Wait for data to be received*/
		while( !(UCSR0A & (1<<RXC0)) )
 382:	e0 ec       	ldi	r30, 0xC0	; 192
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	88 23       	and	r24, r24
 38a:	ec f7       	brge	.-6      	; 0x386 <UART_Receive+0x4>
			;
		/* Get and return received data from buffer*/
		return UDR0;
 38c:	80 91 c6 00 	lds	r24, 0x00C6
 390:	08 95       	ret

00000392 <UART_Init>:
		Set frame format: 8data, 2stop bit
		*/
		//UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
		//fdevopen(&UART_Transmit, &UART_Receive);
		
		UBRR0H = (unsigned char)(ubrr>>8);
 392:	90 93 c5 00 	sts	0x00C5, r25
		UBRR0L = (unsigned char)ubrr;
 396:	80 93 c4 00 	sts	0x00C4, r24
		/* Setting the XCKn port pin as output, enables master mode. */
		DDRJ |= (1<<XCK3);
 39a:	e4 e0       	ldi	r30, 0x04	; 4
 39c:	f1 e0       	ldi	r31, 0x01	; 1
 39e:	80 81       	ld	r24, Z
 3a0:	84 60       	ori	r24, 0x04	; 4
 3a2:	80 83       	st	Z, r24
		/* Set MSPI mode of operation and SPI data mode 0. */
		UCSR0C = (1<<UMSEL01)|(1<<UMSEL00)|(0<<UCPHA0)|(0<<UCPOL0);
 3a4:	80 ec       	ldi	r24, 0xC0	; 192
 3a6:	80 93 c2 00 	sts	0x00C2, r24
		/* Enable receiver and transmitter. */
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 3aa:	88 e1       	ldi	r24, 0x18	; 24
 3ac:	80 93 c1 00 	sts	0x00C1, r24
		/* Set baud rate. */
		fdevopen(&UART_Transmit, &UART_Receive);
 3b0:	61 ec       	ldi	r22, 0xC1	; 193
 3b2:	71 e0       	ldi	r23, 0x01	; 1
 3b4:	89 eb       	ldi	r24, 0xB9	; 185
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <fdevopen>
 3ba:	08 95       	ret

000003bc <fdevopen>:
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	ec 01       	movw	r28, r24
 3c6:	8b 01       	movw	r16, r22
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	31 f4       	brne	.+12     	; 0x3d8 <fdevopen+0x1c>
 3cc:	61 15       	cp	r22, r1
 3ce:	71 05       	cpc	r23, r1
 3d0:	19 f4       	brne	.+6      	; 0x3d8 <fdevopen+0x1c>
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	37 c0       	rjmp	.+110    	; 0x446 <fdevopen+0x8a>
 3d8:	6e e0       	ldi	r22, 0x0E	; 14
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	64 d0       	rcall	.+200    	; 0x4aa <calloc>
 3e2:	fc 01       	movw	r30, r24
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	a9 f3       	breq	.-22     	; 0x3d2 <fdevopen+0x16>
 3e8:	80 e8       	ldi	r24, 0x80	; 128
 3ea:	83 83       	std	Z+3, r24	; 0x03
 3ec:	01 15       	cp	r16, r1
 3ee:	11 05       	cpc	r17, r1
 3f0:	71 f0       	breq	.+28     	; 0x40e <fdevopen+0x52>
 3f2:	13 87       	std	Z+11, r17	; 0x0b
 3f4:	02 87       	std	Z+10, r16	; 0x0a
 3f6:	81 e8       	ldi	r24, 0x81	; 129
 3f8:	83 83       	std	Z+3, r24	; 0x03
 3fa:	80 91 0a 02 	lds	r24, 0x020A
 3fe:	90 91 0b 02 	lds	r25, 0x020B
 402:	89 2b       	or	r24, r25
 404:	21 f4       	brne	.+8      	; 0x40e <fdevopen+0x52>
 406:	f0 93 0b 02 	sts	0x020B, r31
 40a:	e0 93 0a 02 	sts	0x020A, r30
 40e:	20 97       	sbiw	r28, 0x00	; 0
 410:	c9 f0       	breq	.+50     	; 0x444 <fdevopen+0x88>
 412:	d1 87       	std	Z+9, r29	; 0x09
 414:	c0 87       	std	Z+8, r28	; 0x08
 416:	83 81       	ldd	r24, Z+3	; 0x03
 418:	82 60       	ori	r24, 0x02	; 2
 41a:	83 83       	std	Z+3, r24	; 0x03
 41c:	80 91 0c 02 	lds	r24, 0x020C
 420:	90 91 0d 02 	lds	r25, 0x020D
 424:	89 2b       	or	r24, r25
 426:	71 f4       	brne	.+28     	; 0x444 <fdevopen+0x88>
 428:	f0 93 0d 02 	sts	0x020D, r31
 42c:	e0 93 0c 02 	sts	0x020C, r30
 430:	80 91 0e 02 	lds	r24, 0x020E
 434:	90 91 0f 02 	lds	r25, 0x020F
 438:	89 2b       	or	r24, r25
 43a:	21 f4       	brne	.+8      	; 0x444 <fdevopen+0x88>
 43c:	f0 93 0f 02 	sts	0x020F, r31
 440:	e0 93 0e 02 	sts	0x020E, r30
 444:	cf 01       	movw	r24, r30
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	08 95       	ret

00000450 <puts>:
 450:	0f 93       	push	r16
 452:	1f 93       	push	r17
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	e0 91 0c 02 	lds	r30, 0x020C
 45c:	f0 91 0d 02 	lds	r31, 0x020D
 460:	23 81       	ldd	r18, Z+3	; 0x03
 462:	21 ff       	sbrs	r18, 1
 464:	1b c0       	rjmp	.+54     	; 0x49c <puts+0x4c>
 466:	ec 01       	movw	r28, r24
 468:	00 e0       	ldi	r16, 0x00	; 0
 46a:	10 e0       	ldi	r17, 0x00	; 0
 46c:	89 91       	ld	r24, Y+
 46e:	60 91 0c 02 	lds	r22, 0x020C
 472:	70 91 0d 02 	lds	r23, 0x020D
 476:	db 01       	movw	r26, r22
 478:	18 96       	adiw	r26, 0x08	; 8
 47a:	ed 91       	ld	r30, X+
 47c:	fc 91       	ld	r31, X
 47e:	19 97       	sbiw	r26, 0x09	; 9
 480:	88 23       	and	r24, r24
 482:	31 f0       	breq	.+12     	; 0x490 <puts+0x40>
 484:	19 95       	eicall
 486:	89 2b       	or	r24, r25
 488:	89 f3       	breq	.-30     	; 0x46c <puts+0x1c>
 48a:	0f ef       	ldi	r16, 0xFF	; 255
 48c:	1f ef       	ldi	r17, 0xFF	; 255
 48e:	ee cf       	rjmp	.-36     	; 0x46c <puts+0x1c>
 490:	8a e0       	ldi	r24, 0x0A	; 10
 492:	19 95       	eicall
 494:	89 2b       	or	r24, r25
 496:	11 f4       	brne	.+4      	; 0x49c <puts+0x4c>
 498:	c8 01       	movw	r24, r16
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <puts+0x50>
 49c:	8f ef       	ldi	r24, 0xFF	; 255
 49e:	9f ef       	ldi	r25, 0xFF	; 255
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	08 95       	ret

000004aa <calloc>:
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	86 9f       	mul	r24, r22
 4b4:	80 01       	movw	r16, r0
 4b6:	87 9f       	mul	r24, r23
 4b8:	10 0d       	add	r17, r0
 4ba:	96 9f       	mul	r25, r22
 4bc:	10 0d       	add	r17, r0
 4be:	11 24       	eor	r1, r1
 4c0:	c8 01       	movw	r24, r16
 4c2:	0d d0       	rcall	.+26     	; 0x4de <malloc>
 4c4:	ec 01       	movw	r28, r24
 4c6:	00 97       	sbiw	r24, 0x00	; 0
 4c8:	21 f0       	breq	.+8      	; 0x4d2 <calloc+0x28>
 4ca:	a8 01       	movw	r20, r16
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	2d d1       	rcall	.+602    	; 0x72c <memset>
 4d2:	ce 01       	movw	r24, r28
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	08 95       	ret

000004de <malloc>:
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	82 30       	cpi	r24, 0x02	; 2
 4e4:	91 05       	cpc	r25, r1
 4e6:	10 f4       	brcc	.+4      	; 0x4ec <malloc+0xe>
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	e0 91 12 02 	lds	r30, 0x0212
 4f0:	f0 91 13 02 	lds	r31, 0x0213
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	a0 e0       	ldi	r26, 0x00	; 0
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	30 97       	sbiw	r30, 0x00	; 0
 4fe:	39 f1       	breq	.+78     	; 0x54e <malloc+0x70>
 500:	40 81       	ld	r20, Z
 502:	51 81       	ldd	r21, Z+1	; 0x01
 504:	48 17       	cp	r20, r24
 506:	59 07       	cpc	r21, r25
 508:	b8 f0       	brcs	.+46     	; 0x538 <malloc+0x5a>
 50a:	48 17       	cp	r20, r24
 50c:	59 07       	cpc	r21, r25
 50e:	71 f4       	brne	.+28     	; 0x52c <malloc+0x4e>
 510:	82 81       	ldd	r24, Z+2	; 0x02
 512:	93 81       	ldd	r25, Z+3	; 0x03
 514:	10 97       	sbiw	r26, 0x00	; 0
 516:	29 f0       	breq	.+10     	; 0x522 <malloc+0x44>
 518:	13 96       	adiw	r26, 0x03	; 3
 51a:	9c 93       	st	X, r25
 51c:	8e 93       	st	-X, r24
 51e:	12 97       	sbiw	r26, 0x02	; 2
 520:	2c c0       	rjmp	.+88     	; 0x57a <malloc+0x9c>
 522:	90 93 13 02 	sts	0x0213, r25
 526:	80 93 12 02 	sts	0x0212, r24
 52a:	27 c0       	rjmp	.+78     	; 0x57a <malloc+0x9c>
 52c:	21 15       	cp	r18, r1
 52e:	31 05       	cpc	r19, r1
 530:	31 f0       	breq	.+12     	; 0x53e <malloc+0x60>
 532:	42 17       	cp	r20, r18
 534:	53 07       	cpc	r21, r19
 536:	18 f0       	brcs	.+6      	; 0x53e <malloc+0x60>
 538:	a9 01       	movw	r20, r18
 53a:	db 01       	movw	r26, r22
 53c:	01 c0       	rjmp	.+2      	; 0x540 <malloc+0x62>
 53e:	ef 01       	movw	r28, r30
 540:	9a 01       	movw	r18, r20
 542:	bd 01       	movw	r22, r26
 544:	df 01       	movw	r26, r30
 546:	02 80       	ldd	r0, Z+2	; 0x02
 548:	f3 81       	ldd	r31, Z+3	; 0x03
 54a:	e0 2d       	mov	r30, r0
 54c:	d7 cf       	rjmp	.-82     	; 0x4fc <malloc+0x1e>
 54e:	21 15       	cp	r18, r1
 550:	31 05       	cpc	r19, r1
 552:	f9 f0       	breq	.+62     	; 0x592 <malloc+0xb4>
 554:	28 1b       	sub	r18, r24
 556:	39 0b       	sbc	r19, r25
 558:	24 30       	cpi	r18, 0x04	; 4
 55a:	31 05       	cpc	r19, r1
 55c:	80 f4       	brcc	.+32     	; 0x57e <malloc+0xa0>
 55e:	8a 81       	ldd	r24, Y+2	; 0x02
 560:	9b 81       	ldd	r25, Y+3	; 0x03
 562:	61 15       	cp	r22, r1
 564:	71 05       	cpc	r23, r1
 566:	21 f0       	breq	.+8      	; 0x570 <malloc+0x92>
 568:	fb 01       	movw	r30, r22
 56a:	93 83       	std	Z+3, r25	; 0x03
 56c:	82 83       	std	Z+2, r24	; 0x02
 56e:	04 c0       	rjmp	.+8      	; 0x578 <malloc+0x9a>
 570:	90 93 13 02 	sts	0x0213, r25
 574:	80 93 12 02 	sts	0x0212, r24
 578:	fe 01       	movw	r30, r28
 57a:	32 96       	adiw	r30, 0x02	; 2
 57c:	44 c0       	rjmp	.+136    	; 0x606 <malloc+0x128>
 57e:	fe 01       	movw	r30, r28
 580:	e2 0f       	add	r30, r18
 582:	f3 1f       	adc	r31, r19
 584:	81 93       	st	Z+, r24
 586:	91 93       	st	Z+, r25
 588:	22 50       	subi	r18, 0x02	; 2
 58a:	31 09       	sbc	r19, r1
 58c:	39 83       	std	Y+1, r19	; 0x01
 58e:	28 83       	st	Y, r18
 590:	3a c0       	rjmp	.+116    	; 0x606 <malloc+0x128>
 592:	20 91 10 02 	lds	r18, 0x0210
 596:	30 91 11 02 	lds	r19, 0x0211
 59a:	23 2b       	or	r18, r19
 59c:	41 f4       	brne	.+16     	; 0x5ae <malloc+0xd0>
 59e:	20 91 02 02 	lds	r18, 0x0202
 5a2:	30 91 03 02 	lds	r19, 0x0203
 5a6:	30 93 11 02 	sts	0x0211, r19
 5aa:	20 93 10 02 	sts	0x0210, r18
 5ae:	20 91 00 02 	lds	r18, 0x0200
 5b2:	30 91 01 02 	lds	r19, 0x0201
 5b6:	21 15       	cp	r18, r1
 5b8:	31 05       	cpc	r19, r1
 5ba:	41 f4       	brne	.+16     	; 0x5cc <malloc+0xee>
 5bc:	2d b7       	in	r18, 0x3d	; 61
 5be:	3e b7       	in	r19, 0x3e	; 62
 5c0:	40 91 04 02 	lds	r20, 0x0204
 5c4:	50 91 05 02 	lds	r21, 0x0205
 5c8:	24 1b       	sub	r18, r20
 5ca:	35 0b       	sbc	r19, r21
 5cc:	e0 91 10 02 	lds	r30, 0x0210
 5d0:	f0 91 11 02 	lds	r31, 0x0211
 5d4:	e2 17       	cp	r30, r18
 5d6:	f3 07       	cpc	r31, r19
 5d8:	a0 f4       	brcc	.+40     	; 0x602 <malloc+0x124>
 5da:	2e 1b       	sub	r18, r30
 5dc:	3f 0b       	sbc	r19, r31
 5de:	28 17       	cp	r18, r24
 5e0:	39 07       	cpc	r19, r25
 5e2:	78 f0       	brcs	.+30     	; 0x602 <malloc+0x124>
 5e4:	ac 01       	movw	r20, r24
 5e6:	4e 5f       	subi	r20, 0xFE	; 254
 5e8:	5f 4f       	sbci	r21, 0xFF	; 255
 5ea:	24 17       	cp	r18, r20
 5ec:	35 07       	cpc	r19, r21
 5ee:	48 f0       	brcs	.+18     	; 0x602 <malloc+0x124>
 5f0:	4e 0f       	add	r20, r30
 5f2:	5f 1f       	adc	r21, r31
 5f4:	50 93 11 02 	sts	0x0211, r21
 5f8:	40 93 10 02 	sts	0x0210, r20
 5fc:	81 93       	st	Z+, r24
 5fe:	91 93       	st	Z+, r25
 600:	02 c0       	rjmp	.+4      	; 0x606 <malloc+0x128>
 602:	e0 e0       	ldi	r30, 0x00	; 0
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	cf 01       	movw	r24, r30
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <free>:
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	00 97       	sbiw	r24, 0x00	; 0
 614:	09 f4       	brne	.+2      	; 0x618 <free+0xa>
 616:	87 c0       	rjmp	.+270    	; 0x726 <free+0x118>
 618:	fc 01       	movw	r30, r24
 61a:	32 97       	sbiw	r30, 0x02	; 2
 61c:	13 82       	std	Z+3, r1	; 0x03
 61e:	12 82       	std	Z+2, r1	; 0x02
 620:	c0 91 12 02 	lds	r28, 0x0212
 624:	d0 91 13 02 	lds	r29, 0x0213
 628:	20 97       	sbiw	r28, 0x00	; 0
 62a:	81 f4       	brne	.+32     	; 0x64c <free+0x3e>
 62c:	20 81       	ld	r18, Z
 62e:	31 81       	ldd	r19, Z+1	; 0x01
 630:	28 0f       	add	r18, r24
 632:	39 1f       	adc	r19, r25
 634:	80 91 10 02 	lds	r24, 0x0210
 638:	90 91 11 02 	lds	r25, 0x0211
 63c:	82 17       	cp	r24, r18
 63e:	93 07       	cpc	r25, r19
 640:	79 f5       	brne	.+94     	; 0x6a0 <free+0x92>
 642:	f0 93 11 02 	sts	0x0211, r31
 646:	e0 93 10 02 	sts	0x0210, r30
 64a:	6d c0       	rjmp	.+218    	; 0x726 <free+0x118>
 64c:	de 01       	movw	r26, r28
 64e:	20 e0       	ldi	r18, 0x00	; 0
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	ae 17       	cp	r26, r30
 654:	bf 07       	cpc	r27, r31
 656:	50 f4       	brcc	.+20     	; 0x66c <free+0x5e>
 658:	12 96       	adiw	r26, 0x02	; 2
 65a:	4d 91       	ld	r20, X+
 65c:	5c 91       	ld	r21, X
 65e:	13 97       	sbiw	r26, 0x03	; 3
 660:	9d 01       	movw	r18, r26
 662:	41 15       	cp	r20, r1
 664:	51 05       	cpc	r21, r1
 666:	09 f1       	breq	.+66     	; 0x6aa <free+0x9c>
 668:	da 01       	movw	r26, r20
 66a:	f3 cf       	rjmp	.-26     	; 0x652 <free+0x44>
 66c:	b3 83       	std	Z+3, r27	; 0x03
 66e:	a2 83       	std	Z+2, r26	; 0x02
 670:	40 81       	ld	r20, Z
 672:	51 81       	ldd	r21, Z+1	; 0x01
 674:	84 0f       	add	r24, r20
 676:	95 1f       	adc	r25, r21
 678:	8a 17       	cp	r24, r26
 67a:	9b 07       	cpc	r25, r27
 67c:	71 f4       	brne	.+28     	; 0x69a <free+0x8c>
 67e:	8d 91       	ld	r24, X+
 680:	9c 91       	ld	r25, X
 682:	11 97       	sbiw	r26, 0x01	; 1
 684:	84 0f       	add	r24, r20
 686:	95 1f       	adc	r25, r21
 688:	02 96       	adiw	r24, 0x02	; 2
 68a:	91 83       	std	Z+1, r25	; 0x01
 68c:	80 83       	st	Z, r24
 68e:	12 96       	adiw	r26, 0x02	; 2
 690:	8d 91       	ld	r24, X+
 692:	9c 91       	ld	r25, X
 694:	13 97       	sbiw	r26, 0x03	; 3
 696:	93 83       	std	Z+3, r25	; 0x03
 698:	82 83       	std	Z+2, r24	; 0x02
 69a:	21 15       	cp	r18, r1
 69c:	31 05       	cpc	r19, r1
 69e:	29 f4       	brne	.+10     	; 0x6aa <free+0x9c>
 6a0:	f0 93 13 02 	sts	0x0213, r31
 6a4:	e0 93 12 02 	sts	0x0212, r30
 6a8:	3e c0       	rjmp	.+124    	; 0x726 <free+0x118>
 6aa:	d9 01       	movw	r26, r18
 6ac:	13 96       	adiw	r26, 0x03	; 3
 6ae:	fc 93       	st	X, r31
 6b0:	ee 93       	st	-X, r30
 6b2:	12 97       	sbiw	r26, 0x02	; 2
 6b4:	4d 91       	ld	r20, X+
 6b6:	5d 91       	ld	r21, X+
 6b8:	a4 0f       	add	r26, r20
 6ba:	b5 1f       	adc	r27, r21
 6bc:	ea 17       	cp	r30, r26
 6be:	fb 07       	cpc	r31, r27
 6c0:	79 f4       	brne	.+30     	; 0x6e0 <free+0xd2>
 6c2:	80 81       	ld	r24, Z
 6c4:	91 81       	ldd	r25, Z+1	; 0x01
 6c6:	84 0f       	add	r24, r20
 6c8:	95 1f       	adc	r25, r21
 6ca:	02 96       	adiw	r24, 0x02	; 2
 6cc:	d9 01       	movw	r26, r18
 6ce:	11 96       	adiw	r26, 0x01	; 1
 6d0:	9c 93       	st	X, r25
 6d2:	8e 93       	st	-X, r24
 6d4:	82 81       	ldd	r24, Z+2	; 0x02
 6d6:	93 81       	ldd	r25, Z+3	; 0x03
 6d8:	13 96       	adiw	r26, 0x03	; 3
 6da:	9c 93       	st	X, r25
 6dc:	8e 93       	st	-X, r24
 6de:	12 97       	sbiw	r26, 0x02	; 2
 6e0:	e0 e0       	ldi	r30, 0x00	; 0
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	8a 81       	ldd	r24, Y+2	; 0x02
 6e6:	9b 81       	ldd	r25, Y+3	; 0x03
 6e8:	00 97       	sbiw	r24, 0x00	; 0
 6ea:	19 f0       	breq	.+6      	; 0x6f2 <free+0xe4>
 6ec:	fe 01       	movw	r30, r28
 6ee:	ec 01       	movw	r28, r24
 6f0:	f9 cf       	rjmp	.-14     	; 0x6e4 <free+0xd6>
 6f2:	ce 01       	movw	r24, r28
 6f4:	02 96       	adiw	r24, 0x02	; 2
 6f6:	28 81       	ld	r18, Y
 6f8:	39 81       	ldd	r19, Y+1	; 0x01
 6fa:	82 0f       	add	r24, r18
 6fc:	93 1f       	adc	r25, r19
 6fe:	20 91 10 02 	lds	r18, 0x0210
 702:	30 91 11 02 	lds	r19, 0x0211
 706:	28 17       	cp	r18, r24
 708:	39 07       	cpc	r19, r25
 70a:	69 f4       	brne	.+26     	; 0x726 <free+0x118>
 70c:	30 97       	sbiw	r30, 0x00	; 0
 70e:	29 f4       	brne	.+10     	; 0x71a <free+0x10c>
 710:	10 92 13 02 	sts	0x0213, r1
 714:	10 92 12 02 	sts	0x0212, r1
 718:	02 c0       	rjmp	.+4      	; 0x71e <free+0x110>
 71a:	13 82       	std	Z+3, r1	; 0x03
 71c:	12 82       	std	Z+2, r1	; 0x02
 71e:	d0 93 11 02 	sts	0x0211, r29
 722:	c0 93 10 02 	sts	0x0210, r28
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	08 95       	ret

0000072c <memset>:
 72c:	dc 01       	movw	r26, r24
 72e:	01 c0       	rjmp	.+2      	; 0x732 <memset+0x6>
 730:	6d 93       	st	X+, r22
 732:	41 50       	subi	r20, 0x01	; 1
 734:	50 40       	sbci	r21, 0x00	; 0
 736:	e0 f7       	brcc	.-8      	; 0x730 <memset+0x4>
 738:	08 95       	ret

0000073a <_exit>:
 73a:	f8 94       	cli

0000073c <__stop_program>:
 73c:	ff cf       	rjmp	.-2      	; 0x73c <__stop_program>
