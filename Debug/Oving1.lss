
Oving1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000d94  00000e28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800118  00800118  00000e40  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d0  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017ea  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000858  00000000  00000000  00002856  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000844  00000000  00000000  000030ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000434  00000000  00000000  000038f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000597  00000000  00000000  00003d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000950  00000000  00000000  000042bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  00004c0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_1>
   8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_2>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e9       	ldi	r30, 0x94	; 148
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 31       	cpi	r26, 0x18	; 24
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 e1       	ldi	r26, 0x18	; 24
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ac 37       	cpi	r26, 0x7C	; 124
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <main>
  a6:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <read_MCP2515>:
void MCP2515_init(){
	SPI_master_init();
}


char read_MCP2515(char read_address){
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
	//SPI_master_init() first
	send_master_SPI(0x03);	//'read' instruction. 
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	0e 94 25 02 	call	0x44a	; 0x44a <send_master_SPI>
	send_master_SPI(read_address);
  b8:	8c 2f       	mov	r24, r28
  ba:	0e 94 25 02 	call	0x44a	; 0x44a <send_master_SPI>
	return read_master_SPI();
  be:	0e 94 29 02 	call	0x452	; 0x452 <read_master_SPI>
}
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <write_MCP2515>:


void write_MCP2515(char write_address, char write_data){
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	d8 2f       	mov	r29, r24
  cc:	c6 2f       	mov	r28, r22
	send_master_SPI(0x02);	//'write byte' instruction.
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 25 02 	call	0x44a	; 0x44a <send_master_SPI>
	send_master_SPI(write_address);
  d4:	8d 2f       	mov	r24, r29
  d6:	0e 94 25 02 	call	0x44a	; 0x44a <send_master_SPI>
	send_master_SPI(write_data);
  da:	8c 2f       	mov	r24, r28
  dc:	0e 94 25 02 	call	0x44a	; 0x44a <send_master_SPI>
}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <memory_init>:
#include <stdlib.h>
#include <avr/io.h>


void memory_init(void){
	MCUCR|=(1<<SRE);
  e6:	85 b7       	in	r24, 0x35	; 53
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	85 bf       	out	0x35, r24	; 53
	SFIOR|=(1<<XMM2);
  ec:	80 b7       	in	r24, 0x30	; 48
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	80 bf       	out	0x30, r24	; 48
  f2:	08 95       	ret

000000f4 <menu_print>:
	menu_print();
}

void menu_print(){
	//print_to_OLED(current_node->children[0]->content_string, 2);
	OLED_reset();
  f4:	0e 94 3d 01 	call	0x27a	; 0x27a <OLED_reset>
	print_to_OLED(current_node->name, 2);
  f8:	e0 91 69 01 	lds	r30, 0x0169
  fc:	f0 91 6a 01 	lds	r31, 0x016A
 100:	62 e0       	ldi	r22, 0x02	; 2
 102:	80 89       	ldd	r24, Z+16	; 0x10
 104:	91 89       	ldd	r25, Z+17	; 0x11
 106:	0e 94 4c 01 	call	0x298	; 0x298 <print_to_OLED>
	print_to_OLED(current_node->content_string, 2);
 10a:	e0 91 69 01 	lds	r30, 0x0169
 10e:	f0 91 6a 01 	lds	r31, 0x016A
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	82 89       	ldd	r24, Z+18	; 0x12
 116:	93 89       	ldd	r25, Z+19	; 0x13
 118:	0e 94 4c 01 	call	0x298	; 0x298 <print_to_OLED>
	OLED_print_arrow(arrow_page);
 11c:	80 91 18 01 	lds	r24, 0x0118
 120:	0e 94 d7 01 	call	0x3ae	; 0x3ae <OLED_print_arrow>
 124:	08 95       	ret

00000126 <__vector_1>:
	}
	OLED_print_arrow(arrow_page);
}

/* Left slider button, INT0_vect, pin PD2. Right slider button, INT1_vect, pin PD3.*/
ISR(INT0_vect){//, INT1_vect){
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	if (arrow_page <= 0){
 148:	e0 91 18 01 	lds	r30, 0x0118
 14c:	e1 11       	cpse	r30, r1
 14e:	0b c0       	rjmp	.+22     	; 0x166 <__vector_1+0x40>
		current_node = current_node->parent;
 150:	e0 91 69 01 	lds	r30, 0x0169
 154:	f0 91 6a 01 	lds	r31, 0x016A
 158:	80 81       	ld	r24, Z
 15a:	91 81       	ldd	r25, Z+1	; 0x01
 15c:	90 93 6a 01 	sts	0x016A, r25
 160:	80 93 69 01 	sts	0x0169, r24
 164:	11 c0       	rjmp	.+34     	; 0x188 <__vector_1+0x62>
	} else if (!(current_node->children[arrow_page - 1] == NULL)){
 166:	80 91 69 01 	lds	r24, 0x0169
 16a:	90 91 6a 01 	lds	r25, 0x016A
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	e8 0f       	add	r30, r24
 176:	f9 1f       	adc	r31, r25
 178:	80 81       	ld	r24, Z
 17a:	91 81       	ldd	r25, Z+1	; 0x01
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	21 f0       	breq	.+8      	; 0x188 <__vector_1+0x62>
		current_node = current_node->children[arrow_page -1];
 180:	90 93 6a 01 	sts	0x016A, r25
 184:	80 93 69 01 	sts	0x0169, r24
	}
	arrow_page = 0;
 188:	10 92 18 01 	sts	0x0118, r1
	menu_print();
 18c:	0e 94 7a 00 	call	0xf4	; 0xf4 <menu_print>
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <__vector_2>:

ISR(INT1_vect){
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
	current_node = current_node->parent;
 1d4:	e0 91 69 01 	lds	r30, 0x0169
 1d8:	f0 91 6a 01 	lds	r31, 0x016A
 1dc:	80 81       	ld	r24, Z
 1de:	91 81       	ldd	r25, Z+1	; 0x01
 1e0:	90 93 6a 01 	sts	0x016A, r25
 1e4:	80 93 69 01 	sts	0x0169, r24
	menu_print();
 1e8:	0e 94 7a 00 	call	0xf4	; 0xf4 <menu_print>
}
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	bf 91       	pop	r27
 1f2:	af 91       	pop	r26
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	7f 91       	pop	r23
 1fa:	6f 91       	pop	r22
 1fc:	5f 91       	pop	r21
 1fe:	4f 91       	pop	r20
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <goto_OLED_page>:
	goto_OLED_char_column(0);
	return;
}

void goto_OLED_page(uint8_t page){
	current_page = page % DISPLAY_PAGES;
 20e:	87 70       	andi	r24, 0x07	; 7
 210:	80 93 70 01 	sts	0x0170, r24
	write_OLED_cmd(0xB0 + current_page);
 214:	80 55       	subi	r24, 0x50	; 80
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 216:	80 93 00 10 	sts	0x1000, r24
 21a:	08 95       	ret

0000021c <goto_OLED_char_column>:
	write_OLED_cmd(0xB0 + current_page);
	return;
}

void goto_OLED_char_column(uint8_t column){
	uint8_t c = column * font_type.width;
 21c:	90 91 6b 01 	lds	r25, 0x016B
 220:	89 9f       	mul	r24, r25
 222:	90 2d       	mov	r25, r0
 224:	11 24       	eor	r1, r1
	uint8_t low_bits = c & 0x0f;
 226:	29 2f       	mov	r18, r25
 228:	2f 70       	andi	r18, 0x0F	; 15
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 22a:	e0 e0       	ldi	r30, 0x00	; 0
 22c:	f0 e1       	ldi	r31, 0x10	; 16
 22e:	20 83       	st	Z, r18
void goto_OLED_char_column(uint8_t column){
	uint8_t c = column * font_type.width;
	uint8_t low_bits = c & 0x0f;
	uint8_t high_bits = c & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
 230:	92 95       	swap	r25
 232:	9f 70       	andi	r25, 0x0F	; 15
 234:	90 5f       	subi	r25, 0xF0	; 240
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 236:	90 83       	st	Z, r25
	uint8_t low_bits = c & 0x0f;
	uint8_t high_bits = c & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
	
	current_column = column;
 238:	80 93 71 01 	sts	0x0171, r24
 23c:	08 95       	ret

0000023e <OLED_home>:
	OLED_home();
	return;
}

void OLED_home(){
	goto_OLED_page(0);
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 07 01 	call	0x20e	; 0x20e <goto_OLED_page>
	goto_OLED_char_column(0);
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 0e 01 	call	0x21c	; 0x21c <goto_OLED_char_column>
 24a:	08 95       	ret

0000024c <goto_OLED_physical_column>:
	current_column = temp_col;
	return;
}

void goto_OLED_physical_column(uint8_t column){
	uint8_t low_bits = column & 0x0f;
 24c:	98 2f       	mov	r25, r24
 24e:	9f 70       	andi	r25, 0x0F	; 15
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 250:	e0 e0       	ldi	r30, 0x00	; 0
 252:	f0 e1       	ldi	r31, 0x10	; 16
 254:	90 83       	st	Z, r25

void goto_OLED_physical_column(uint8_t column){
	uint8_t low_bits = column & 0x0f;
	uint8_t high_bits = column & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
 256:	98 2f       	mov	r25, r24
 258:	92 95       	swap	r25
 25a:	9f 70       	andi	r25, 0x0F	; 15
 25c:	90 5f       	subi	r25, 0xF0	; 240
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 25e:	90 83       	st	Z, r25
	uint8_t low_bits = column & 0x0f;
	uint8_t high_bits = column & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
	
	current_column = column;
 260:	80 93 71 01 	sts	0x0171, r24
 264:	08 95       	ret

00000266 <clear_OLED_page>:
	return;
}

void clear_OLED_page(uint8_t page){
	goto_OLED_page(page);
 266:	0e 94 07 01 	call	0x20e	; 0x20e <goto_OLED_page>
	for (uint8_t i = 0; i < DISPLAY_COLUMNS; i++){
 26a:	80 e0       	ldi	r24, 0x00	; 0
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 26c:	e0 e0       	ldi	r30, 0x00	; 0
 26e:	f2 e1       	ldi	r31, 0x12	; 18
 270:	10 82       	st	Z, r1
	return;
}

void clear_OLED_page(uint8_t page){
	goto_OLED_page(page);
	for (uint8_t i = 0; i < DISPLAY_COLUMNS; i++){
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	80 38       	cpi	r24, 0x80	; 128
 276:	e1 f7       	brne	.-8      	; 0x270 <clear_OLED_page+0xa>
		write_OLED_data(0);
	}
	return;
}
 278:	08 95       	ret

0000027a <OLED_reset>:
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
}


void OLED_reset(){
 27a:	cf 93       	push	r28
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 27c:	80 e4       	ldi	r24, 0x40	; 64
 27e:	80 93 00 10 	sts	0x1000, r24
}


void OLED_reset(){
	write_OLED_cmd(0x40);		//Set display line start at page 0. 
	for (uint8_t i = 0; i < DISPLAY_PAGES; i++){
 282:	c0 e0       	ldi	r28, 0x00	; 0
		clear_OLED_page(i);
 284:	8c 2f       	mov	r24, r28
 286:	0e 94 33 01 	call	0x266	; 0x266 <clear_OLED_page>
}


void OLED_reset(){
	write_OLED_cmd(0x40);		//Set display line start at page 0. 
	for (uint8_t i = 0; i < DISPLAY_PAGES; i++){
 28a:	cf 5f       	subi	r28, 0xFF	; 255
 28c:	c8 30       	cpi	r28, 0x08	; 8
 28e:	d1 f7       	brne	.-12     	; 0x284 <OLED_reset+0xa>
		clear_OLED_page(i);
	}
	OLED_home();
 290:	0e 94 1f 01 	call	0x23e	; 0x23e <OLED_home>
	return;
}
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <print_to_OLED>:

void OLED_pos(uint8_t page, uint8_t column){
	return;
}

void print_to_OLED(const char * string, uint8_t start_column){
 298:	3f 92       	push	r3
 29a:	4f 92       	push	r4
 29c:	5f 92       	push	r5
 29e:	6f 92       	push	r6
 2a0:	7f 92       	push	r7
 2a2:	8f 92       	push	r8
 2a4:	9f 92       	push	r9
 2a6:	af 92       	push	r10
 2a8:	bf 92       	push	r11
 2aa:	cf 92       	push	r12
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24
 2bc:	36 2e       	mov	r3, r22
	goto_OLED_char_column(start_column);
 2be:	86 2f       	mov	r24, r22
 2c0:	0e 94 0e 01 	call	0x21c	; 0x21c <goto_OLED_char_column>
	int length = strlen(string);
 2c4:	fe 01       	movw	r30, r28
 2c6:	01 90       	ld	r0, Z+
 2c8:	00 20       	and	r0, r0
 2ca:	e9 f7       	brne	.-6      	; 0x2c6 <print_to_OLED+0x2e>
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	3f 01       	movw	r6, r30
 2d0:	6c 1a       	sub	r6, r28
 2d2:	7d 0a       	sbc	r7, r29
	
	for (int i = 0; i < length; i++){
 2d4:	16 14       	cp	r1, r6
 2d6:	17 04       	cpc	r1, r7
 2d8:	0c f0       	brlt	.+2      	; 0x2dc <print_to_OLED+0x44>
 2da:	57 c0       	rjmp	.+174    	; 0x38a <print_to_OLED+0xf2>
 2dc:	4e 01       	movw	r8, r28
 2de:	a1 2c       	mov	r10, r1
 2e0:	b1 2c       	mov	r11, r1
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 2e2:	cb e6       	ldi	r28, 0x6B	; 107
 2e4:	d1 e0       	ldi	r29, 0x01	; 1
 2e6:	51 2c       	mov	r5, r1
 2e8:	41 2c       	mov	r4, r1
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
 2ea:	0f 2e       	mov	r0, r31
 2ec:	fe e6       	ldi	r31, 0x6E	; 110
 2ee:	cf 2e       	mov	r12, r31
 2f0:	f1 e0       	ldi	r31, 0x01	; 1
 2f2:	df 2e       	mov	r13, r31
 2f4:	f0 2d       	mov	r31, r0
 2f6:	0f 2e       	mov	r0, r31
 2f8:	fd e6       	ldi	r31, 0x6D	; 109
 2fa:	ef 2e       	mov	r14, r31
 2fc:	f1 e0       	ldi	r31, 0x01	; 1
 2fe:	ff 2e       	mov	r15, r31
 300:	f0 2d       	mov	r31, r0
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 302:	00 e0       	ldi	r16, 0x00	; 0
 304:	12 e1       	ldi	r17, 0x12	; 18
void print_to_OLED(const char * string, uint8_t start_column){
	goto_OLED_char_column(start_column);
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
		char c = string[i];
 306:	d4 01       	movw	r26, r8
 308:	4d 91       	ld	r20, X+
 30a:	4d 01       	movw	r8, r26
		if (c == '\n') {
 30c:	4a 30       	cpi	r20, 0x0A	; 10
 30e:	31 f0       	breq	.+12     	; 0x31c <print_to_OLED+0x84>
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 310:	28 81       	ld	r18, Y
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	12 16       	cp	r1, r18
 316:	13 06       	cpc	r1, r19
 318:	6c f0       	brlt	.+26     	; 0x334 <print_to_OLED+0x9c>
 31a:	30 c0       	rjmp	.+96     	; 0x37c <print_to_OLED+0xe4>
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
		char c = string[i];
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
 31c:	80 91 70 01 	lds	r24, 0x0170
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	87 70       	andi	r24, 0x07	; 7
 326:	90 78       	andi	r25, 0x80	; 128
 328:	0e 94 07 01 	call	0x20e	; 0x20e <goto_OLED_page>
			goto_OLED_char_column(start_column);
 32c:	83 2d       	mov	r24, r3
 32e:	0e 94 0e 01 	call	0x21c	; 0x21c <goto_OLED_char_column>
 332:	24 c0       	rjmp	.+72     	; 0x37c <print_to_OLED+0xe4>
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 334:	85 2d       	mov	r24, r5
 336:	94 2d       	mov	r25, r4
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	f7 01       	movw	r30, r14
 33c:	60 81       	ld	r22, Z
 33e:	da 01       	movw	r26, r20
 340:	a6 1b       	sub	r26, r22
 342:	b1 09       	sbc	r27, r1
 344:	2a 9f       	mul	r18, r26
 346:	f0 01       	movw	r30, r0
 348:	2b 9f       	mul	r18, r27
 34a:	f0 0d       	add	r31, r0
 34c:	3a 9f       	mul	r19, r26
 34e:	f0 0d       	add	r31, r0
 350:	11 24       	eor	r1, r1
 352:	e8 0f       	add	r30, r24
 354:	f9 1f       	adc	r31, r25
 356:	d6 01       	movw	r26, r12
 358:	2d 91       	ld	r18, X+
 35a:	3c 91       	ld	r19, X
 35c:	e2 0f       	add	r30, r18
 35e:	f3 1f       	adc	r31, r19
 360:	e4 91       	lpm	r30, Z
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 362:	d8 01       	movw	r26, r16
 364:	ec 93       	st	X, r30
		else{
			for (int j = 0; j < font_type.width; j++){
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
				//write_OLED_data(pgm_read_byte(&font[c-font_type.ascii_offset][j]));
				//write_OLED_data(pgm_read_byte(&font_type.data[c-font_type.ascii_offset][j]));
				current_column = current_column + font_type.width;
 366:	30 91 71 01 	lds	r19, 0x0171
 36a:	28 81       	ld	r18, Y
 36c:	32 0f       	add	r19, r18
 36e:	30 93 71 01 	sts	0x0171, r19
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	82 17       	cp	r24, r18
 378:	93 07       	cpc	r25, r19
 37a:	fc f2       	brlt	.-66     	; 0x33a <print_to_OLED+0xa2>

void print_to_OLED(const char * string, uint8_t start_column){
	goto_OLED_char_column(start_column);
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
 37c:	bf ef       	ldi	r27, 0xFF	; 255
 37e:	ab 1a       	sub	r10, r27
 380:	bb 0a       	sbc	r11, r27
 382:	6a 14       	cp	r6, r10
 384:	7b 04       	cpc	r7, r11
 386:	09 f0       	breq	.+2      	; 0x38a <print_to_OLED+0xf2>
 388:	be cf       	rjmp	.-132    	; 0x306 <print_to_OLED+0x6e>
				current_column = current_column + font_type.width;
			}
		}
	}
	return;
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	ff 90       	pop	r15
 394:	ef 90       	pop	r14
 396:	df 90       	pop	r13
 398:	cf 90       	pop	r12
 39a:	bf 90       	pop	r11
 39c:	af 90       	pop	r10
 39e:	9f 90       	pop	r9
 3a0:	8f 90       	pop	r8
 3a2:	7f 90       	pop	r7
 3a4:	6f 90       	pop	r6
 3a6:	5f 90       	pop	r5
 3a8:	4f 90       	pop	r4
 3aa:	3f 90       	pop	r3
 3ac:	08 95       	ret

000003ae <OLED_print_arrow>:

void OLED_print_arrow(uint8_t page)
{	int temp = current_page;
 3ae:	cf 93       	push	r28
 3b0:	c0 91 70 01 	lds	r28, 0x0170
	goto_OLED_page(page);
 3b4:	0e 94 07 01 	call	0x20e	; 0x20e <goto_OLED_page>
	goto_OLED_physical_column(1);
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 26 01 	call	0x24c	; 0x24c <goto_OLED_physical_column>
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 3be:	e0 e0       	ldi	r30, 0x00	; 0
 3c0:	f2 e1       	ldi	r31, 0x12	; 18
 3c2:	98 e1       	ldi	r25, 0x18	; 24
 3c4:	90 83       	st	Z, r25
 3c6:	90 83       	st	Z, r25
 3c8:	8e e7       	ldi	r24, 0x7E	; 126
 3ca:	80 83       	st	Z, r24
 3cc:	8c e3       	ldi	r24, 0x3C	; 60
 3ce:	80 83       	st	Z, r24
 3d0:	90 83       	st	Z, r25
	write_OLED_data(0b00011000);
	write_OLED_data(0b00011000);
	write_OLED_data(0b01111110);
	write_OLED_data(0b00111100);
	write_OLED_data(0b00011000);
	current_column = ARROW_WIDTH;
 3d2:	88 e0       	ldi	r24, 0x08	; 8
 3d4:	80 93 71 01 	sts	0x0171, r24
	
	goto_OLED_page(temp);
 3d8:	8c 2f       	mov	r24, r28
 3da:	0e 94 07 01 	call	0x20e	; 0x20e <goto_OLED_page>
}
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <main>:
	 //}
	
	
	//ov2////////////////////////////////
	
	DDRE=0x3;
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	86 b9       	out	0x06, r24	; 6
	DDRA=0xFF;
 3e6:	8f ef       	ldi	r24, 0xFF	; 255
 3e8:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 3ea:	1b ba       	out	0x1b, r1	; 27
	PORTE=0x2;
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	87 b9       	out	0x07, r24	; 7
	*/
	//////////////////////////
	///////oving5/////////////
	/////////////////////////
	
	memory_init();
 3f0:	0e 94 73 00 	call	0xe6	; 0xe6 <memory_init>
	UART_Init(MYUBRR);
 3f4:	8f e1       	ldi	r24, 0x1F	; 31
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 36 02 	call	0x46c	; 0x46c <UART_Init>
	SPI_master_init();
 3fc:	0e 94 1e 02 	call	0x43c	; 0x43c <SPI_master_init>
	printf("A \n");
 400:	86 e0       	ldi	r24, 0x06	; 6
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 a2 02 	call	0x544	; 0x544 <puts>
	printf("B \n");
	*/

	
	
	write_MCP2515(3, 0x25);
 408:	65 e2       	ldi	r22, 0x25	; 37
 40a:	83 e0       	ldi	r24, 0x03	; 3
 40c:	0e 94 63 00 	call	0xc6	; 0xc6 <write_MCP2515>
	printf("shit\n");
 410:	89 e0       	ldi	r24, 0x09	; 9
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	0e 94 a2 02 	call	0x544	; 0x544 <puts>
	char temp = read_MCP2515(3);
 418:	83 e0       	ldi	r24, 0x03	; 3
 41a:	0e 94 57 00 	call	0xae	; 0xae <read_MCP2515>
	printf("Temp: %i\n", temp);
 41e:	1f 92       	push	r1
 420:	8f 93       	push	r24
 422:	8e e0       	ldi	r24, 0x0E	; 14
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	9f 93       	push	r25
 428:	8f 93       	push	r24
 42a:	0e 94 8e 02 	call	0x51c	; 0x51c <printf>
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
	
	
	
	return 0;
	
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	08 95       	ret

0000043c <SPI_master_init>:
#define SCK		7



void SPI_master_init(){
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SSn);		//Set MOSI, SCK, SSn output.
 43c:	87 b3       	in	r24, 0x17	; 23
 43e:	80 6b       	ori	r24, 0xB0	; 176
 440:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~((1<<MISO));		//Set MISO input.
 442:	be 98       	cbi	0x17, 6	; 23
	SPCR = (1<<SPE) | (1<<MSTR)|(1<<SPR0);	//Enable SPI, Master, set clock rate fck/16.
 444:	81 e5       	ldi	r24, 0x51	; 81
 446:	8d b9       	out	0x0d, r24	; 13
 448:	08 95       	ret

0000044a <send_master_SPI>:
	DDRB &= ~((1<<MOSI)|(1<<SCK)|(1<<SSn)); //Set as input.
	SPCR = (1<<SPE);	//Enable SPI.
}

void send_master_SPI(char data){
	SPDR = data;				//Send data.
 44a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF))) {}		//Wait for transmission complete.
 44c:	77 9b       	sbis	0x0e, 7	; 14
 44e:	fe cf       	rjmp	.-4      	; 0x44c <send_master_SPI+0x2>
	
}
 450:	08 95       	ret

00000452 <read_master_SPI>:

char read_master_SPI(){
	//send_master_SPI(1);		//Send dummy byte.
	SPDR = 0x00;						
 452:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF))) {}		//Wait for transmission complete.
 454:	77 9b       	sbis	0x0e, 7	; 14
 456:	fe cf       	rjmp	.-4      	; 0x454 <read_master_SPI+0x2>
	return SPDR;
 458:	8f b1       	in	r24, 0x0f	; 15
}
 45a:	08 95       	ret

0000045c <UART_Transmit>:
	}
	
void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer*/
		while( !( UCSR0A & (1<<UDRE0)) )
 45c:	5d 9b       	sbis	0x0b, 5	; 11
 45e:	fe cf       	rjmp	.-4      	; 0x45c <UART_Transmit>
		;
	/* Put data into buffer, sends the data*/
		UDR0 = data;
 460:	8c b9       	out	0x0c, r24	; 12
 462:	08 95       	ret

00000464 <UART_Receive>:
}

unsigned char UART_Receive(void)
	{
		/* Wait for data to be received*/
		while( !(UCSR0A & (1<<RXC0)) )
 464:	5f 9b       	sbis	0x0b, 7	; 11
 466:	fe cf       	rjmp	.-4      	; 0x464 <UART_Receive>
			;
		/* Get and return received data from buffer*/
		return UDR0;
 468:	8c b1       	in	r24, 0x0c	; 12
 46a:	08 95       	ret

0000046c <UART_Init>:
#define MYUBRR FOSC/16/BAUD-1

void UART_Init(unsigned int ubrr)
	{
		/* Set baud rate */
		UBRR0H = (unsigned char)(ubrr>>8);
 46c:	90 bd       	out	0x20, r25	; 32
		UBRR0L = (unsigned char)ubrr;
 46e:	89 b9       	out	0x09, r24	; 9
		/* Enable receiver and transmitter */
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 470:	88 e1       	ldi	r24, 0x18	; 24
 472:	8a b9       	out	0x0a, r24	; 10
		/* 
		Set frame format: 8data, 2stop bit
		*/
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 474:	8e e8       	ldi	r24, 0x8E	; 142
 476:	80 bd       	out	0x20, r24	; 32
		fdevopen(&UART_Transmit, &UART_Receive);
 478:	62 e3       	ldi	r22, 0x32	; 50
 47a:	72 e0       	ldi	r23, 0x02	; 2
 47c:	8e e2       	ldi	r24, 0x2E	; 46
 47e:	92 e0       	ldi	r25, 0x02	; 2
 480:	0e 94 43 02 	call	0x486	; 0x486 <fdevopen>
 484:	08 95       	ret

00000486 <fdevopen>:
 486:	0f 93       	push	r16
 488:	1f 93       	push	r17
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	ec 01       	movw	r28, r24
 490:	8b 01       	movw	r16, r22
 492:	00 97       	sbiw	r24, 0x00	; 0
 494:	31 f4       	brne	.+12     	; 0x4a2 <fdevopen+0x1c>
 496:	61 15       	cp	r22, r1
 498:	71 05       	cpc	r23, r1
 49a:	19 f4       	brne	.+6      	; 0x4a2 <fdevopen+0x1c>
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	38 c0       	rjmp	.+112    	; 0x512 <__stack+0x13>
 4a2:	6e e0       	ldi	r22, 0x0E	; 14
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 a1 04 	call	0x942	; 0x942 <calloc>
 4ae:	fc 01       	movw	r30, r24
 4b0:	00 97       	sbiw	r24, 0x00	; 0
 4b2:	a1 f3       	breq	.-24     	; 0x49c <fdevopen+0x16>
 4b4:	80 e8       	ldi	r24, 0x80	; 128
 4b6:	83 83       	std	Z+3, r24	; 0x03
 4b8:	01 15       	cp	r16, r1
 4ba:	11 05       	cpc	r17, r1
 4bc:	71 f0       	breq	.+28     	; 0x4da <fdevopen+0x54>
 4be:	13 87       	std	Z+11, r17	; 0x0b
 4c0:	02 87       	std	Z+10, r16	; 0x0a
 4c2:	81 e8       	ldi	r24, 0x81	; 129
 4c4:	83 83       	std	Z+3, r24	; 0x03
 4c6:	80 91 72 01 	lds	r24, 0x0172
 4ca:	90 91 73 01 	lds	r25, 0x0173
 4ce:	89 2b       	or	r24, r25
 4d0:	21 f4       	brne	.+8      	; 0x4da <fdevopen+0x54>
 4d2:	f0 93 73 01 	sts	0x0173, r31
 4d6:	e0 93 72 01 	sts	0x0172, r30
 4da:	20 97       	sbiw	r28, 0x00	; 0
 4dc:	c9 f0       	breq	.+50     	; 0x510 <__stack+0x11>
 4de:	d1 87       	std	Z+9, r29	; 0x09
 4e0:	c0 87       	std	Z+8, r28	; 0x08
 4e2:	83 81       	ldd	r24, Z+3	; 0x03
 4e4:	82 60       	ori	r24, 0x02	; 2
 4e6:	83 83       	std	Z+3, r24	; 0x03
 4e8:	80 91 74 01 	lds	r24, 0x0174
 4ec:	90 91 75 01 	lds	r25, 0x0175
 4f0:	89 2b       	or	r24, r25
 4f2:	71 f4       	brne	.+28     	; 0x510 <__stack+0x11>
 4f4:	f0 93 75 01 	sts	0x0175, r31
 4f8:	e0 93 74 01 	sts	0x0174, r30
 4fc:	80 91 76 01 	lds	r24, 0x0176
 500:	90 91 77 01 	lds	r25, 0x0177
 504:	89 2b       	or	r24, r25
 506:	21 f4       	brne	.+8      	; 0x510 <__stack+0x11>
 508:	f0 93 77 01 	sts	0x0177, r31
 50c:	e0 93 76 01 	sts	0x0176, r30
 510:	cf 01       	movw	r24, r30
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	1f 91       	pop	r17
 518:	0f 91       	pop	r16
 51a:	08 95       	ret

0000051c <printf>:
 51c:	a0 e0       	ldi	r26, 0x00	; 0
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	e4 e9       	ldi	r30, 0x94	; 148
 522:	f2 e0       	ldi	r31, 0x02	; 2
 524:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__prologue_saves__+0x20>
 528:	fe 01       	movw	r30, r28
 52a:	35 96       	adiw	r30, 0x05	; 5
 52c:	61 91       	ld	r22, Z+
 52e:	71 91       	ld	r23, Z+
 530:	af 01       	movw	r20, r30
 532:	80 91 74 01 	lds	r24, 0x0174
 536:	90 91 75 01 	lds	r25, 0x0175
 53a:	0e 94 cf 02 	call	0x59e	; 0x59e <vfprintf>
 53e:	e2 e0       	ldi	r30, 0x02	; 2
 540:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__epilogue_restores__+0x20>

00000544 <puts>:
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	e0 91 74 01 	lds	r30, 0x0174
 550:	f0 91 75 01 	lds	r31, 0x0175
 554:	23 81       	ldd	r18, Z+3	; 0x03
 556:	21 ff       	sbrs	r18, 1
 558:	1b c0       	rjmp	.+54     	; 0x590 <puts+0x4c>
 55a:	ec 01       	movw	r28, r24
 55c:	00 e0       	ldi	r16, 0x00	; 0
 55e:	10 e0       	ldi	r17, 0x00	; 0
 560:	89 91       	ld	r24, Y+
 562:	60 91 74 01 	lds	r22, 0x0174
 566:	70 91 75 01 	lds	r23, 0x0175
 56a:	db 01       	movw	r26, r22
 56c:	18 96       	adiw	r26, 0x08	; 8
 56e:	ed 91       	ld	r30, X+
 570:	fc 91       	ld	r31, X
 572:	19 97       	sbiw	r26, 0x09	; 9
 574:	88 23       	and	r24, r24
 576:	31 f0       	breq	.+12     	; 0x584 <puts+0x40>
 578:	09 95       	icall
 57a:	89 2b       	or	r24, r25
 57c:	89 f3       	breq	.-30     	; 0x560 <puts+0x1c>
 57e:	0f ef       	ldi	r16, 0xFF	; 255
 580:	1f ef       	ldi	r17, 0xFF	; 255
 582:	ee cf       	rjmp	.-36     	; 0x560 <puts+0x1c>
 584:	8a e0       	ldi	r24, 0x0A	; 10
 586:	09 95       	icall
 588:	89 2b       	or	r24, r25
 58a:	11 f4       	brne	.+4      	; 0x590 <puts+0x4c>
 58c:	c8 01       	movw	r24, r16
 58e:	02 c0       	rjmp	.+4      	; 0x594 <puts+0x50>
 590:	8f ef       	ldi	r24, 0xFF	; 255
 592:	9f ef       	ldi	r25, 0xFF	; 255
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	1f 91       	pop	r17
 59a:	0f 91       	pop	r16
 59c:	08 95       	ret

0000059e <vfprintf>:
 59e:	ac e0       	ldi	r26, 0x0C	; 12
 5a0:	b0 e0       	ldi	r27, 0x00	; 0
 5a2:	e5 ed       	ldi	r30, 0xD5	; 213
 5a4:	f2 e0       	ldi	r31, 0x02	; 2
 5a6:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__prologue_saves__>
 5aa:	7c 01       	movw	r14, r24
 5ac:	6b 01       	movw	r12, r22
 5ae:	8a 01       	movw	r16, r20
 5b0:	fc 01       	movw	r30, r24
 5b2:	17 82       	std	Z+7, r1	; 0x07
 5b4:	16 82       	std	Z+6, r1	; 0x06
 5b6:	83 81       	ldd	r24, Z+3	; 0x03
 5b8:	81 ff       	sbrs	r24, 1
 5ba:	bd c1       	rjmp	.+890    	; 0x936 <vfprintf+0x398>
 5bc:	ce 01       	movw	r24, r28
 5be:	01 96       	adiw	r24, 0x01	; 1
 5c0:	4c 01       	movw	r8, r24
 5c2:	f7 01       	movw	r30, r14
 5c4:	93 81       	ldd	r25, Z+3	; 0x03
 5c6:	f6 01       	movw	r30, r12
 5c8:	93 fd       	sbrc	r25, 3
 5ca:	85 91       	lpm	r24, Z+
 5cc:	93 ff       	sbrs	r25, 3
 5ce:	81 91       	ld	r24, Z+
 5d0:	6f 01       	movw	r12, r30
 5d2:	88 23       	and	r24, r24
 5d4:	09 f4       	brne	.+2      	; 0x5d8 <vfprintf+0x3a>
 5d6:	ab c1       	rjmp	.+854    	; 0x92e <vfprintf+0x390>
 5d8:	85 32       	cpi	r24, 0x25	; 37
 5da:	39 f4       	brne	.+14     	; 0x5ea <vfprintf+0x4c>
 5dc:	93 fd       	sbrc	r25, 3
 5de:	85 91       	lpm	r24, Z+
 5e0:	93 ff       	sbrs	r25, 3
 5e2:	81 91       	ld	r24, Z+
 5e4:	6f 01       	movw	r12, r30
 5e6:	85 32       	cpi	r24, 0x25	; 37
 5e8:	29 f4       	brne	.+10     	; 0x5f4 <vfprintf+0x56>
 5ea:	b7 01       	movw	r22, r14
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 5f2:	e7 cf       	rjmp	.-50     	; 0x5c2 <vfprintf+0x24>
 5f4:	51 2c       	mov	r5, r1
 5f6:	31 2c       	mov	r3, r1
 5f8:	20 e0       	ldi	r18, 0x00	; 0
 5fa:	20 32       	cpi	r18, 0x20	; 32
 5fc:	a0 f4       	brcc	.+40     	; 0x626 <vfprintf+0x88>
 5fe:	8b 32       	cpi	r24, 0x2B	; 43
 600:	69 f0       	breq	.+26     	; 0x61c <vfprintf+0x7e>
 602:	30 f4       	brcc	.+12     	; 0x610 <vfprintf+0x72>
 604:	80 32       	cpi	r24, 0x20	; 32
 606:	59 f0       	breq	.+22     	; 0x61e <vfprintf+0x80>
 608:	83 32       	cpi	r24, 0x23	; 35
 60a:	69 f4       	brne	.+26     	; 0x626 <vfprintf+0x88>
 60c:	20 61       	ori	r18, 0x10	; 16
 60e:	2c c0       	rjmp	.+88     	; 0x668 <vfprintf+0xca>
 610:	8d 32       	cpi	r24, 0x2D	; 45
 612:	39 f0       	breq	.+14     	; 0x622 <vfprintf+0x84>
 614:	80 33       	cpi	r24, 0x30	; 48
 616:	39 f4       	brne	.+14     	; 0x626 <vfprintf+0x88>
 618:	21 60       	ori	r18, 0x01	; 1
 61a:	26 c0       	rjmp	.+76     	; 0x668 <vfprintf+0xca>
 61c:	22 60       	ori	r18, 0x02	; 2
 61e:	24 60       	ori	r18, 0x04	; 4
 620:	23 c0       	rjmp	.+70     	; 0x668 <vfprintf+0xca>
 622:	28 60       	ori	r18, 0x08	; 8
 624:	21 c0       	rjmp	.+66     	; 0x668 <vfprintf+0xca>
 626:	27 fd       	sbrc	r18, 7
 628:	27 c0       	rjmp	.+78     	; 0x678 <vfprintf+0xda>
 62a:	30 ed       	ldi	r19, 0xD0	; 208
 62c:	38 0f       	add	r19, r24
 62e:	3a 30       	cpi	r19, 0x0A	; 10
 630:	78 f4       	brcc	.+30     	; 0x650 <vfprintf+0xb2>
 632:	26 ff       	sbrs	r18, 6
 634:	06 c0       	rjmp	.+12     	; 0x642 <vfprintf+0xa4>
 636:	fa e0       	ldi	r31, 0x0A	; 10
 638:	5f 9e       	mul	r5, r31
 63a:	30 0d       	add	r19, r0
 63c:	11 24       	eor	r1, r1
 63e:	53 2e       	mov	r5, r19
 640:	13 c0       	rjmp	.+38     	; 0x668 <vfprintf+0xca>
 642:	8a e0       	ldi	r24, 0x0A	; 10
 644:	38 9e       	mul	r3, r24
 646:	30 0d       	add	r19, r0
 648:	11 24       	eor	r1, r1
 64a:	33 2e       	mov	r3, r19
 64c:	20 62       	ori	r18, 0x20	; 32
 64e:	0c c0       	rjmp	.+24     	; 0x668 <vfprintf+0xca>
 650:	8e 32       	cpi	r24, 0x2E	; 46
 652:	21 f4       	brne	.+8      	; 0x65c <vfprintf+0xbe>
 654:	26 fd       	sbrc	r18, 6
 656:	6b c1       	rjmp	.+726    	; 0x92e <vfprintf+0x390>
 658:	20 64       	ori	r18, 0x40	; 64
 65a:	06 c0       	rjmp	.+12     	; 0x668 <vfprintf+0xca>
 65c:	8c 36       	cpi	r24, 0x6C	; 108
 65e:	11 f4       	brne	.+4      	; 0x664 <vfprintf+0xc6>
 660:	20 68       	ori	r18, 0x80	; 128
 662:	02 c0       	rjmp	.+4      	; 0x668 <vfprintf+0xca>
 664:	88 36       	cpi	r24, 0x68	; 104
 666:	41 f4       	brne	.+16     	; 0x678 <vfprintf+0xda>
 668:	f6 01       	movw	r30, r12
 66a:	93 fd       	sbrc	r25, 3
 66c:	85 91       	lpm	r24, Z+
 66e:	93 ff       	sbrs	r25, 3
 670:	81 91       	ld	r24, Z+
 672:	6f 01       	movw	r12, r30
 674:	81 11       	cpse	r24, r1
 676:	c1 cf       	rjmp	.-126    	; 0x5fa <vfprintf+0x5c>
 678:	98 2f       	mov	r25, r24
 67a:	9f 7d       	andi	r25, 0xDF	; 223
 67c:	95 54       	subi	r25, 0x45	; 69
 67e:	93 30       	cpi	r25, 0x03	; 3
 680:	28 f4       	brcc	.+10     	; 0x68c <vfprintf+0xee>
 682:	0c 5f       	subi	r16, 0xFC	; 252
 684:	1f 4f       	sbci	r17, 0xFF	; 255
 686:	ff e3       	ldi	r31, 0x3F	; 63
 688:	f9 83       	std	Y+1, r31	; 0x01
 68a:	0d c0       	rjmp	.+26     	; 0x6a6 <vfprintf+0x108>
 68c:	83 36       	cpi	r24, 0x63	; 99
 68e:	31 f0       	breq	.+12     	; 0x69c <vfprintf+0xfe>
 690:	83 37       	cpi	r24, 0x73	; 115
 692:	71 f0       	breq	.+28     	; 0x6b0 <vfprintf+0x112>
 694:	83 35       	cpi	r24, 0x53	; 83
 696:	09 f0       	breq	.+2      	; 0x69a <vfprintf+0xfc>
 698:	5b c0       	rjmp	.+182    	; 0x750 <vfprintf+0x1b2>
 69a:	22 c0       	rjmp	.+68     	; 0x6e0 <vfprintf+0x142>
 69c:	f8 01       	movw	r30, r16
 69e:	80 81       	ld	r24, Z
 6a0:	89 83       	std	Y+1, r24	; 0x01
 6a2:	0e 5f       	subi	r16, 0xFE	; 254
 6a4:	1f 4f       	sbci	r17, 0xFF	; 255
 6a6:	44 24       	eor	r4, r4
 6a8:	43 94       	inc	r4
 6aa:	51 2c       	mov	r5, r1
 6ac:	54 01       	movw	r10, r8
 6ae:	15 c0       	rjmp	.+42     	; 0x6da <vfprintf+0x13c>
 6b0:	38 01       	movw	r6, r16
 6b2:	f2 e0       	ldi	r31, 0x02	; 2
 6b4:	6f 0e       	add	r6, r31
 6b6:	71 1c       	adc	r7, r1
 6b8:	f8 01       	movw	r30, r16
 6ba:	a0 80       	ld	r10, Z
 6bc:	b1 80       	ldd	r11, Z+1	; 0x01
 6be:	26 ff       	sbrs	r18, 6
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <vfprintf+0x12a>
 6c2:	65 2d       	mov	r22, r5
 6c4:	70 e0       	ldi	r23, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <vfprintf+0x12e>
 6c8:	6f ef       	ldi	r22, 0xFF	; 255
 6ca:	7f ef       	ldi	r23, 0xFF	; 255
 6cc:	c5 01       	movw	r24, r10
 6ce:	2c 87       	std	Y+12, r18	; 0x0c
 6d0:	0e 94 f6 05 	call	0xbec	; 0xbec <strnlen>
 6d4:	2c 01       	movw	r4, r24
 6d6:	83 01       	movw	r16, r6
 6d8:	2c 85       	ldd	r18, Y+12	; 0x0c
 6da:	2f 77       	andi	r18, 0x7F	; 127
 6dc:	22 2e       	mov	r2, r18
 6de:	17 c0       	rjmp	.+46     	; 0x70e <vfprintf+0x170>
 6e0:	38 01       	movw	r6, r16
 6e2:	f2 e0       	ldi	r31, 0x02	; 2
 6e4:	6f 0e       	add	r6, r31
 6e6:	71 1c       	adc	r7, r1
 6e8:	f8 01       	movw	r30, r16
 6ea:	a0 80       	ld	r10, Z
 6ec:	b1 80       	ldd	r11, Z+1	; 0x01
 6ee:	26 ff       	sbrs	r18, 6
 6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <vfprintf+0x15a>
 6f2:	65 2d       	mov	r22, r5
 6f4:	70 e0       	ldi	r23, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <vfprintf+0x15e>
 6f8:	6f ef       	ldi	r22, 0xFF	; 255
 6fa:	7f ef       	ldi	r23, 0xFF	; 255
 6fc:	c5 01       	movw	r24, r10
 6fe:	2c 87       	std	Y+12, r18	; 0x0c
 700:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <strnlen_P>
 704:	2c 01       	movw	r4, r24
 706:	2c 85       	ldd	r18, Y+12	; 0x0c
 708:	20 68       	ori	r18, 0x80	; 128
 70a:	22 2e       	mov	r2, r18
 70c:	83 01       	movw	r16, r6
 70e:	23 fc       	sbrc	r2, 3
 710:	1b c0       	rjmp	.+54     	; 0x748 <vfprintf+0x1aa>
 712:	83 2d       	mov	r24, r3
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	48 16       	cp	r4, r24
 718:	59 06       	cpc	r5, r25
 71a:	b0 f4       	brcc	.+44     	; 0x748 <vfprintf+0x1aa>
 71c:	b7 01       	movw	r22, r14
 71e:	80 e2       	ldi	r24, 0x20	; 32
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 726:	3a 94       	dec	r3
 728:	f4 cf       	rjmp	.-24     	; 0x712 <vfprintf+0x174>
 72a:	f5 01       	movw	r30, r10
 72c:	27 fc       	sbrc	r2, 7
 72e:	85 91       	lpm	r24, Z+
 730:	27 fe       	sbrs	r2, 7
 732:	81 91       	ld	r24, Z+
 734:	5f 01       	movw	r10, r30
 736:	b7 01       	movw	r22, r14
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 73e:	31 10       	cpse	r3, r1
 740:	3a 94       	dec	r3
 742:	f1 e0       	ldi	r31, 0x01	; 1
 744:	4f 1a       	sub	r4, r31
 746:	51 08       	sbc	r5, r1
 748:	41 14       	cp	r4, r1
 74a:	51 04       	cpc	r5, r1
 74c:	71 f7       	brne	.-36     	; 0x72a <vfprintf+0x18c>
 74e:	e5 c0       	rjmp	.+458    	; 0x91a <vfprintf+0x37c>
 750:	84 36       	cpi	r24, 0x64	; 100
 752:	11 f0       	breq	.+4      	; 0x758 <vfprintf+0x1ba>
 754:	89 36       	cpi	r24, 0x69	; 105
 756:	39 f5       	brne	.+78     	; 0x7a6 <vfprintf+0x208>
 758:	f8 01       	movw	r30, r16
 75a:	27 ff       	sbrs	r18, 7
 75c:	07 c0       	rjmp	.+14     	; 0x76c <vfprintf+0x1ce>
 75e:	60 81       	ld	r22, Z
 760:	71 81       	ldd	r23, Z+1	; 0x01
 762:	82 81       	ldd	r24, Z+2	; 0x02
 764:	93 81       	ldd	r25, Z+3	; 0x03
 766:	0c 5f       	subi	r16, 0xFC	; 252
 768:	1f 4f       	sbci	r17, 0xFF	; 255
 76a:	08 c0       	rjmp	.+16     	; 0x77c <vfprintf+0x1de>
 76c:	60 81       	ld	r22, Z
 76e:	71 81       	ldd	r23, Z+1	; 0x01
 770:	88 27       	eor	r24, r24
 772:	77 fd       	sbrc	r23, 7
 774:	80 95       	com	r24
 776:	98 2f       	mov	r25, r24
 778:	0e 5f       	subi	r16, 0xFE	; 254
 77a:	1f 4f       	sbci	r17, 0xFF	; 255
 77c:	2f 76       	andi	r18, 0x6F	; 111
 77e:	b2 2e       	mov	r11, r18
 780:	97 ff       	sbrs	r25, 7
 782:	09 c0       	rjmp	.+18     	; 0x796 <vfprintf+0x1f8>
 784:	90 95       	com	r25
 786:	80 95       	com	r24
 788:	70 95       	com	r23
 78a:	61 95       	neg	r22
 78c:	7f 4f       	sbci	r23, 0xFF	; 255
 78e:	8f 4f       	sbci	r24, 0xFF	; 255
 790:	9f 4f       	sbci	r25, 0xFF	; 255
 792:	20 68       	ori	r18, 0x80	; 128
 794:	b2 2e       	mov	r11, r18
 796:	2a e0       	ldi	r18, 0x0A	; 10
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	a4 01       	movw	r20, r8
 79c:	0e 94 33 06 	call	0xc66	; 0xc66 <__ultoa_invert>
 7a0:	a8 2e       	mov	r10, r24
 7a2:	a8 18       	sub	r10, r8
 7a4:	44 c0       	rjmp	.+136    	; 0x82e <vfprintf+0x290>
 7a6:	85 37       	cpi	r24, 0x75	; 117
 7a8:	29 f4       	brne	.+10     	; 0x7b4 <vfprintf+0x216>
 7aa:	2f 7e       	andi	r18, 0xEF	; 239
 7ac:	b2 2e       	mov	r11, r18
 7ae:	2a e0       	ldi	r18, 0x0A	; 10
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	25 c0       	rjmp	.+74     	; 0x7fe <vfprintf+0x260>
 7b4:	f2 2f       	mov	r31, r18
 7b6:	f9 7f       	andi	r31, 0xF9	; 249
 7b8:	bf 2e       	mov	r11, r31
 7ba:	8f 36       	cpi	r24, 0x6F	; 111
 7bc:	c1 f0       	breq	.+48     	; 0x7ee <vfprintf+0x250>
 7be:	18 f4       	brcc	.+6      	; 0x7c6 <vfprintf+0x228>
 7c0:	88 35       	cpi	r24, 0x58	; 88
 7c2:	79 f0       	breq	.+30     	; 0x7e2 <vfprintf+0x244>
 7c4:	b4 c0       	rjmp	.+360    	; 0x92e <vfprintf+0x390>
 7c6:	80 37       	cpi	r24, 0x70	; 112
 7c8:	19 f0       	breq	.+6      	; 0x7d0 <vfprintf+0x232>
 7ca:	88 37       	cpi	r24, 0x78	; 120
 7cc:	21 f0       	breq	.+8      	; 0x7d6 <vfprintf+0x238>
 7ce:	af c0       	rjmp	.+350    	; 0x92e <vfprintf+0x390>
 7d0:	2f 2f       	mov	r18, r31
 7d2:	20 61       	ori	r18, 0x10	; 16
 7d4:	b2 2e       	mov	r11, r18
 7d6:	b4 fe       	sbrs	r11, 4
 7d8:	0d c0       	rjmp	.+26     	; 0x7f4 <vfprintf+0x256>
 7da:	8b 2d       	mov	r24, r11
 7dc:	84 60       	ori	r24, 0x04	; 4
 7de:	b8 2e       	mov	r11, r24
 7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <vfprintf+0x256>
 7e2:	24 ff       	sbrs	r18, 4
 7e4:	0a c0       	rjmp	.+20     	; 0x7fa <vfprintf+0x25c>
 7e6:	9f 2f       	mov	r25, r31
 7e8:	96 60       	ori	r25, 0x06	; 6
 7ea:	b9 2e       	mov	r11, r25
 7ec:	06 c0       	rjmp	.+12     	; 0x7fa <vfprintf+0x25c>
 7ee:	28 e0       	ldi	r18, 0x08	; 8
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	05 c0       	rjmp	.+10     	; 0x7fe <vfprintf+0x260>
 7f4:	20 e1       	ldi	r18, 0x10	; 16
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <vfprintf+0x260>
 7fa:	20 e1       	ldi	r18, 0x10	; 16
 7fc:	32 e0       	ldi	r19, 0x02	; 2
 7fe:	f8 01       	movw	r30, r16
 800:	b7 fe       	sbrs	r11, 7
 802:	07 c0       	rjmp	.+14     	; 0x812 <vfprintf+0x274>
 804:	60 81       	ld	r22, Z
 806:	71 81       	ldd	r23, Z+1	; 0x01
 808:	82 81       	ldd	r24, Z+2	; 0x02
 80a:	93 81       	ldd	r25, Z+3	; 0x03
 80c:	0c 5f       	subi	r16, 0xFC	; 252
 80e:	1f 4f       	sbci	r17, 0xFF	; 255
 810:	06 c0       	rjmp	.+12     	; 0x81e <vfprintf+0x280>
 812:	60 81       	ld	r22, Z
 814:	71 81       	ldd	r23, Z+1	; 0x01
 816:	80 e0       	ldi	r24, 0x00	; 0
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 5f       	subi	r16, 0xFE	; 254
 81c:	1f 4f       	sbci	r17, 0xFF	; 255
 81e:	a4 01       	movw	r20, r8
 820:	0e 94 33 06 	call	0xc66	; 0xc66 <__ultoa_invert>
 824:	a8 2e       	mov	r10, r24
 826:	a8 18       	sub	r10, r8
 828:	fb 2d       	mov	r31, r11
 82a:	ff 77       	andi	r31, 0x7F	; 127
 82c:	bf 2e       	mov	r11, r31
 82e:	b6 fe       	sbrs	r11, 6
 830:	0b c0       	rjmp	.+22     	; 0x848 <vfprintf+0x2aa>
 832:	2b 2d       	mov	r18, r11
 834:	2e 7f       	andi	r18, 0xFE	; 254
 836:	a5 14       	cp	r10, r5
 838:	50 f4       	brcc	.+20     	; 0x84e <vfprintf+0x2b0>
 83a:	b4 fe       	sbrs	r11, 4
 83c:	0a c0       	rjmp	.+20     	; 0x852 <vfprintf+0x2b4>
 83e:	b2 fc       	sbrc	r11, 2
 840:	08 c0       	rjmp	.+16     	; 0x852 <vfprintf+0x2b4>
 842:	2b 2d       	mov	r18, r11
 844:	2e 7e       	andi	r18, 0xEE	; 238
 846:	05 c0       	rjmp	.+10     	; 0x852 <vfprintf+0x2b4>
 848:	7a 2c       	mov	r7, r10
 84a:	2b 2d       	mov	r18, r11
 84c:	03 c0       	rjmp	.+6      	; 0x854 <vfprintf+0x2b6>
 84e:	7a 2c       	mov	r7, r10
 850:	01 c0       	rjmp	.+2      	; 0x854 <vfprintf+0x2b6>
 852:	75 2c       	mov	r7, r5
 854:	24 ff       	sbrs	r18, 4
 856:	0d c0       	rjmp	.+26     	; 0x872 <vfprintf+0x2d4>
 858:	fe 01       	movw	r30, r28
 85a:	ea 0d       	add	r30, r10
 85c:	f1 1d       	adc	r31, r1
 85e:	80 81       	ld	r24, Z
 860:	80 33       	cpi	r24, 0x30	; 48
 862:	11 f4       	brne	.+4      	; 0x868 <vfprintf+0x2ca>
 864:	29 7e       	andi	r18, 0xE9	; 233
 866:	09 c0       	rjmp	.+18     	; 0x87a <vfprintf+0x2dc>
 868:	22 ff       	sbrs	r18, 2
 86a:	06 c0       	rjmp	.+12     	; 0x878 <vfprintf+0x2da>
 86c:	73 94       	inc	r7
 86e:	73 94       	inc	r7
 870:	04 c0       	rjmp	.+8      	; 0x87a <vfprintf+0x2dc>
 872:	82 2f       	mov	r24, r18
 874:	86 78       	andi	r24, 0x86	; 134
 876:	09 f0       	breq	.+2      	; 0x87a <vfprintf+0x2dc>
 878:	73 94       	inc	r7
 87a:	23 fd       	sbrc	r18, 3
 87c:	13 c0       	rjmp	.+38     	; 0x8a4 <vfprintf+0x306>
 87e:	20 ff       	sbrs	r18, 0
 880:	06 c0       	rjmp	.+12     	; 0x88e <vfprintf+0x2f0>
 882:	5a 2c       	mov	r5, r10
 884:	73 14       	cp	r7, r3
 886:	18 f4       	brcc	.+6      	; 0x88e <vfprintf+0x2f0>
 888:	53 0c       	add	r5, r3
 88a:	57 18       	sub	r5, r7
 88c:	73 2c       	mov	r7, r3
 88e:	73 14       	cp	r7, r3
 890:	68 f4       	brcc	.+26     	; 0x8ac <vfprintf+0x30e>
 892:	b7 01       	movw	r22, r14
 894:	80 e2       	ldi	r24, 0x20	; 32
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	2c 87       	std	Y+12, r18	; 0x0c
 89a:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 89e:	73 94       	inc	r7
 8a0:	2c 85       	ldd	r18, Y+12	; 0x0c
 8a2:	f5 cf       	rjmp	.-22     	; 0x88e <vfprintf+0x2f0>
 8a4:	73 14       	cp	r7, r3
 8a6:	10 f4       	brcc	.+4      	; 0x8ac <vfprintf+0x30e>
 8a8:	37 18       	sub	r3, r7
 8aa:	01 c0       	rjmp	.+2      	; 0x8ae <vfprintf+0x310>
 8ac:	31 2c       	mov	r3, r1
 8ae:	24 ff       	sbrs	r18, 4
 8b0:	12 c0       	rjmp	.+36     	; 0x8d6 <vfprintf+0x338>
 8b2:	b7 01       	movw	r22, r14
 8b4:	80 e3       	ldi	r24, 0x30	; 48
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	2c 87       	std	Y+12, r18	; 0x0c
 8ba:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 8be:	2c 85       	ldd	r18, Y+12	; 0x0c
 8c0:	22 ff       	sbrs	r18, 2
 8c2:	17 c0       	rjmp	.+46     	; 0x8f2 <vfprintf+0x354>
 8c4:	21 ff       	sbrs	r18, 1
 8c6:	03 c0       	rjmp	.+6      	; 0x8ce <vfprintf+0x330>
 8c8:	88 e5       	ldi	r24, 0x58	; 88
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <vfprintf+0x334>
 8ce:	88 e7       	ldi	r24, 0x78	; 120
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	b7 01       	movw	r22, r14
 8d4:	0c c0       	rjmp	.+24     	; 0x8ee <vfprintf+0x350>
 8d6:	82 2f       	mov	r24, r18
 8d8:	86 78       	andi	r24, 0x86	; 134
 8da:	59 f0       	breq	.+22     	; 0x8f2 <vfprintf+0x354>
 8dc:	21 fd       	sbrc	r18, 1
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <vfprintf+0x346>
 8e0:	80 e2       	ldi	r24, 0x20	; 32
 8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <vfprintf+0x348>
 8e4:	8b e2       	ldi	r24, 0x2B	; 43
 8e6:	27 fd       	sbrc	r18, 7
 8e8:	8d e2       	ldi	r24, 0x2D	; 45
 8ea:	b7 01       	movw	r22, r14
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 8f2:	a5 14       	cp	r10, r5
 8f4:	38 f4       	brcc	.+14     	; 0x904 <vfprintf+0x366>
 8f6:	b7 01       	movw	r22, r14
 8f8:	80 e3       	ldi	r24, 0x30	; 48
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 900:	5a 94       	dec	r5
 902:	f7 cf       	rjmp	.-18     	; 0x8f2 <vfprintf+0x354>
 904:	aa 94       	dec	r10
 906:	f4 01       	movw	r30, r8
 908:	ea 0d       	add	r30, r10
 90a:	f1 1d       	adc	r31, r1
 90c:	80 81       	ld	r24, Z
 90e:	b7 01       	movw	r22, r14
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 916:	a1 10       	cpse	r10, r1
 918:	f5 cf       	rjmp	.-22     	; 0x904 <vfprintf+0x366>
 91a:	33 20       	and	r3, r3
 91c:	09 f4       	brne	.+2      	; 0x920 <vfprintf+0x382>
 91e:	51 ce       	rjmp	.-862    	; 0x5c2 <vfprintf+0x24>
 920:	b7 01       	movw	r22, r14
 922:	80 e2       	ldi	r24, 0x20	; 32
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 92a:	3a 94       	dec	r3
 92c:	f6 cf       	rjmp	.-20     	; 0x91a <vfprintf+0x37c>
 92e:	f7 01       	movw	r30, r14
 930:	86 81       	ldd	r24, Z+6	; 0x06
 932:	97 81       	ldd	r25, Z+7	; 0x07
 934:	02 c0       	rjmp	.+4      	; 0x93a <vfprintf+0x39c>
 936:	8f ef       	ldi	r24, 0xFF	; 255
 938:	9f ef       	ldi	r25, 0xFF	; 255
 93a:	2c 96       	adiw	r28, 0x0c	; 12
 93c:	e2 e1       	ldi	r30, 0x12	; 18
 93e:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__epilogue_restores__>

00000942 <calloc>:
 942:	0f 93       	push	r16
 944:	1f 93       	push	r17
 946:	cf 93       	push	r28
 948:	df 93       	push	r29
 94a:	86 9f       	mul	r24, r22
 94c:	80 01       	movw	r16, r0
 94e:	87 9f       	mul	r24, r23
 950:	10 0d       	add	r17, r0
 952:	96 9f       	mul	r25, r22
 954:	10 0d       	add	r17, r0
 956:	11 24       	eor	r1, r1
 958:	c8 01       	movw	r24, r16
 95a:	0e 94 bd 04 	call	0x97a	; 0x97a <malloc>
 95e:	ec 01       	movw	r28, r24
 960:	00 97       	sbiw	r24, 0x00	; 0
 962:	29 f0       	breq	.+10     	; 0x96e <calloc+0x2c>
 964:	a8 01       	movw	r20, r16
 966:	60 e0       	ldi	r22, 0x00	; 0
 968:	70 e0       	ldi	r23, 0x00	; 0
 96a:	0e 94 ef 05 	call	0xbde	; 0xbde <memset>
 96e:	ce 01       	movw	r24, r28
 970:	df 91       	pop	r29
 972:	cf 91       	pop	r28
 974:	1f 91       	pop	r17
 976:	0f 91       	pop	r16
 978:	08 95       	ret

0000097a <malloc>:
 97a:	cf 93       	push	r28
 97c:	df 93       	push	r29
 97e:	82 30       	cpi	r24, 0x02	; 2
 980:	91 05       	cpc	r25, r1
 982:	10 f4       	brcc	.+4      	; 0x988 <malloc+0xe>
 984:	82 e0       	ldi	r24, 0x02	; 2
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	e0 91 7a 01 	lds	r30, 0x017A
 98c:	f0 91 7b 01 	lds	r31, 0x017B
 990:	20 e0       	ldi	r18, 0x00	; 0
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	a0 e0       	ldi	r26, 0x00	; 0
 996:	b0 e0       	ldi	r27, 0x00	; 0
 998:	30 97       	sbiw	r30, 0x00	; 0
 99a:	39 f1       	breq	.+78     	; 0x9ea <malloc+0x70>
 99c:	40 81       	ld	r20, Z
 99e:	51 81       	ldd	r21, Z+1	; 0x01
 9a0:	48 17       	cp	r20, r24
 9a2:	59 07       	cpc	r21, r25
 9a4:	b8 f0       	brcs	.+46     	; 0x9d4 <malloc+0x5a>
 9a6:	48 17       	cp	r20, r24
 9a8:	59 07       	cpc	r21, r25
 9aa:	71 f4       	brne	.+28     	; 0x9c8 <malloc+0x4e>
 9ac:	82 81       	ldd	r24, Z+2	; 0x02
 9ae:	93 81       	ldd	r25, Z+3	; 0x03
 9b0:	10 97       	sbiw	r26, 0x00	; 0
 9b2:	29 f0       	breq	.+10     	; 0x9be <malloc+0x44>
 9b4:	13 96       	adiw	r26, 0x03	; 3
 9b6:	9c 93       	st	X, r25
 9b8:	8e 93       	st	-X, r24
 9ba:	12 97       	sbiw	r26, 0x02	; 2
 9bc:	2c c0       	rjmp	.+88     	; 0xa16 <malloc+0x9c>
 9be:	90 93 7b 01 	sts	0x017B, r25
 9c2:	80 93 7a 01 	sts	0x017A, r24
 9c6:	27 c0       	rjmp	.+78     	; 0xa16 <malloc+0x9c>
 9c8:	21 15       	cp	r18, r1
 9ca:	31 05       	cpc	r19, r1
 9cc:	31 f0       	breq	.+12     	; 0x9da <malloc+0x60>
 9ce:	42 17       	cp	r20, r18
 9d0:	53 07       	cpc	r21, r19
 9d2:	18 f0       	brcs	.+6      	; 0x9da <malloc+0x60>
 9d4:	a9 01       	movw	r20, r18
 9d6:	db 01       	movw	r26, r22
 9d8:	01 c0       	rjmp	.+2      	; 0x9dc <malloc+0x62>
 9da:	ef 01       	movw	r28, r30
 9dc:	9a 01       	movw	r18, r20
 9de:	bd 01       	movw	r22, r26
 9e0:	df 01       	movw	r26, r30
 9e2:	02 80       	ldd	r0, Z+2	; 0x02
 9e4:	f3 81       	ldd	r31, Z+3	; 0x03
 9e6:	e0 2d       	mov	r30, r0
 9e8:	d7 cf       	rjmp	.-82     	; 0x998 <malloc+0x1e>
 9ea:	21 15       	cp	r18, r1
 9ec:	31 05       	cpc	r19, r1
 9ee:	f9 f0       	breq	.+62     	; 0xa2e <malloc+0xb4>
 9f0:	28 1b       	sub	r18, r24
 9f2:	39 0b       	sbc	r19, r25
 9f4:	24 30       	cpi	r18, 0x04	; 4
 9f6:	31 05       	cpc	r19, r1
 9f8:	80 f4       	brcc	.+32     	; 0xa1a <malloc+0xa0>
 9fa:	8a 81       	ldd	r24, Y+2	; 0x02
 9fc:	9b 81       	ldd	r25, Y+3	; 0x03
 9fe:	61 15       	cp	r22, r1
 a00:	71 05       	cpc	r23, r1
 a02:	21 f0       	breq	.+8      	; 0xa0c <malloc+0x92>
 a04:	fb 01       	movw	r30, r22
 a06:	93 83       	std	Z+3, r25	; 0x03
 a08:	82 83       	std	Z+2, r24	; 0x02
 a0a:	04 c0       	rjmp	.+8      	; 0xa14 <malloc+0x9a>
 a0c:	90 93 7b 01 	sts	0x017B, r25
 a10:	80 93 7a 01 	sts	0x017A, r24
 a14:	fe 01       	movw	r30, r28
 a16:	32 96       	adiw	r30, 0x02	; 2
 a18:	44 c0       	rjmp	.+136    	; 0xaa2 <malloc+0x128>
 a1a:	fe 01       	movw	r30, r28
 a1c:	e2 0f       	add	r30, r18
 a1e:	f3 1f       	adc	r31, r19
 a20:	81 93       	st	Z+, r24
 a22:	91 93       	st	Z+, r25
 a24:	22 50       	subi	r18, 0x02	; 2
 a26:	31 09       	sbc	r19, r1
 a28:	39 83       	std	Y+1, r19	; 0x01
 a2a:	28 83       	st	Y, r18
 a2c:	3a c0       	rjmp	.+116    	; 0xaa2 <malloc+0x128>
 a2e:	20 91 78 01 	lds	r18, 0x0178
 a32:	30 91 79 01 	lds	r19, 0x0179
 a36:	23 2b       	or	r18, r19
 a38:	41 f4       	brne	.+16     	; 0xa4a <malloc+0xd0>
 a3a:	20 91 02 01 	lds	r18, 0x0102
 a3e:	30 91 03 01 	lds	r19, 0x0103
 a42:	30 93 79 01 	sts	0x0179, r19
 a46:	20 93 78 01 	sts	0x0178, r18
 a4a:	20 91 00 01 	lds	r18, 0x0100
 a4e:	30 91 01 01 	lds	r19, 0x0101
 a52:	21 15       	cp	r18, r1
 a54:	31 05       	cpc	r19, r1
 a56:	41 f4       	brne	.+16     	; 0xa68 <malloc+0xee>
 a58:	2d b7       	in	r18, 0x3d	; 61
 a5a:	3e b7       	in	r19, 0x3e	; 62
 a5c:	40 91 04 01 	lds	r20, 0x0104
 a60:	50 91 05 01 	lds	r21, 0x0105
 a64:	24 1b       	sub	r18, r20
 a66:	35 0b       	sbc	r19, r21
 a68:	e0 91 78 01 	lds	r30, 0x0178
 a6c:	f0 91 79 01 	lds	r31, 0x0179
 a70:	e2 17       	cp	r30, r18
 a72:	f3 07       	cpc	r31, r19
 a74:	a0 f4       	brcc	.+40     	; 0xa9e <malloc+0x124>
 a76:	2e 1b       	sub	r18, r30
 a78:	3f 0b       	sbc	r19, r31
 a7a:	28 17       	cp	r18, r24
 a7c:	39 07       	cpc	r19, r25
 a7e:	78 f0       	brcs	.+30     	; 0xa9e <malloc+0x124>
 a80:	ac 01       	movw	r20, r24
 a82:	4e 5f       	subi	r20, 0xFE	; 254
 a84:	5f 4f       	sbci	r21, 0xFF	; 255
 a86:	24 17       	cp	r18, r20
 a88:	35 07       	cpc	r19, r21
 a8a:	48 f0       	brcs	.+18     	; 0xa9e <malloc+0x124>
 a8c:	4e 0f       	add	r20, r30
 a8e:	5f 1f       	adc	r21, r31
 a90:	50 93 79 01 	sts	0x0179, r21
 a94:	40 93 78 01 	sts	0x0178, r20
 a98:	81 93       	st	Z+, r24
 a9a:	91 93       	st	Z+, r25
 a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <malloc+0x128>
 a9e:	e0 e0       	ldi	r30, 0x00	; 0
 aa0:	f0 e0       	ldi	r31, 0x00	; 0
 aa2:	cf 01       	movw	r24, r30
 aa4:	df 91       	pop	r29
 aa6:	cf 91       	pop	r28
 aa8:	08 95       	ret

00000aaa <free>:
 aaa:	cf 93       	push	r28
 aac:	df 93       	push	r29
 aae:	00 97       	sbiw	r24, 0x00	; 0
 ab0:	09 f4       	brne	.+2      	; 0xab4 <free+0xa>
 ab2:	87 c0       	rjmp	.+270    	; 0xbc2 <free+0x118>
 ab4:	fc 01       	movw	r30, r24
 ab6:	32 97       	sbiw	r30, 0x02	; 2
 ab8:	13 82       	std	Z+3, r1	; 0x03
 aba:	12 82       	std	Z+2, r1	; 0x02
 abc:	c0 91 7a 01 	lds	r28, 0x017A
 ac0:	d0 91 7b 01 	lds	r29, 0x017B
 ac4:	20 97       	sbiw	r28, 0x00	; 0
 ac6:	81 f4       	brne	.+32     	; 0xae8 <free+0x3e>
 ac8:	20 81       	ld	r18, Z
 aca:	31 81       	ldd	r19, Z+1	; 0x01
 acc:	28 0f       	add	r18, r24
 ace:	39 1f       	adc	r19, r25
 ad0:	80 91 78 01 	lds	r24, 0x0178
 ad4:	90 91 79 01 	lds	r25, 0x0179
 ad8:	82 17       	cp	r24, r18
 ada:	93 07       	cpc	r25, r19
 adc:	79 f5       	brne	.+94     	; 0xb3c <free+0x92>
 ade:	f0 93 79 01 	sts	0x0179, r31
 ae2:	e0 93 78 01 	sts	0x0178, r30
 ae6:	6d c0       	rjmp	.+218    	; 0xbc2 <free+0x118>
 ae8:	de 01       	movw	r26, r28
 aea:	20 e0       	ldi	r18, 0x00	; 0
 aec:	30 e0       	ldi	r19, 0x00	; 0
 aee:	ae 17       	cp	r26, r30
 af0:	bf 07       	cpc	r27, r31
 af2:	50 f4       	brcc	.+20     	; 0xb08 <free+0x5e>
 af4:	12 96       	adiw	r26, 0x02	; 2
 af6:	4d 91       	ld	r20, X+
 af8:	5c 91       	ld	r21, X
 afa:	13 97       	sbiw	r26, 0x03	; 3
 afc:	9d 01       	movw	r18, r26
 afe:	41 15       	cp	r20, r1
 b00:	51 05       	cpc	r21, r1
 b02:	09 f1       	breq	.+66     	; 0xb46 <free+0x9c>
 b04:	da 01       	movw	r26, r20
 b06:	f3 cf       	rjmp	.-26     	; 0xaee <free+0x44>
 b08:	b3 83       	std	Z+3, r27	; 0x03
 b0a:	a2 83       	std	Z+2, r26	; 0x02
 b0c:	40 81       	ld	r20, Z
 b0e:	51 81       	ldd	r21, Z+1	; 0x01
 b10:	84 0f       	add	r24, r20
 b12:	95 1f       	adc	r25, r21
 b14:	8a 17       	cp	r24, r26
 b16:	9b 07       	cpc	r25, r27
 b18:	71 f4       	brne	.+28     	; 0xb36 <free+0x8c>
 b1a:	8d 91       	ld	r24, X+
 b1c:	9c 91       	ld	r25, X
 b1e:	11 97       	sbiw	r26, 0x01	; 1
 b20:	84 0f       	add	r24, r20
 b22:	95 1f       	adc	r25, r21
 b24:	02 96       	adiw	r24, 0x02	; 2
 b26:	91 83       	std	Z+1, r25	; 0x01
 b28:	80 83       	st	Z, r24
 b2a:	12 96       	adiw	r26, 0x02	; 2
 b2c:	8d 91       	ld	r24, X+
 b2e:	9c 91       	ld	r25, X
 b30:	13 97       	sbiw	r26, 0x03	; 3
 b32:	93 83       	std	Z+3, r25	; 0x03
 b34:	82 83       	std	Z+2, r24	; 0x02
 b36:	21 15       	cp	r18, r1
 b38:	31 05       	cpc	r19, r1
 b3a:	29 f4       	brne	.+10     	; 0xb46 <free+0x9c>
 b3c:	f0 93 7b 01 	sts	0x017B, r31
 b40:	e0 93 7a 01 	sts	0x017A, r30
 b44:	3e c0       	rjmp	.+124    	; 0xbc2 <free+0x118>
 b46:	d9 01       	movw	r26, r18
 b48:	13 96       	adiw	r26, 0x03	; 3
 b4a:	fc 93       	st	X, r31
 b4c:	ee 93       	st	-X, r30
 b4e:	12 97       	sbiw	r26, 0x02	; 2
 b50:	4d 91       	ld	r20, X+
 b52:	5d 91       	ld	r21, X+
 b54:	a4 0f       	add	r26, r20
 b56:	b5 1f       	adc	r27, r21
 b58:	ea 17       	cp	r30, r26
 b5a:	fb 07       	cpc	r31, r27
 b5c:	79 f4       	brne	.+30     	; 0xb7c <free+0xd2>
 b5e:	80 81       	ld	r24, Z
 b60:	91 81       	ldd	r25, Z+1	; 0x01
 b62:	84 0f       	add	r24, r20
 b64:	95 1f       	adc	r25, r21
 b66:	02 96       	adiw	r24, 0x02	; 2
 b68:	d9 01       	movw	r26, r18
 b6a:	11 96       	adiw	r26, 0x01	; 1
 b6c:	9c 93       	st	X, r25
 b6e:	8e 93       	st	-X, r24
 b70:	82 81       	ldd	r24, Z+2	; 0x02
 b72:	93 81       	ldd	r25, Z+3	; 0x03
 b74:	13 96       	adiw	r26, 0x03	; 3
 b76:	9c 93       	st	X, r25
 b78:	8e 93       	st	-X, r24
 b7a:	12 97       	sbiw	r26, 0x02	; 2
 b7c:	e0 e0       	ldi	r30, 0x00	; 0
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
 b80:	8a 81       	ldd	r24, Y+2	; 0x02
 b82:	9b 81       	ldd	r25, Y+3	; 0x03
 b84:	00 97       	sbiw	r24, 0x00	; 0
 b86:	19 f0       	breq	.+6      	; 0xb8e <free+0xe4>
 b88:	fe 01       	movw	r30, r28
 b8a:	ec 01       	movw	r28, r24
 b8c:	f9 cf       	rjmp	.-14     	; 0xb80 <free+0xd6>
 b8e:	ce 01       	movw	r24, r28
 b90:	02 96       	adiw	r24, 0x02	; 2
 b92:	28 81       	ld	r18, Y
 b94:	39 81       	ldd	r19, Y+1	; 0x01
 b96:	82 0f       	add	r24, r18
 b98:	93 1f       	adc	r25, r19
 b9a:	20 91 78 01 	lds	r18, 0x0178
 b9e:	30 91 79 01 	lds	r19, 0x0179
 ba2:	28 17       	cp	r18, r24
 ba4:	39 07       	cpc	r19, r25
 ba6:	69 f4       	brne	.+26     	; 0xbc2 <free+0x118>
 ba8:	30 97       	sbiw	r30, 0x00	; 0
 baa:	29 f4       	brne	.+10     	; 0xbb6 <free+0x10c>
 bac:	10 92 7b 01 	sts	0x017B, r1
 bb0:	10 92 7a 01 	sts	0x017A, r1
 bb4:	02 c0       	rjmp	.+4      	; 0xbba <free+0x110>
 bb6:	13 82       	std	Z+3, r1	; 0x03
 bb8:	12 82       	std	Z+2, r1	; 0x02
 bba:	d0 93 79 01 	sts	0x0179, r29
 bbe:	c0 93 78 01 	sts	0x0178, r28
 bc2:	df 91       	pop	r29
 bc4:	cf 91       	pop	r28
 bc6:	08 95       	ret

00000bc8 <strnlen_P>:
 bc8:	fc 01       	movw	r30, r24
 bca:	05 90       	lpm	r0, Z+
 bcc:	61 50       	subi	r22, 0x01	; 1
 bce:	70 40       	sbci	r23, 0x00	; 0
 bd0:	01 10       	cpse	r0, r1
 bd2:	d8 f7       	brcc	.-10     	; 0xbca <strnlen_P+0x2>
 bd4:	80 95       	com	r24
 bd6:	90 95       	com	r25
 bd8:	8e 0f       	add	r24, r30
 bda:	9f 1f       	adc	r25, r31
 bdc:	08 95       	ret

00000bde <memset>:
 bde:	dc 01       	movw	r26, r24
 be0:	01 c0       	rjmp	.+2      	; 0xbe4 <memset+0x6>
 be2:	6d 93       	st	X+, r22
 be4:	41 50       	subi	r20, 0x01	; 1
 be6:	50 40       	sbci	r21, 0x00	; 0
 be8:	e0 f7       	brcc	.-8      	; 0xbe2 <memset+0x4>
 bea:	08 95       	ret

00000bec <strnlen>:
 bec:	fc 01       	movw	r30, r24
 bee:	61 50       	subi	r22, 0x01	; 1
 bf0:	70 40       	sbci	r23, 0x00	; 0
 bf2:	01 90       	ld	r0, Z+
 bf4:	01 10       	cpse	r0, r1
 bf6:	d8 f7       	brcc	.-10     	; 0xbee <strnlen+0x2>
 bf8:	80 95       	com	r24
 bfa:	90 95       	com	r25
 bfc:	8e 0f       	add	r24, r30
 bfe:	9f 1f       	adc	r25, r31
 c00:	08 95       	ret

00000c02 <fputc>:
 c02:	0f 93       	push	r16
 c04:	1f 93       	push	r17
 c06:	cf 93       	push	r28
 c08:	df 93       	push	r29
 c0a:	18 2f       	mov	r17, r24
 c0c:	09 2f       	mov	r16, r25
 c0e:	eb 01       	movw	r28, r22
 c10:	8b 81       	ldd	r24, Y+3	; 0x03
 c12:	81 fd       	sbrc	r24, 1
 c14:	03 c0       	rjmp	.+6      	; 0xc1c <fputc+0x1a>
 c16:	8f ef       	ldi	r24, 0xFF	; 255
 c18:	9f ef       	ldi	r25, 0xFF	; 255
 c1a:	20 c0       	rjmp	.+64     	; 0xc5c <fputc+0x5a>
 c1c:	82 ff       	sbrs	r24, 2
 c1e:	10 c0       	rjmp	.+32     	; 0xc40 <fputc+0x3e>
 c20:	4e 81       	ldd	r20, Y+6	; 0x06
 c22:	5f 81       	ldd	r21, Y+7	; 0x07
 c24:	2c 81       	ldd	r18, Y+4	; 0x04
 c26:	3d 81       	ldd	r19, Y+5	; 0x05
 c28:	42 17       	cp	r20, r18
 c2a:	53 07       	cpc	r21, r19
 c2c:	7c f4       	brge	.+30     	; 0xc4c <fputc+0x4a>
 c2e:	e8 81       	ld	r30, Y
 c30:	f9 81       	ldd	r31, Y+1	; 0x01
 c32:	9f 01       	movw	r18, r30
 c34:	2f 5f       	subi	r18, 0xFF	; 255
 c36:	3f 4f       	sbci	r19, 0xFF	; 255
 c38:	39 83       	std	Y+1, r19	; 0x01
 c3a:	28 83       	st	Y, r18
 c3c:	10 83       	st	Z, r17
 c3e:	06 c0       	rjmp	.+12     	; 0xc4c <fputc+0x4a>
 c40:	e8 85       	ldd	r30, Y+8	; 0x08
 c42:	f9 85       	ldd	r31, Y+9	; 0x09
 c44:	81 2f       	mov	r24, r17
 c46:	09 95       	icall
 c48:	89 2b       	or	r24, r25
 c4a:	29 f7       	brne	.-54     	; 0xc16 <fputc+0x14>
 c4c:	2e 81       	ldd	r18, Y+6	; 0x06
 c4e:	3f 81       	ldd	r19, Y+7	; 0x07
 c50:	2f 5f       	subi	r18, 0xFF	; 255
 c52:	3f 4f       	sbci	r19, 0xFF	; 255
 c54:	3f 83       	std	Y+7, r19	; 0x07
 c56:	2e 83       	std	Y+6, r18	; 0x06
 c58:	81 2f       	mov	r24, r17
 c5a:	90 2f       	mov	r25, r16
 c5c:	df 91       	pop	r29
 c5e:	cf 91       	pop	r28
 c60:	1f 91       	pop	r17
 c62:	0f 91       	pop	r16
 c64:	08 95       	ret

00000c66 <__ultoa_invert>:
 c66:	fa 01       	movw	r30, r20
 c68:	aa 27       	eor	r26, r26
 c6a:	28 30       	cpi	r18, 0x08	; 8
 c6c:	51 f1       	breq	.+84     	; 0xcc2 <__ultoa_invert+0x5c>
 c6e:	20 31       	cpi	r18, 0x10	; 16
 c70:	81 f1       	breq	.+96     	; 0xcd2 <__ultoa_invert+0x6c>
 c72:	e8 94       	clt
 c74:	6f 93       	push	r22
 c76:	6e 7f       	andi	r22, 0xFE	; 254
 c78:	6e 5f       	subi	r22, 0xFE	; 254
 c7a:	7f 4f       	sbci	r23, 0xFF	; 255
 c7c:	8f 4f       	sbci	r24, 0xFF	; 255
 c7e:	9f 4f       	sbci	r25, 0xFF	; 255
 c80:	af 4f       	sbci	r26, 0xFF	; 255
 c82:	b1 e0       	ldi	r27, 0x01	; 1
 c84:	3e d0       	rcall	.+124    	; 0xd02 <__ultoa_invert+0x9c>
 c86:	b4 e0       	ldi	r27, 0x04	; 4
 c88:	3c d0       	rcall	.+120    	; 0xd02 <__ultoa_invert+0x9c>
 c8a:	67 0f       	add	r22, r23
 c8c:	78 1f       	adc	r23, r24
 c8e:	89 1f       	adc	r24, r25
 c90:	9a 1f       	adc	r25, r26
 c92:	a1 1d       	adc	r26, r1
 c94:	68 0f       	add	r22, r24
 c96:	79 1f       	adc	r23, r25
 c98:	8a 1f       	adc	r24, r26
 c9a:	91 1d       	adc	r25, r1
 c9c:	a1 1d       	adc	r26, r1
 c9e:	6a 0f       	add	r22, r26
 ca0:	71 1d       	adc	r23, r1
 ca2:	81 1d       	adc	r24, r1
 ca4:	91 1d       	adc	r25, r1
 ca6:	a1 1d       	adc	r26, r1
 ca8:	20 d0       	rcall	.+64     	; 0xcea <__ultoa_invert+0x84>
 caa:	09 f4       	brne	.+2      	; 0xcae <__ultoa_invert+0x48>
 cac:	68 94       	set
 cae:	3f 91       	pop	r19
 cb0:	2a e0       	ldi	r18, 0x0A	; 10
 cb2:	26 9f       	mul	r18, r22
 cb4:	11 24       	eor	r1, r1
 cb6:	30 19       	sub	r19, r0
 cb8:	30 5d       	subi	r19, 0xD0	; 208
 cba:	31 93       	st	Z+, r19
 cbc:	de f6       	brtc	.-74     	; 0xc74 <__ultoa_invert+0xe>
 cbe:	cf 01       	movw	r24, r30
 cc0:	08 95       	ret
 cc2:	46 2f       	mov	r20, r22
 cc4:	47 70       	andi	r20, 0x07	; 7
 cc6:	40 5d       	subi	r20, 0xD0	; 208
 cc8:	41 93       	st	Z+, r20
 cca:	b3 e0       	ldi	r27, 0x03	; 3
 ccc:	0f d0       	rcall	.+30     	; 0xcec <__ultoa_invert+0x86>
 cce:	c9 f7       	brne	.-14     	; 0xcc2 <__ultoa_invert+0x5c>
 cd0:	f6 cf       	rjmp	.-20     	; 0xcbe <__ultoa_invert+0x58>
 cd2:	46 2f       	mov	r20, r22
 cd4:	4f 70       	andi	r20, 0x0F	; 15
 cd6:	40 5d       	subi	r20, 0xD0	; 208
 cd8:	4a 33       	cpi	r20, 0x3A	; 58
 cda:	18 f0       	brcs	.+6      	; 0xce2 <__ultoa_invert+0x7c>
 cdc:	49 5d       	subi	r20, 0xD9	; 217
 cde:	31 fd       	sbrc	r19, 1
 ce0:	40 52       	subi	r20, 0x20	; 32
 ce2:	41 93       	st	Z+, r20
 ce4:	02 d0       	rcall	.+4      	; 0xcea <__ultoa_invert+0x84>
 ce6:	a9 f7       	brne	.-22     	; 0xcd2 <__ultoa_invert+0x6c>
 ce8:	ea cf       	rjmp	.-44     	; 0xcbe <__ultoa_invert+0x58>
 cea:	b4 e0       	ldi	r27, 0x04	; 4
 cec:	a6 95       	lsr	r26
 cee:	97 95       	ror	r25
 cf0:	87 95       	ror	r24
 cf2:	77 95       	ror	r23
 cf4:	67 95       	ror	r22
 cf6:	ba 95       	dec	r27
 cf8:	c9 f7       	brne	.-14     	; 0xcec <__ultoa_invert+0x86>
 cfa:	00 97       	sbiw	r24, 0x00	; 0
 cfc:	61 05       	cpc	r22, r1
 cfe:	71 05       	cpc	r23, r1
 d00:	08 95       	ret
 d02:	9b 01       	movw	r18, r22
 d04:	ac 01       	movw	r20, r24
 d06:	0a 2e       	mov	r0, r26
 d08:	06 94       	lsr	r0
 d0a:	57 95       	ror	r21
 d0c:	47 95       	ror	r20
 d0e:	37 95       	ror	r19
 d10:	27 95       	ror	r18
 d12:	ba 95       	dec	r27
 d14:	c9 f7       	brne	.-14     	; 0xd08 <__ultoa_invert+0xa2>
 d16:	62 0f       	add	r22, r18
 d18:	73 1f       	adc	r23, r19
 d1a:	84 1f       	adc	r24, r20
 d1c:	95 1f       	adc	r25, r21
 d1e:	a0 1d       	adc	r26, r0
 d20:	08 95       	ret

00000d22 <__prologue_saves__>:
 d22:	2f 92       	push	r2
 d24:	3f 92       	push	r3
 d26:	4f 92       	push	r4
 d28:	5f 92       	push	r5
 d2a:	6f 92       	push	r6
 d2c:	7f 92       	push	r7
 d2e:	8f 92       	push	r8
 d30:	9f 92       	push	r9
 d32:	af 92       	push	r10
 d34:	bf 92       	push	r11
 d36:	cf 92       	push	r12
 d38:	df 92       	push	r13
 d3a:	ef 92       	push	r14
 d3c:	ff 92       	push	r15
 d3e:	0f 93       	push	r16
 d40:	1f 93       	push	r17
 d42:	cf 93       	push	r28
 d44:	df 93       	push	r29
 d46:	cd b7       	in	r28, 0x3d	; 61
 d48:	de b7       	in	r29, 0x3e	; 62
 d4a:	ca 1b       	sub	r28, r26
 d4c:	db 0b       	sbc	r29, r27
 d4e:	0f b6       	in	r0, 0x3f	; 63
 d50:	f8 94       	cli
 d52:	de bf       	out	0x3e, r29	; 62
 d54:	0f be       	out	0x3f, r0	; 63
 d56:	cd bf       	out	0x3d, r28	; 61
 d58:	09 94       	ijmp

00000d5a <__epilogue_restores__>:
 d5a:	2a 88       	ldd	r2, Y+18	; 0x12
 d5c:	39 88       	ldd	r3, Y+17	; 0x11
 d5e:	48 88       	ldd	r4, Y+16	; 0x10
 d60:	5f 84       	ldd	r5, Y+15	; 0x0f
 d62:	6e 84       	ldd	r6, Y+14	; 0x0e
 d64:	7d 84       	ldd	r7, Y+13	; 0x0d
 d66:	8c 84       	ldd	r8, Y+12	; 0x0c
 d68:	9b 84       	ldd	r9, Y+11	; 0x0b
 d6a:	aa 84       	ldd	r10, Y+10	; 0x0a
 d6c:	b9 84       	ldd	r11, Y+9	; 0x09
 d6e:	c8 84       	ldd	r12, Y+8	; 0x08
 d70:	df 80       	ldd	r13, Y+7	; 0x07
 d72:	ee 80       	ldd	r14, Y+6	; 0x06
 d74:	fd 80       	ldd	r15, Y+5	; 0x05
 d76:	0c 81       	ldd	r16, Y+4	; 0x04
 d78:	1b 81       	ldd	r17, Y+3	; 0x03
 d7a:	aa 81       	ldd	r26, Y+2	; 0x02
 d7c:	b9 81       	ldd	r27, Y+1	; 0x01
 d7e:	ce 0f       	add	r28, r30
 d80:	d1 1d       	adc	r29, r1
 d82:	0f b6       	in	r0, 0x3f	; 63
 d84:	f8 94       	cli
 d86:	de bf       	out	0x3e, r29	; 62
 d88:	0f be       	out	0x3f, r0	; 63
 d8a:	cd bf       	out	0x3d, r28	; 61
 d8c:	ed 01       	movw	r28, r26
 d8e:	08 95       	ret

00000d90 <_exit>:
 d90:	f8 94       	cli

00000d92 <__stop_program>:
 d92:	ff cf       	rjmp	.-2      	; 0xd92 <__stop_program>
