
Oving1_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000009ac  00000a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800106  00800106  00000a46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000238  00000000  00000000  00000a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001da0  00000000  00000000  00000cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b09  00000000  00000000  00002a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a7a  00000000  00000000  00003557  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000058c  00000000  00000000  00003fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000601  00000000  00000000  00004560  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bef  00000000  00000000  00004b61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  00005750  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_1>
   8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_2>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec ea       	ldi	r30, 0xAC	; 172
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 36       	cpi	r26, 0x6A	; 106
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 00 03 	call	0x600	; 0x600 <main>
  a6:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:
	}
	
	//MUST clear RXB0IF after reading message
	bit_modify_MCP2515(MCP_CANINTF, 0,0x00);
	
	return msg;
  ae:	0e 94 7d 01 	call	0x2fa	; 0x2fa <MCP2515_init>
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	60 ee       	ldi	r22, 0xE0	; 224
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <bit_modify_MCP2515>
  bc:	4f ef       	ldi	r20, 0xFF	; 255
}
  be:	60 e6       	ldi	r22, 0x60	; 96
  c0:	80 e6       	ldi	r24, 0x60	; 96
  c2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <bit_modify_MCP2515>
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	64 e0       	ldi	r22, 0x04	; 4
  ca:	80 e6       	ldi	r24, 0x60	; 96
  cc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <bit_modify_MCP2515>
  d0:	4f ef       	ldi	r20, 0xFF	; 255
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	8b e2       	ldi	r24, 0x2B	; 43
  d6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <bit_modify_MCP2515>
  da:	08 95       	ret

000000dc <send_CAN_message>:
  dc:	8f 92       	push	r8

	bit_modify_MCP2515(0x2b, 0b00000001, 0xff);//Set RX0 full enable
	
}

void send_CAN_message(struct CAN_struct msg){
  de:	9f 92       	push	r9
  e0:	af 92       	push	r10
  e2:	bf 92       	push	r11
  e4:	cf 92       	push	r12
  e6:	df 92       	push	r13
  e8:	ef 92       	push	r14
  ea:	ff 92       	push	r15
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	62 97       	sbiw	r28, 0x12	; 18
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
 104:	89 82       	std	Y+1, r8	; 0x01
 106:	9a 82       	std	Y+2, r9	; 0x02
 108:	ab 82       	std	Y+3, r10	; 0x03
 10a:	bc 82       	std	Y+4, r11	; 0x04
 10c:	cd 82       	std	Y+5, r12	; 0x05
 10e:	de 82       	std	Y+6, r13	; 0x06
 110:	ef 82       	std	Y+7, r14	; 0x07
 112:	f8 86       	std	Y+8, r15	; 0x08
 114:	09 87       	std	Y+9, r16	; 0x09
 116:	1a 87       	std	Y+10, r17	; 0x0a
 118:	2b 87       	std	Y+11, r18	; 0x0b
 11a:	3c 87       	std	Y+12, r19	; 0x0c
 11c:	4d 87       	std	Y+13, r20	; 0x0d
 11e:	5e 87       	std	Y+14, r21	; 0x0e
 120:	6f 87       	std	Y+15, r22	; 0x0f
 122:	78 8b       	std	Y+16, r23	; 0x10
 124:	89 8b       	std	Y+17, r24	; 0x11
 126:	9a 8b       	std	Y+18, r25	; 0x12

	//MCP_TXB0CTRL &= ~(1<<TXREQ);
	bit_modify_MCP2515(MCP_TXB0CTRL,TXREQ,4);//Choosing to write to buffer 0
 128:	44 e0       	ldi	r20, 0x04	; 4
 12a:	63 e0       	ldi	r22, 0x03	; 3
 12c:	80 e3       	ldi	r24, 0x30	; 48
 12e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <bit_modify_MCP2515>
	
	//load SIDL
	write_MCP2515(MCP_TXB0_SIDL, msg.ID << 5);
 132:	69 81       	ldd	r22, Y+1	; 0x01
 134:	62 95       	swap	r22
 136:	66 0f       	add	r22, r22
 138:	60 7e       	andi	r22, 0xE0	; 224
 13a:	82 e3       	ldi	r24, 0x32	; 50
 13c:	0e 94 3a 01 	call	0x274	; 0x274 <write_MCP2515>
	
	//load SIDH
	write_MCP2515(MCP_TXB0_SIDH, msg.ID >> 3);
 140:	69 81       	ldd	r22, Y+1	; 0x01
 142:	66 95       	lsr	r22
 144:	66 95       	lsr	r22
 146:	66 95       	lsr	r22
 148:	81 e3       	ldi	r24, 0x31	; 49
 14a:	0e 94 3a 01 	call	0x274	; 0x274 <write_MCP2515>

	
	//load DLC
	//bit_modify_MCP2515(MCP_TXB0_DLC, 0x0F,(char)msg.length);//setting datalength
	
	write_MCP2515(MCP_TXB0_DLC,(char)msg.length);
 14e:	6a 81       	ldd	r22, Y+2	; 0x02
 150:	85 e3       	ldi	r24, 0x35	; 53
 152:	0e 94 3a 01 	call	0x274	; 0x274 <write_MCP2515>
	//printf(" : %c\n",l);
	
	//if data--> TXBnDm load
	write_MCP2515(MCP_TXB0_D0,(char)msg.data);
 156:	be 01       	movw	r22, r28
 158:	6d 5f       	subi	r22, 0xFD	; 253
 15a:	7f 4f       	sbci	r23, 0xFF	; 255
 15c:	86 e3       	ldi	r24, 0x36	; 54
 15e:	0e 94 3a 01 	call	0x274	; 0x274 <write_MCP2515>
	
	/*PUTTING DATA IN DATABUFFER*/
	for (int i=0; i < msg.length; i++){
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	88 23       	and	r24, r24
 166:	b1 f0       	breq	.+44     	; 0x194 <send_CAN_message+0xb8>
 168:	7e 01       	movw	r14, r28
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	e8 0e       	add	r14, r24
 16e:	f1 1c       	adc	r15, r1
 170:	00 e0       	ldi	r16, 0x00	; 0
 172:	10 e0       	ldi	r17, 0x00	; 0
		//printf(" I: %i\n",i);
		write_MCP2515(MCP_TXB0_D0+i,(char)msg.data[i]);
 174:	f7 01       	movw	r30, r14
 176:	60 81       	ld	r22, Z
 178:	f2 e0       	ldi	r31, 0x02	; 2
 17a:	ef 0e       	add	r14, r31
 17c:	f1 1c       	adc	r15, r1
 17e:	86 e3       	ldi	r24, 0x36	; 54
 180:	80 0f       	add	r24, r16
 182:	0e 94 3a 01 	call	0x274	; 0x274 <write_MCP2515>
	
	//if data--> TXBnDm load
	write_MCP2515(MCP_TXB0_D0,(char)msg.data);
	
	/*PUTTING DATA IN DATABUFFER*/
	for (int i=0; i < msg.length; i++){
 186:	0f 5f       	subi	r16, 0xFF	; 255
 188:	1f 4f       	sbci	r17, 0xFF	; 255
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	08 17       	cp	r16, r24
 190:	19 07       	cpc	r17, r25
 192:	84 f3       	brlt	.-32     	; 0x174 <send_CAN_message+0x98>
		write_MCP2515(MCP_TXB0_D0+i,(char)msg.data[i]);
		
	}
	
	/*REQUEST TO SEND*/
	request_to_send_MCP2515(0x01);// Setting the TXBnCTRL for buffer 0.
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 4e 01 	call	0x29c	; 0x29c <request_to_send_MCP2515>
	
	/*CHECK IF TRANSMIT SUCCEEDS*/
	while (read_MCP2515(MCP_TXB0CTRL) & TXREQ){//will be cleared when finished
 19a:	80 e3       	ldi	r24, 0x30	; 48
 19c:	0e 94 28 01 	call	0x250	; 0x250 <read_MCP2515>
 1a0:	83 70       	andi	r24, 0x03	; 3
 1a2:	d9 f7       	brne	.-10     	; 0x19a <send_CAN_message+0xbe>
	}
	
	
	/*ABORT TRANSMISSION?*/
	
}
 1a4:	62 96       	adiw	r28, 0x12	; 18
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	ef 90       	pop	r14
 1bc:	df 90       	pop	r13
 1be:	cf 90       	pop	r12
 1c0:	bf 90       	pop	r11
 1c2:	af 90       	pop	r10
 1c4:	9f 90       	pop	r9
 1c6:	8f 90       	pop	r8
 1c8:	08 95       	ret

000001ca <CAN_test_communication>:
	for (int j=0;j<msg.length;j++){
		printf("Data in received message : %c \n", rcv_msg.data[j]);
	}
}

void CAN_test_communication(){
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	62 97       	sbiw	r28, 0x12	; 18
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
	CAN_init();
 1de:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	
	CAN_struct msg;
	msg.ID=3;
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	89 83       	std	Y+1, r24	; 0x01
	msg.length=8;
 1e6:	88 e0       	ldi	r24, 0x08	; 8
 1e8:	8a 83       	std	Y+2, r24	; 0x02
	msg.data[0]='K';
 1ea:	8b e4       	ldi	r24, 0x4B	; 75
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	9c 83       	std	Y+4, r25	; 0x04
 1f0:	8b 83       	std	Y+3, r24	; 0x03
	msg.data[1]='A';
 1f2:	81 e4       	ldi	r24, 0x41	; 65
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	9e 83       	std	Y+6, r25	; 0x06
 1f8:	8d 83       	std	Y+5, r24	; 0x05
	msg.data[2]='R';
 1fa:	22 e5       	ldi	r18, 0x52	; 82
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	38 87       	std	Y+8, r19	; 0x08
 200:	2f 83       	std	Y+7, r18	; 0x07
	msg.data[3]='L';
 202:	2c e4       	ldi	r18, 0x4C	; 76
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	3a 87       	std	Y+10, r19	; 0x0a
 208:	29 87       	std	Y+9, r18	; 0x09
	msg.data[4]='S';
 20a:	23 e5       	ldi	r18, 0x53	; 83
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	3c 87       	std	Y+12, r19	; 0x0c
 210:	2b 87       	std	Y+11, r18	; 0x0b
	msg.data[5]='T';
 212:	24 e5       	ldi	r18, 0x54	; 84
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	3e 87       	std	Y+14, r19	; 0x0e
 218:	2d 87       	std	Y+13, r18	; 0x0d
	msg.data[6]='A';
 21a:	98 8b       	std	Y+16, r25	; 0x10
 21c:	8f 87       	std	Y+15, r24	; 0x0f
	msg.data[7]='D';
 21e:	84 e4       	ldi	r24, 0x44	; 68
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	9a 8b       	std	Y+18, r25	; 0x12
 224:	89 8b       	std	Y+17, r24	; 0x11
	
	while (1){
		send_CAN_message(msg);
 226:	89 80       	ldd	r8, Y+1	; 0x01
 228:	9a 80       	ldd	r9, Y+2	; 0x02
 22a:	ab 80       	ldd	r10, Y+3	; 0x03
 22c:	bc 80       	ldd	r11, Y+4	; 0x04
 22e:	cd 80       	ldd	r12, Y+5	; 0x05
 230:	de 80       	ldd	r13, Y+6	; 0x06
 232:	ef 80       	ldd	r14, Y+7	; 0x07
 234:	f8 84       	ldd	r15, Y+8	; 0x08
 236:	09 85       	ldd	r16, Y+9	; 0x09
 238:	1a 85       	ldd	r17, Y+10	; 0x0a
 23a:	2b 85       	ldd	r18, Y+11	; 0x0b
 23c:	3c 85       	ldd	r19, Y+12	; 0x0c
 23e:	4d 85       	ldd	r20, Y+13	; 0x0d
 240:	5e 85       	ldd	r21, Y+14	; 0x0e
 242:	6f 85       	ldd	r22, Y+15	; 0x0f
 244:	78 89       	ldd	r23, Y+16	; 0x10
 246:	89 89       	ldd	r24, Y+17	; 0x11
 248:	9a 89       	ldd	r25, Y+18	; 0x12
 24a:	0e 94 6e 00 	call	0xdc	; 0xdc <send_CAN_message>
 24e:	eb cf       	rjmp	.-42     	; 0x226 <CAN_test_communication+0x5c>

00000250 <read_MCP2515>:
	SPI_master_init();
	reset_MCP2515();	
}


char read_MCP2515(char read_address){
 250:	cf 93       	push	r28
 252:	c8 2f       	mov	r28, r24
	spi_chipselect_deactivate();
 254:	0e 94 28 03 	call	0x650	; 0x650 <spi_chipselect_deactivate>
	send_master_SPI(0x03);	//'read' instruction. 
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	0e 94 1b 03 	call	0x636	; 0x636 <send_master_SPI>
	send_master_SPI(read_address);
 25e:	8c 2f       	mov	r24, r28
 260:	0e 94 1b 03 	call	0x636	; 0x636 <send_master_SPI>
	
	char val=read_master_SPI();
 264:	0e 94 1f 03 	call	0x63e	; 0x63e <read_master_SPI>
 268:	c8 2f       	mov	r28, r24
	spi_chipselect_activate();
 26a:	0e 94 26 03 	call	0x64c	; 0x64c <spi_chipselect_activate>
	return val;
	//PORTB |=(1<<SSn);
}
 26e:	8c 2f       	mov	r24, r28
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <write_MCP2515>:


void write_MCP2515(char write_address, char write_data){
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	d8 2f       	mov	r29, r24
 27a:	c6 2f       	mov	r28, r22
	spi_chipselect_deactivate();
 27c:	0e 94 28 03 	call	0x650	; 0x650 <spi_chipselect_deactivate>
	send_master_SPI(0x02);	//'write byte' instruction.
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	0e 94 1b 03 	call	0x636	; 0x636 <send_master_SPI>
	send_master_SPI(write_address);
 286:	8d 2f       	mov	r24, r29
 288:	0e 94 1b 03 	call	0x636	; 0x636 <send_master_SPI>
	send_master_SPI(write_data);
 28c:	8c 2f       	mov	r24, r28
 28e:	0e 94 1b 03 	call	0x636	; 0x636 <send_master_SPI>
	spi_chipselect_activate();
 292:	0e 94 26 03 	call	0x64c	; 0x64c <spi_chipselect_activate>
	
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <request_to_send_MCP2515>:

void request_to_send_MCP2515(char RTS_in){
 29c:	cf 93       	push	r28
 29e:	c8 2f       	mov	r28, r24
	spi_chipselect_deactivate();
 2a0:	0e 94 28 03 	call	0x650	; 0x650 <spi_chipselect_deactivate>
	RTS_in = RTS_in % 8;		//Ensures no more than 3 bits proceed.
 2a4:	8c 2f       	mov	r24, r28
 2a6:	87 70       	andi	r24, 0x07	; 7
	send_master_SPI(0x80 + RTS_in);
 2a8:	80 58       	subi	r24, 0x80	; 128
 2aa:	0e 94 1b 03 	call	0x636	; 0x636 <send_master_SPI>

	spi_chipselect_activate();
 2ae:	0e 94 26 03 	call	0x64c	; 0x64c <spi_chipselect_activate>
}
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <bit_modify_MCP2515>:
		return repeat;
	}*/
	return out;
}

void bit_modify_MCP2515(char address, char mask_byte, char data){
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	18 2f       	mov	r17, r24
 2be:	d6 2f       	mov	r29, r22
 2c0:	c4 2f       	mov	r28, r20
	spi_chipselect_deactivate();
 2c2:	0e 94 28 03 	call	0x650	; 0x650 <spi_chipselect_deactivate>
	send_master_SPI(0x05);	//'bit modify' instruction.
 2c6:	85 e0       	ldi	r24, 0x05	; 5
 2c8:	0e 94 1b 03 	call	0x636	; 0x636 <send_master_SPI>
	send_master_SPI(address);
 2cc:	81 2f       	mov	r24, r17
 2ce:	0e 94 1b 03 	call	0x636	; 0x636 <send_master_SPI>
	send_master_SPI(mask_byte);
 2d2:	8d 2f       	mov	r24, r29
 2d4:	0e 94 1b 03 	call	0x636	; 0x636 <send_master_SPI>
	send_master_SPI(data);
 2d8:	8c 2f       	mov	r24, r28
 2da:	0e 94 1b 03 	call	0x636	; 0x636 <send_master_SPI>
	spi_chipselect_activate();
 2de:	0e 94 26 03 	call	0x64c	; 0x64c <spi_chipselect_activate>
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	08 95       	ret

000002ea <reset_MCP2515>:

void reset_MCP2515(){
	spi_chipselect_deactivate();
 2ea:	0e 94 28 03 	call	0x650	; 0x650 <spi_chipselect_deactivate>
	send_master_SPI(0xC0);	//'reset' instruction.
 2ee:	80 ec       	ldi	r24, 0xC0	; 192
 2f0:	0e 94 1b 03 	call	0x636	; 0x636 <send_master_SPI>
	spi_chipselect_activate();
 2f4:	0e 94 26 03 	call	0x64c	; 0x64c <spi_chipselect_activate>
 2f8:	08 95       	ret

000002fa <MCP2515_init>:
#include "CAN MCP2515 header files\MCP2515.h"



void MCP2515_init(){
	SPI_master_init();
 2fa:	0e 94 12 03 	call	0x624	; 0x624 <SPI_master_init>
	reset_MCP2515();	
 2fe:	0e 94 75 01 	call	0x2ea	; 0x2ea <reset_MCP2515>
 302:	08 95       	ret

00000304 <memory_init>:
#include <stdlib.h>
#include <avr/io.h>


void memory_init(void){
	MCUCR|=(1<<SRE);
 304:	85 b7       	in	r24, 0x35	; 53
 306:	80 68       	ori	r24, 0x80	; 128
 308:	85 bf       	out	0x35, r24	; 53
	SFIOR|=(1<<XMM2);
 30a:	80 b7       	in	r24, 0x30	; 48
 30c:	80 62       	ori	r24, 0x20	; 32
 30e:	80 bf       	out	0x30, r24	; 48
 310:	08 95       	ret

00000312 <menu_print>:
	menu_print();
}

void menu_print(){
	//print_to_OLED(current_node->children[0]->content_string, 2);
	OLED_reset();
 312:	0e 94 4c 02 	call	0x498	; 0x498 <OLED_reset>
	print_to_OLED(current_node->name, 2);
 316:	e0 91 57 01 	lds	r30, 0x0157
 31a:	f0 91 58 01 	lds	r31, 0x0158
 31e:	62 e0       	ldi	r22, 0x02	; 2
 320:	80 89       	ldd	r24, Z+16	; 0x10
 322:	91 89       	ldd	r25, Z+17	; 0x11
 324:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <print_to_OLED>
	print_to_OLED(current_node->content_string, 2);
 328:	e0 91 57 01 	lds	r30, 0x0157
 32c:	f0 91 58 01 	lds	r31, 0x0158
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	82 89       	ldd	r24, Z+18	; 0x12
 334:	93 89       	ldd	r25, Z+19	; 0x13
 336:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <print_to_OLED>
	OLED_print_arrow(arrow_page);
 33a:	80 91 06 01 	lds	r24, 0x0106
 33e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <OLED_print_arrow>
 342:	08 95       	ret

00000344 <__vector_1>:
	}
	OLED_print_arrow(arrow_page);
}

/* Left slider button, INT0_vect, pin PD2. Right slider button, INT1_vect, pin PD3.*/
ISR(INT0_vect){//, INT1_vect){
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	2f 93       	push	r18
 350:	3f 93       	push	r19
 352:	4f 93       	push	r20
 354:	5f 93       	push	r21
 356:	6f 93       	push	r22
 358:	7f 93       	push	r23
 35a:	8f 93       	push	r24
 35c:	9f 93       	push	r25
 35e:	af 93       	push	r26
 360:	bf 93       	push	r27
 362:	ef 93       	push	r30
 364:	ff 93       	push	r31
	if (arrow_page <= 0){
 366:	e0 91 06 01 	lds	r30, 0x0106
 36a:	e1 11       	cpse	r30, r1
 36c:	0b c0       	rjmp	.+22     	; 0x384 <__vector_1+0x40>
		current_node = current_node->parent;
 36e:	e0 91 57 01 	lds	r30, 0x0157
 372:	f0 91 58 01 	lds	r31, 0x0158
 376:	80 81       	ld	r24, Z
 378:	91 81       	ldd	r25, Z+1	; 0x01
 37a:	90 93 58 01 	sts	0x0158, r25
 37e:	80 93 57 01 	sts	0x0157, r24
 382:	11 c0       	rjmp	.+34     	; 0x3a6 <__vector_1+0x62>
	} else if (!(current_node->children[arrow_page - 1] == NULL)){
 384:	80 91 57 01 	lds	r24, 0x0157
 388:	90 91 58 01 	lds	r25, 0x0158
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	ee 0f       	add	r30, r30
 390:	ff 1f       	adc	r31, r31
 392:	e8 0f       	add	r30, r24
 394:	f9 1f       	adc	r31, r25
 396:	80 81       	ld	r24, Z
 398:	91 81       	ldd	r25, Z+1	; 0x01
 39a:	00 97       	sbiw	r24, 0x00	; 0
 39c:	21 f0       	breq	.+8      	; 0x3a6 <__vector_1+0x62>
		current_node = current_node->children[arrow_page -1];
 39e:	90 93 58 01 	sts	0x0158, r25
 3a2:	80 93 57 01 	sts	0x0157, r24
	}
	arrow_page = 0;
 3a6:	10 92 06 01 	sts	0x0106, r1
	menu_print();
 3aa:	0e 94 89 01 	call	0x312	; 0x312 <menu_print>
}
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	bf 91       	pop	r27
 3b4:	af 91       	pop	r26
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	7f 91       	pop	r23
 3bc:	6f 91       	pop	r22
 3be:	5f 91       	pop	r21
 3c0:	4f 91       	pop	r20
 3c2:	3f 91       	pop	r19
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <__vector_2>:

ISR(INT1_vect){
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	2f 93       	push	r18
 3dc:	3f 93       	push	r19
 3de:	4f 93       	push	r20
 3e0:	5f 93       	push	r21
 3e2:	6f 93       	push	r22
 3e4:	7f 93       	push	r23
 3e6:	8f 93       	push	r24
 3e8:	9f 93       	push	r25
 3ea:	af 93       	push	r26
 3ec:	bf 93       	push	r27
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
	current_node = current_node->parent;
 3f2:	e0 91 57 01 	lds	r30, 0x0157
 3f6:	f0 91 58 01 	lds	r31, 0x0158
 3fa:	80 81       	ld	r24, Z
 3fc:	91 81       	ldd	r25, Z+1	; 0x01
 3fe:	90 93 58 01 	sts	0x0158, r25
 402:	80 93 57 01 	sts	0x0157, r24
	menu_print();
 406:	0e 94 89 01 	call	0x312	; 0x312 <menu_print>
}
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	bf 91       	pop	r27
 410:	af 91       	pop	r26
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	7f 91       	pop	r23
 418:	6f 91       	pop	r22
 41a:	5f 91       	pop	r21
 41c:	4f 91       	pop	r20
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <goto_OLED_page>:
	goto_OLED_char_column(0);
	return;
}

void goto_OLED_page(uint8_t page){
	current_page = page % DISPLAY_PAGES;
 42c:	87 70       	andi	r24, 0x07	; 7
 42e:	80 93 5e 01 	sts	0x015E, r24
	write_OLED_cmd(0xB0 + current_page);
 432:	80 55       	subi	r24, 0x50	; 80
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 434:	80 93 00 10 	sts	0x1000, r24
 438:	08 95       	ret

0000043a <goto_OLED_char_column>:
	write_OLED_cmd(0xB0 + current_page);
	return;
}

void goto_OLED_char_column(uint8_t column){
	uint8_t c = column * font_type.width;
 43a:	90 91 59 01 	lds	r25, 0x0159
 43e:	89 9f       	mul	r24, r25
 440:	90 2d       	mov	r25, r0
 442:	11 24       	eor	r1, r1
	uint8_t low_bits = c & 0x0f;
 444:	29 2f       	mov	r18, r25
 446:	2f 70       	andi	r18, 0x0F	; 15
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 448:	e0 e0       	ldi	r30, 0x00	; 0
 44a:	f0 e1       	ldi	r31, 0x10	; 16
 44c:	20 83       	st	Z, r18
void goto_OLED_char_column(uint8_t column){
	uint8_t c = column * font_type.width;
	uint8_t low_bits = c & 0x0f;
	uint8_t high_bits = c & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
 44e:	92 95       	swap	r25
 450:	9f 70       	andi	r25, 0x0F	; 15
 452:	90 5f       	subi	r25, 0xF0	; 240
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 454:	90 83       	st	Z, r25
	uint8_t low_bits = c & 0x0f;
	uint8_t high_bits = c & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
	
	current_column = column;
 456:	80 93 5f 01 	sts	0x015F, r24
 45a:	08 95       	ret

0000045c <OLED_home>:
	OLED_home();
	return;
}

void OLED_home(){
	goto_OLED_page(0);
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	0e 94 16 02 	call	0x42c	; 0x42c <goto_OLED_page>
	goto_OLED_char_column(0);
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 1d 02 	call	0x43a	; 0x43a <goto_OLED_char_column>
 468:	08 95       	ret

0000046a <goto_OLED_physical_column>:
	current_column = temp_col;
	return;
}

void goto_OLED_physical_column(uint8_t column){
	uint8_t low_bits = column & 0x0f;
 46a:	98 2f       	mov	r25, r24
 46c:	9f 70       	andi	r25, 0x0F	; 15
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 46e:	e0 e0       	ldi	r30, 0x00	; 0
 470:	f0 e1       	ldi	r31, 0x10	; 16
 472:	90 83       	st	Z, r25

void goto_OLED_physical_column(uint8_t column){
	uint8_t low_bits = column & 0x0f;
	uint8_t high_bits = column & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
 474:	98 2f       	mov	r25, r24
 476:	92 95       	swap	r25
 478:	9f 70       	andi	r25, 0x0F	; 15
 47a:	90 5f       	subi	r25, 0xF0	; 240
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 47c:	90 83       	st	Z, r25
	uint8_t low_bits = column & 0x0f;
	uint8_t high_bits = column & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
	
	current_column = column;
 47e:	80 93 5f 01 	sts	0x015F, r24
 482:	08 95       	ret

00000484 <clear_OLED_page>:
	return;
}

void clear_OLED_page(uint8_t page){
	goto_OLED_page(page);
 484:	0e 94 16 02 	call	0x42c	; 0x42c <goto_OLED_page>
	for (uint8_t i = 0; i < DISPLAY_COLUMNS; i++){
 488:	80 e0       	ldi	r24, 0x00	; 0
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 48a:	e0 e0       	ldi	r30, 0x00	; 0
 48c:	f2 e1       	ldi	r31, 0x12	; 18
 48e:	10 82       	st	Z, r1
	return;
}

void clear_OLED_page(uint8_t page){
	goto_OLED_page(page);
	for (uint8_t i = 0; i < DISPLAY_COLUMNS; i++){
 490:	8f 5f       	subi	r24, 0xFF	; 255
 492:	80 38       	cpi	r24, 0x80	; 128
 494:	e1 f7       	brne	.-8      	; 0x48e <clear_OLED_page+0xa>
		write_OLED_data(0);
	}
	return;
}
 496:	08 95       	ret

00000498 <OLED_reset>:
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
}


void OLED_reset(){
 498:	cf 93       	push	r28
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 49a:	80 e4       	ldi	r24, 0x40	; 64
 49c:	80 93 00 10 	sts	0x1000, r24
}


void OLED_reset(){
	write_OLED_cmd(0x40);		//Set display line start at page 0. 
	for (uint8_t i = 0; i < DISPLAY_PAGES; i++){
 4a0:	c0 e0       	ldi	r28, 0x00	; 0
		clear_OLED_page(i);
 4a2:	8c 2f       	mov	r24, r28
 4a4:	0e 94 42 02 	call	0x484	; 0x484 <clear_OLED_page>
}


void OLED_reset(){
	write_OLED_cmd(0x40);		//Set display line start at page 0. 
	for (uint8_t i = 0; i < DISPLAY_PAGES; i++){
 4a8:	cf 5f       	subi	r28, 0xFF	; 255
 4aa:	c8 30       	cpi	r28, 0x08	; 8
 4ac:	d1 f7       	brne	.-12     	; 0x4a2 <OLED_reset+0xa>
		clear_OLED_page(i);
	}
	OLED_home();
 4ae:	0e 94 2e 02 	call	0x45c	; 0x45c <OLED_home>
	return;
}
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <print_to_OLED>:

void OLED_pos(uint8_t page, uint8_t column){
	return;
}

void print_to_OLED(const char * string, uint8_t start_column){
 4b6:	3f 92       	push	r3
 4b8:	4f 92       	push	r4
 4ba:	5f 92       	push	r5
 4bc:	6f 92       	push	r6
 4be:	7f 92       	push	r7
 4c0:	8f 92       	push	r8
 4c2:	9f 92       	push	r9
 4c4:	af 92       	push	r10
 4c6:	bf 92       	push	r11
 4c8:	cf 92       	push	r12
 4ca:	df 92       	push	r13
 4cc:	ef 92       	push	r14
 4ce:	ff 92       	push	r15
 4d0:	0f 93       	push	r16
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	ec 01       	movw	r28, r24
 4da:	36 2e       	mov	r3, r22
	goto_OLED_char_column(start_column);
 4dc:	86 2f       	mov	r24, r22
 4de:	0e 94 1d 02 	call	0x43a	; 0x43a <goto_OLED_char_column>
	int length = strlen(string);
 4e2:	fe 01       	movw	r30, r28
 4e4:	01 90       	ld	r0, Z+
 4e6:	00 20       	and	r0, r0
 4e8:	e9 f7       	brne	.-6      	; 0x4e4 <print_to_OLED+0x2e>
 4ea:	31 97       	sbiw	r30, 0x01	; 1
 4ec:	3f 01       	movw	r6, r30
 4ee:	6c 1a       	sub	r6, r28
 4f0:	7d 0a       	sbc	r7, r29
	
	for (int i = 0; i < length; i++){
 4f2:	16 14       	cp	r1, r6
 4f4:	17 04       	cpc	r1, r7
 4f6:	0c f0       	brlt	.+2      	; 0x4fa <print_to_OLED+0x44>
 4f8:	57 c0       	rjmp	.+174    	; 0x5a8 <__stack+0xa9>
 4fa:	4e 01       	movw	r8, r28
 4fc:	a1 2c       	mov	r10, r1
 4fe:	b1 2c       	mov	r11, r1
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 500:	c9 e5       	ldi	r28, 0x59	; 89
 502:	d1 e0       	ldi	r29, 0x01	; 1
 504:	51 2c       	mov	r5, r1
 506:	41 2c       	mov	r4, r1
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
 508:	0f 2e       	mov	r0, r31
 50a:	fc e5       	ldi	r31, 0x5C	; 92
 50c:	cf 2e       	mov	r12, r31
 50e:	f1 e0       	ldi	r31, 0x01	; 1
 510:	df 2e       	mov	r13, r31
 512:	f0 2d       	mov	r31, r0
 514:	0f 2e       	mov	r0, r31
 516:	fb e5       	ldi	r31, 0x5B	; 91
 518:	ef 2e       	mov	r14, r31
 51a:	f1 e0       	ldi	r31, 0x01	; 1
 51c:	ff 2e       	mov	r15, r31
 51e:	f0 2d       	mov	r31, r0
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 520:	00 e0       	ldi	r16, 0x00	; 0
 522:	12 e1       	ldi	r17, 0x12	; 18
void print_to_OLED(const char * string, uint8_t start_column){
	goto_OLED_char_column(start_column);
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
		char c = string[i];
 524:	d4 01       	movw	r26, r8
 526:	4d 91       	ld	r20, X+
 528:	4d 01       	movw	r8, r26
		if (c == '\n') {
 52a:	4a 30       	cpi	r20, 0x0A	; 10
 52c:	31 f0       	breq	.+12     	; 0x53a <__stack+0x3b>
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 52e:	28 81       	ld	r18, Y
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	12 16       	cp	r1, r18
 534:	13 06       	cpc	r1, r19
 536:	6c f0       	brlt	.+26     	; 0x552 <__stack+0x53>
 538:	30 c0       	rjmp	.+96     	; 0x59a <__stack+0x9b>
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
		char c = string[i];
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
 53a:	80 91 5e 01 	lds	r24, 0x015E
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	87 70       	andi	r24, 0x07	; 7
 544:	90 78       	andi	r25, 0x80	; 128
 546:	0e 94 16 02 	call	0x42c	; 0x42c <goto_OLED_page>
			goto_OLED_char_column(start_column);
 54a:	83 2d       	mov	r24, r3
 54c:	0e 94 1d 02 	call	0x43a	; 0x43a <goto_OLED_char_column>
 550:	24 c0       	rjmp	.+72     	; 0x59a <__stack+0x9b>
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 552:	85 2d       	mov	r24, r5
 554:	94 2d       	mov	r25, r4
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
 556:	50 e0       	ldi	r21, 0x00	; 0
 558:	f7 01       	movw	r30, r14
 55a:	60 81       	ld	r22, Z
 55c:	da 01       	movw	r26, r20
 55e:	a6 1b       	sub	r26, r22
 560:	b1 09       	sbc	r27, r1
 562:	2a 9f       	mul	r18, r26
 564:	f0 01       	movw	r30, r0
 566:	2b 9f       	mul	r18, r27
 568:	f0 0d       	add	r31, r0
 56a:	3a 9f       	mul	r19, r26
 56c:	f0 0d       	add	r31, r0
 56e:	11 24       	eor	r1, r1
 570:	e8 0f       	add	r30, r24
 572:	f9 1f       	adc	r31, r25
 574:	d6 01       	movw	r26, r12
 576:	2d 91       	ld	r18, X+
 578:	3c 91       	ld	r19, X
 57a:	e2 0f       	add	r30, r18
 57c:	f3 1f       	adc	r31, r19
 57e:	e4 91       	lpm	r30, Z
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 580:	d8 01       	movw	r26, r16
 582:	ec 93       	st	X, r30
		else{
			for (int j = 0; j < font_type.width; j++){
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
				//write_OLED_data(pgm_read_byte(&font[c-font_type.ascii_offset][j]));
				//write_OLED_data(pgm_read_byte(&font_type.data[c-font_type.ascii_offset][j]));
				current_column = current_column + font_type.width;
 584:	30 91 5f 01 	lds	r19, 0x015F
 588:	28 81       	ld	r18, Y
 58a:	32 0f       	add	r19, r18
 58c:	30 93 5f 01 	sts	0x015F, r19
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	82 17       	cp	r24, r18
 596:	93 07       	cpc	r25, r19
 598:	fc f2       	brlt	.-66     	; 0x558 <__stack+0x59>

void print_to_OLED(const char * string, uint8_t start_column){
	goto_OLED_char_column(start_column);
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
 59a:	bf ef       	ldi	r27, 0xFF	; 255
 59c:	ab 1a       	sub	r10, r27
 59e:	bb 0a       	sbc	r11, r27
 5a0:	6a 14       	cp	r6, r10
 5a2:	7b 04       	cpc	r7, r11
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <__stack+0xa9>
 5a6:	be cf       	rjmp	.-132    	; 0x524 <__stack+0x25>
				current_column = current_column + font_type.width;
			}
		}
	}
	return;
}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	ef 90       	pop	r14
 5b4:	df 90       	pop	r13
 5b6:	cf 90       	pop	r12
 5b8:	bf 90       	pop	r11
 5ba:	af 90       	pop	r10
 5bc:	9f 90       	pop	r9
 5be:	8f 90       	pop	r8
 5c0:	7f 90       	pop	r7
 5c2:	6f 90       	pop	r6
 5c4:	5f 90       	pop	r5
 5c6:	4f 90       	pop	r4
 5c8:	3f 90       	pop	r3
 5ca:	08 95       	ret

000005cc <OLED_print_arrow>:

void OLED_print_arrow(uint8_t page)
{	int temp = current_page;
 5cc:	cf 93       	push	r28
 5ce:	c0 91 5e 01 	lds	r28, 0x015E
	goto_OLED_page(page);
 5d2:	0e 94 16 02 	call	0x42c	; 0x42c <goto_OLED_page>
	goto_OLED_physical_column(1);
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	0e 94 35 02 	call	0x46a	; 0x46a <goto_OLED_physical_column>
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 5dc:	e0 e0       	ldi	r30, 0x00	; 0
 5de:	f2 e1       	ldi	r31, 0x12	; 18
 5e0:	98 e1       	ldi	r25, 0x18	; 24
 5e2:	90 83       	st	Z, r25
 5e4:	90 83       	st	Z, r25
 5e6:	8e e7       	ldi	r24, 0x7E	; 126
 5e8:	80 83       	st	Z, r24
 5ea:	8c e3       	ldi	r24, 0x3C	; 60
 5ec:	80 83       	st	Z, r24
 5ee:	90 83       	st	Z, r25
	write_OLED_data(0b00011000);
	write_OLED_data(0b00011000);
	write_OLED_data(0b01111110);
	write_OLED_data(0b00111100);
	write_OLED_data(0b00011000);
	current_column = ARROW_WIDTH;
 5f0:	88 e0       	ldi	r24, 0x08	; 8
 5f2:	80 93 5f 01 	sts	0x015F, r24
	
	goto_OLED_page(temp);
 5f6:	8c 2f       	mov	r24, r28
 5f8:	0e 94 16 02 	call	0x42c	; 0x42c <goto_OLED_page>
}
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <main>:
	 //}
	
	
	//ov2////////////////////////////////
	
	DDRE=0x3;
 600:	83 e0       	ldi	r24, 0x03	; 3
 602:	86 b9       	out	0x06, r24	; 6
	DDRA=0xFF;
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 608:	1b ba       	out	0x1b, r1	; 27
	PORTE=0x2;
 60a:	82 e0       	ldi	r24, 0x02	; 2
 60c:	87 b9       	out	0x07, r24	; 7
	char temp = read_MCP2515(MCP_CANCTRL);
	printf("Temp: %i\n", temp);
	}*/
	
	
	memory_init();
 60e:	0e 94 82 01 	call	0x304	; 0x304 <memory_init>
	UART_Init(MYUBRR);
 612:	8f e1       	ldi	r24, 0x1F	; 31
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 32 03 	call	0x664	; 0x664 <UART_Init>
	
	CAN_test_communication();
 61a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <CAN_test_communication>
	
	return 0;
	
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	08 95       	ret

00000624 <SPI_master_init>:
	#define SCK		1
#endif


void SPI_master_init(){
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SSn);		//Set MOSI, SCK, SSn output.
 624:	87 b3       	in	r24, 0x17	; 23
 626:	80 6b       	ori	r24, 0xB0	; 176
 628:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~((1<<MISO));		//Set MISO input.
 62a:	be 98       	cbi	0x17, 6	; 23
	PORTB|=(1<<MISO);
 62c:	c6 9a       	sbi	0x18, 6	; 24
	SPCR |= (1<<SPE) | (1<<MSTR)|(1<<SPR0);	//Enable SPI, Master, set clock rate fck/16.
 62e:	8d b1       	in	r24, 0x0d	; 13
 630:	81 65       	ori	r24, 0x51	; 81
 632:	8d b9       	out	0x0d, r24	; 13
 634:	08 95       	ret

00000636 <send_master_SPI>:
	SPCR = (1<<SPE);	//Enable SPI.
}

void send_master_SPI(char data){
	
	SPDR = data;			//Send data.
 636:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF))) {}		//Wait for transmission complete.
 638:	77 9b       	sbis	0x0e, 7	; 14
 63a:	fe cf       	rjmp	.-4      	; 0x638 <send_master_SPI+0x2>
	
}
 63c:	08 95       	ret

0000063e <read_master_SPI>:

char read_master_SPI(){
	
	
	send_master_SPI(0xFF);		//Send dummy byte.		
 63e:	8f ef       	ldi	r24, 0xFF	; 255
 640:	0e 94 1b 03 	call	0x636	; 0x636 <send_master_SPI>
	while (!(SPSR & (1<<SPIF))) {}		//Wait for transmission complete.
 644:	77 9b       	sbis	0x0e, 7	; 14
 646:	fe cf       	rjmp	.-4      	; 0x644 <read_master_SPI+0x6>
	return SPDR;
 648:	8f b1       	in	r24, 0x0f	; 15
}
 64a:	08 95       	ret

0000064c <spi_chipselect_activate>:

void spi_chipselect_activate(){
	PORTB |=(1<<SSn);
 64c:	c4 9a       	sbi	0x18, 4	; 24
 64e:	08 95       	ret

00000650 <spi_chipselect_deactivate>:
}

void spi_chipselect_deactivate(){
	PORTB &=~(1<<SSn);
 650:	c4 98       	cbi	0x18, 4	; 24
 652:	08 95       	ret

00000654 <UART_Transmit>:
	}
	
void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer*/
		while( !( UCSR0A & (1<<UDRE0)) )
 654:	5d 9b       	sbis	0x0b, 5	; 11
 656:	fe cf       	rjmp	.-4      	; 0x654 <UART_Transmit>
		;
	/* Put data into buffer, sends the data*/
		UDR0 = data;
 658:	8c b9       	out	0x0c, r24	; 12
 65a:	08 95       	ret

0000065c <UART_Receive>:
}

unsigned char UART_Receive(void)
	{
		/* Wait for data to be received*/
		while( !(UCSR0A & (1<<RXC0)) )
 65c:	5f 9b       	sbis	0x0b, 7	; 11
 65e:	fe cf       	rjmp	.-4      	; 0x65c <UART_Receive>
			;
		/* Get and return received data from buffer*/
		return UDR0;
 660:	8c b1       	in	r24, 0x0c	; 12
 662:	08 95       	ret

00000664 <UART_Init>:
#define MYUBRR FOSC/16/BAUD-1

void UART_Init(unsigned int ubrr)
	{
		/* Set baud rate */
		UBRR0H = (unsigned char)(ubrr>>8);
 664:	90 bd       	out	0x20, r25	; 32
		UBRR0L = (unsigned char)ubrr;
 666:	89 b9       	out	0x09, r24	; 9
		/* Enable receiver and transmitter */
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 668:	88 e1       	ldi	r24, 0x18	; 24
 66a:	8a b9       	out	0x0a, r24	; 10
		/* 
		Set frame format: 8data, 2stop bit
		*/
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 66c:	8e e8       	ldi	r24, 0x8E	; 142
 66e:	80 bd       	out	0x20, r24	; 32
		fdevopen(&UART_Transmit, &UART_Receive);
 670:	6e e2       	ldi	r22, 0x2E	; 46
 672:	73 e0       	ldi	r23, 0x03	; 3
 674:	8a e2       	ldi	r24, 0x2A	; 42
 676:	93 e0       	ldi	r25, 0x03	; 3
 678:	0e 94 3f 03 	call	0x67e	; 0x67e <fdevopen>
 67c:	08 95       	ret

0000067e <fdevopen>:
 67e:	0f 93       	push	r16
 680:	1f 93       	push	r17
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	ec 01       	movw	r28, r24
 688:	8b 01       	movw	r16, r22
 68a:	00 97       	sbiw	r24, 0x00	; 0
 68c:	31 f4       	brne	.+12     	; 0x69a <fdevopen+0x1c>
 68e:	61 15       	cp	r22, r1
 690:	71 05       	cpc	r23, r1
 692:	19 f4       	brne	.+6      	; 0x69a <fdevopen+0x1c>
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	38 c0       	rjmp	.+112    	; 0x70a <fdevopen+0x8c>
 69a:	6e e0       	ldi	r22, 0x0E	; 14
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 8a 03 	call	0x714	; 0x714 <calloc>
 6a6:	fc 01       	movw	r30, r24
 6a8:	00 97       	sbiw	r24, 0x00	; 0
 6aa:	a1 f3       	breq	.-24     	; 0x694 <fdevopen+0x16>
 6ac:	80 e8       	ldi	r24, 0x80	; 128
 6ae:	83 83       	std	Z+3, r24	; 0x03
 6b0:	01 15       	cp	r16, r1
 6b2:	11 05       	cpc	r17, r1
 6b4:	71 f0       	breq	.+28     	; 0x6d2 <fdevopen+0x54>
 6b6:	13 87       	std	Z+11, r17	; 0x0b
 6b8:	02 87       	std	Z+10, r16	; 0x0a
 6ba:	81 e8       	ldi	r24, 0x81	; 129
 6bc:	83 83       	std	Z+3, r24	; 0x03
 6be:	80 91 60 01 	lds	r24, 0x0160
 6c2:	90 91 61 01 	lds	r25, 0x0161
 6c6:	89 2b       	or	r24, r25
 6c8:	21 f4       	brne	.+8      	; 0x6d2 <fdevopen+0x54>
 6ca:	f0 93 61 01 	sts	0x0161, r31
 6ce:	e0 93 60 01 	sts	0x0160, r30
 6d2:	20 97       	sbiw	r28, 0x00	; 0
 6d4:	c9 f0       	breq	.+50     	; 0x708 <fdevopen+0x8a>
 6d6:	d1 87       	std	Z+9, r29	; 0x09
 6d8:	c0 87       	std	Z+8, r28	; 0x08
 6da:	83 81       	ldd	r24, Z+3	; 0x03
 6dc:	82 60       	ori	r24, 0x02	; 2
 6de:	83 83       	std	Z+3, r24	; 0x03
 6e0:	80 91 62 01 	lds	r24, 0x0162
 6e4:	90 91 63 01 	lds	r25, 0x0163
 6e8:	89 2b       	or	r24, r25
 6ea:	71 f4       	brne	.+28     	; 0x708 <fdevopen+0x8a>
 6ec:	f0 93 63 01 	sts	0x0163, r31
 6f0:	e0 93 62 01 	sts	0x0162, r30
 6f4:	80 91 64 01 	lds	r24, 0x0164
 6f8:	90 91 65 01 	lds	r25, 0x0165
 6fc:	89 2b       	or	r24, r25
 6fe:	21 f4       	brne	.+8      	; 0x708 <fdevopen+0x8a>
 700:	f0 93 65 01 	sts	0x0165, r31
 704:	e0 93 64 01 	sts	0x0164, r30
 708:	cf 01       	movw	r24, r30
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	1f 91       	pop	r17
 710:	0f 91       	pop	r16
 712:	08 95       	ret

00000714 <calloc>:
 714:	0f 93       	push	r16
 716:	1f 93       	push	r17
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	86 9f       	mul	r24, r22
 71e:	80 01       	movw	r16, r0
 720:	87 9f       	mul	r24, r23
 722:	10 0d       	add	r17, r0
 724:	96 9f       	mul	r25, r22
 726:	10 0d       	add	r17, r0
 728:	11 24       	eor	r1, r1
 72a:	c8 01       	movw	r24, r16
 72c:	0e 94 a6 03 	call	0x74c	; 0x74c <malloc>
 730:	ec 01       	movw	r28, r24
 732:	00 97       	sbiw	r24, 0x00	; 0
 734:	29 f0       	breq	.+10     	; 0x740 <calloc+0x2c>
 736:	a8 01       	movw	r20, r16
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	0e 94 cd 04 	call	0x99a	; 0x99a <memset>
 740:	ce 01       	movw	r24, r28
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	1f 91       	pop	r17
 748:	0f 91       	pop	r16
 74a:	08 95       	ret

0000074c <malloc>:
 74c:	cf 93       	push	r28
 74e:	df 93       	push	r29
 750:	82 30       	cpi	r24, 0x02	; 2
 752:	91 05       	cpc	r25, r1
 754:	10 f4       	brcc	.+4      	; 0x75a <malloc+0xe>
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	e0 91 68 01 	lds	r30, 0x0168
 75e:	f0 91 69 01 	lds	r31, 0x0169
 762:	20 e0       	ldi	r18, 0x00	; 0
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	a0 e0       	ldi	r26, 0x00	; 0
 768:	b0 e0       	ldi	r27, 0x00	; 0
 76a:	30 97       	sbiw	r30, 0x00	; 0
 76c:	39 f1       	breq	.+78     	; 0x7bc <malloc+0x70>
 76e:	40 81       	ld	r20, Z
 770:	51 81       	ldd	r21, Z+1	; 0x01
 772:	48 17       	cp	r20, r24
 774:	59 07       	cpc	r21, r25
 776:	b8 f0       	brcs	.+46     	; 0x7a6 <malloc+0x5a>
 778:	48 17       	cp	r20, r24
 77a:	59 07       	cpc	r21, r25
 77c:	71 f4       	brne	.+28     	; 0x79a <malloc+0x4e>
 77e:	82 81       	ldd	r24, Z+2	; 0x02
 780:	93 81       	ldd	r25, Z+3	; 0x03
 782:	10 97       	sbiw	r26, 0x00	; 0
 784:	29 f0       	breq	.+10     	; 0x790 <malloc+0x44>
 786:	13 96       	adiw	r26, 0x03	; 3
 788:	9c 93       	st	X, r25
 78a:	8e 93       	st	-X, r24
 78c:	12 97       	sbiw	r26, 0x02	; 2
 78e:	2c c0       	rjmp	.+88     	; 0x7e8 <malloc+0x9c>
 790:	90 93 69 01 	sts	0x0169, r25
 794:	80 93 68 01 	sts	0x0168, r24
 798:	27 c0       	rjmp	.+78     	; 0x7e8 <malloc+0x9c>
 79a:	21 15       	cp	r18, r1
 79c:	31 05       	cpc	r19, r1
 79e:	31 f0       	breq	.+12     	; 0x7ac <malloc+0x60>
 7a0:	42 17       	cp	r20, r18
 7a2:	53 07       	cpc	r21, r19
 7a4:	18 f0       	brcs	.+6      	; 0x7ac <malloc+0x60>
 7a6:	a9 01       	movw	r20, r18
 7a8:	db 01       	movw	r26, r22
 7aa:	01 c0       	rjmp	.+2      	; 0x7ae <malloc+0x62>
 7ac:	ef 01       	movw	r28, r30
 7ae:	9a 01       	movw	r18, r20
 7b0:	bd 01       	movw	r22, r26
 7b2:	df 01       	movw	r26, r30
 7b4:	02 80       	ldd	r0, Z+2	; 0x02
 7b6:	f3 81       	ldd	r31, Z+3	; 0x03
 7b8:	e0 2d       	mov	r30, r0
 7ba:	d7 cf       	rjmp	.-82     	; 0x76a <malloc+0x1e>
 7bc:	21 15       	cp	r18, r1
 7be:	31 05       	cpc	r19, r1
 7c0:	f9 f0       	breq	.+62     	; 0x800 <malloc+0xb4>
 7c2:	28 1b       	sub	r18, r24
 7c4:	39 0b       	sbc	r19, r25
 7c6:	24 30       	cpi	r18, 0x04	; 4
 7c8:	31 05       	cpc	r19, r1
 7ca:	80 f4       	brcc	.+32     	; 0x7ec <malloc+0xa0>
 7cc:	8a 81       	ldd	r24, Y+2	; 0x02
 7ce:	9b 81       	ldd	r25, Y+3	; 0x03
 7d0:	61 15       	cp	r22, r1
 7d2:	71 05       	cpc	r23, r1
 7d4:	21 f0       	breq	.+8      	; 0x7de <malloc+0x92>
 7d6:	fb 01       	movw	r30, r22
 7d8:	93 83       	std	Z+3, r25	; 0x03
 7da:	82 83       	std	Z+2, r24	; 0x02
 7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <malloc+0x9a>
 7de:	90 93 69 01 	sts	0x0169, r25
 7e2:	80 93 68 01 	sts	0x0168, r24
 7e6:	fe 01       	movw	r30, r28
 7e8:	32 96       	adiw	r30, 0x02	; 2
 7ea:	44 c0       	rjmp	.+136    	; 0x874 <malloc+0x128>
 7ec:	fe 01       	movw	r30, r28
 7ee:	e2 0f       	add	r30, r18
 7f0:	f3 1f       	adc	r31, r19
 7f2:	81 93       	st	Z+, r24
 7f4:	91 93       	st	Z+, r25
 7f6:	22 50       	subi	r18, 0x02	; 2
 7f8:	31 09       	sbc	r19, r1
 7fa:	39 83       	std	Y+1, r19	; 0x01
 7fc:	28 83       	st	Y, r18
 7fe:	3a c0       	rjmp	.+116    	; 0x874 <malloc+0x128>
 800:	20 91 66 01 	lds	r18, 0x0166
 804:	30 91 67 01 	lds	r19, 0x0167
 808:	23 2b       	or	r18, r19
 80a:	41 f4       	brne	.+16     	; 0x81c <malloc+0xd0>
 80c:	20 91 02 01 	lds	r18, 0x0102
 810:	30 91 03 01 	lds	r19, 0x0103
 814:	30 93 67 01 	sts	0x0167, r19
 818:	20 93 66 01 	sts	0x0166, r18
 81c:	20 91 00 01 	lds	r18, 0x0100
 820:	30 91 01 01 	lds	r19, 0x0101
 824:	21 15       	cp	r18, r1
 826:	31 05       	cpc	r19, r1
 828:	41 f4       	brne	.+16     	; 0x83a <malloc+0xee>
 82a:	2d b7       	in	r18, 0x3d	; 61
 82c:	3e b7       	in	r19, 0x3e	; 62
 82e:	40 91 04 01 	lds	r20, 0x0104
 832:	50 91 05 01 	lds	r21, 0x0105
 836:	24 1b       	sub	r18, r20
 838:	35 0b       	sbc	r19, r21
 83a:	e0 91 66 01 	lds	r30, 0x0166
 83e:	f0 91 67 01 	lds	r31, 0x0167
 842:	e2 17       	cp	r30, r18
 844:	f3 07       	cpc	r31, r19
 846:	a0 f4       	brcc	.+40     	; 0x870 <malloc+0x124>
 848:	2e 1b       	sub	r18, r30
 84a:	3f 0b       	sbc	r19, r31
 84c:	28 17       	cp	r18, r24
 84e:	39 07       	cpc	r19, r25
 850:	78 f0       	brcs	.+30     	; 0x870 <malloc+0x124>
 852:	ac 01       	movw	r20, r24
 854:	4e 5f       	subi	r20, 0xFE	; 254
 856:	5f 4f       	sbci	r21, 0xFF	; 255
 858:	24 17       	cp	r18, r20
 85a:	35 07       	cpc	r19, r21
 85c:	48 f0       	brcs	.+18     	; 0x870 <malloc+0x124>
 85e:	4e 0f       	add	r20, r30
 860:	5f 1f       	adc	r21, r31
 862:	50 93 67 01 	sts	0x0167, r21
 866:	40 93 66 01 	sts	0x0166, r20
 86a:	81 93       	st	Z+, r24
 86c:	91 93       	st	Z+, r25
 86e:	02 c0       	rjmp	.+4      	; 0x874 <malloc+0x128>
 870:	e0 e0       	ldi	r30, 0x00	; 0
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	cf 01       	movw	r24, r30
 876:	df 91       	pop	r29
 878:	cf 91       	pop	r28
 87a:	08 95       	ret

0000087c <free>:
 87c:	cf 93       	push	r28
 87e:	df 93       	push	r29
 880:	00 97       	sbiw	r24, 0x00	; 0
 882:	09 f4       	brne	.+2      	; 0x886 <free+0xa>
 884:	87 c0       	rjmp	.+270    	; 0x994 <free+0x118>
 886:	fc 01       	movw	r30, r24
 888:	32 97       	sbiw	r30, 0x02	; 2
 88a:	13 82       	std	Z+3, r1	; 0x03
 88c:	12 82       	std	Z+2, r1	; 0x02
 88e:	c0 91 68 01 	lds	r28, 0x0168
 892:	d0 91 69 01 	lds	r29, 0x0169
 896:	20 97       	sbiw	r28, 0x00	; 0
 898:	81 f4       	brne	.+32     	; 0x8ba <free+0x3e>
 89a:	20 81       	ld	r18, Z
 89c:	31 81       	ldd	r19, Z+1	; 0x01
 89e:	28 0f       	add	r18, r24
 8a0:	39 1f       	adc	r19, r25
 8a2:	80 91 66 01 	lds	r24, 0x0166
 8a6:	90 91 67 01 	lds	r25, 0x0167
 8aa:	82 17       	cp	r24, r18
 8ac:	93 07       	cpc	r25, r19
 8ae:	79 f5       	brne	.+94     	; 0x90e <free+0x92>
 8b0:	f0 93 67 01 	sts	0x0167, r31
 8b4:	e0 93 66 01 	sts	0x0166, r30
 8b8:	6d c0       	rjmp	.+218    	; 0x994 <free+0x118>
 8ba:	de 01       	movw	r26, r28
 8bc:	20 e0       	ldi	r18, 0x00	; 0
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	ae 17       	cp	r26, r30
 8c2:	bf 07       	cpc	r27, r31
 8c4:	50 f4       	brcc	.+20     	; 0x8da <free+0x5e>
 8c6:	12 96       	adiw	r26, 0x02	; 2
 8c8:	4d 91       	ld	r20, X+
 8ca:	5c 91       	ld	r21, X
 8cc:	13 97       	sbiw	r26, 0x03	; 3
 8ce:	9d 01       	movw	r18, r26
 8d0:	41 15       	cp	r20, r1
 8d2:	51 05       	cpc	r21, r1
 8d4:	09 f1       	breq	.+66     	; 0x918 <free+0x9c>
 8d6:	da 01       	movw	r26, r20
 8d8:	f3 cf       	rjmp	.-26     	; 0x8c0 <free+0x44>
 8da:	b3 83       	std	Z+3, r27	; 0x03
 8dc:	a2 83       	std	Z+2, r26	; 0x02
 8de:	40 81       	ld	r20, Z
 8e0:	51 81       	ldd	r21, Z+1	; 0x01
 8e2:	84 0f       	add	r24, r20
 8e4:	95 1f       	adc	r25, r21
 8e6:	8a 17       	cp	r24, r26
 8e8:	9b 07       	cpc	r25, r27
 8ea:	71 f4       	brne	.+28     	; 0x908 <free+0x8c>
 8ec:	8d 91       	ld	r24, X+
 8ee:	9c 91       	ld	r25, X
 8f0:	11 97       	sbiw	r26, 0x01	; 1
 8f2:	84 0f       	add	r24, r20
 8f4:	95 1f       	adc	r25, r21
 8f6:	02 96       	adiw	r24, 0x02	; 2
 8f8:	91 83       	std	Z+1, r25	; 0x01
 8fa:	80 83       	st	Z, r24
 8fc:	12 96       	adiw	r26, 0x02	; 2
 8fe:	8d 91       	ld	r24, X+
 900:	9c 91       	ld	r25, X
 902:	13 97       	sbiw	r26, 0x03	; 3
 904:	93 83       	std	Z+3, r25	; 0x03
 906:	82 83       	std	Z+2, r24	; 0x02
 908:	21 15       	cp	r18, r1
 90a:	31 05       	cpc	r19, r1
 90c:	29 f4       	brne	.+10     	; 0x918 <free+0x9c>
 90e:	f0 93 69 01 	sts	0x0169, r31
 912:	e0 93 68 01 	sts	0x0168, r30
 916:	3e c0       	rjmp	.+124    	; 0x994 <free+0x118>
 918:	d9 01       	movw	r26, r18
 91a:	13 96       	adiw	r26, 0x03	; 3
 91c:	fc 93       	st	X, r31
 91e:	ee 93       	st	-X, r30
 920:	12 97       	sbiw	r26, 0x02	; 2
 922:	4d 91       	ld	r20, X+
 924:	5d 91       	ld	r21, X+
 926:	a4 0f       	add	r26, r20
 928:	b5 1f       	adc	r27, r21
 92a:	ea 17       	cp	r30, r26
 92c:	fb 07       	cpc	r31, r27
 92e:	79 f4       	brne	.+30     	; 0x94e <free+0xd2>
 930:	80 81       	ld	r24, Z
 932:	91 81       	ldd	r25, Z+1	; 0x01
 934:	84 0f       	add	r24, r20
 936:	95 1f       	adc	r25, r21
 938:	02 96       	adiw	r24, 0x02	; 2
 93a:	d9 01       	movw	r26, r18
 93c:	11 96       	adiw	r26, 0x01	; 1
 93e:	9c 93       	st	X, r25
 940:	8e 93       	st	-X, r24
 942:	82 81       	ldd	r24, Z+2	; 0x02
 944:	93 81       	ldd	r25, Z+3	; 0x03
 946:	13 96       	adiw	r26, 0x03	; 3
 948:	9c 93       	st	X, r25
 94a:	8e 93       	st	-X, r24
 94c:	12 97       	sbiw	r26, 0x02	; 2
 94e:	e0 e0       	ldi	r30, 0x00	; 0
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	8a 81       	ldd	r24, Y+2	; 0x02
 954:	9b 81       	ldd	r25, Y+3	; 0x03
 956:	00 97       	sbiw	r24, 0x00	; 0
 958:	19 f0       	breq	.+6      	; 0x960 <free+0xe4>
 95a:	fe 01       	movw	r30, r28
 95c:	ec 01       	movw	r28, r24
 95e:	f9 cf       	rjmp	.-14     	; 0x952 <free+0xd6>
 960:	ce 01       	movw	r24, r28
 962:	02 96       	adiw	r24, 0x02	; 2
 964:	28 81       	ld	r18, Y
 966:	39 81       	ldd	r19, Y+1	; 0x01
 968:	82 0f       	add	r24, r18
 96a:	93 1f       	adc	r25, r19
 96c:	20 91 66 01 	lds	r18, 0x0166
 970:	30 91 67 01 	lds	r19, 0x0167
 974:	28 17       	cp	r18, r24
 976:	39 07       	cpc	r19, r25
 978:	69 f4       	brne	.+26     	; 0x994 <free+0x118>
 97a:	30 97       	sbiw	r30, 0x00	; 0
 97c:	29 f4       	brne	.+10     	; 0x988 <free+0x10c>
 97e:	10 92 69 01 	sts	0x0169, r1
 982:	10 92 68 01 	sts	0x0168, r1
 986:	02 c0       	rjmp	.+4      	; 0x98c <free+0x110>
 988:	13 82       	std	Z+3, r1	; 0x03
 98a:	12 82       	std	Z+2, r1	; 0x02
 98c:	d0 93 67 01 	sts	0x0167, r29
 990:	c0 93 66 01 	sts	0x0166, r28
 994:	df 91       	pop	r29
 996:	cf 91       	pop	r28
 998:	08 95       	ret

0000099a <memset>:
 99a:	dc 01       	movw	r26, r24
 99c:	01 c0       	rjmp	.+2      	; 0x9a0 <memset+0x6>
 99e:	6d 93       	st	X+, r22
 9a0:	41 50       	subi	r20, 0x01	; 1
 9a2:	50 40       	sbci	r21, 0x00	; 0
 9a4:	e0 f7       	brcc	.-8      	; 0x99e <memset+0x4>
 9a6:	08 95       	ret

000009a8 <_exit>:
 9a8:	f8 94       	cli

000009aa <__stop_program>:
 9aa:	ff cf       	rjmp	.-2      	; 0x9aa <__stop_program>
