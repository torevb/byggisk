
Oving1_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000fec  00001080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  0080016c  0080016c  000010ec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000238  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f16  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ba4  00000000  00000000  00003296  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b16  00000000  00000000  00003e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000568  00000000  00000000  00004950  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000654  00000000  00000000  00004eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c1c  00000000  00000000  0000550c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000240  00000000  00000000  00006128  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_1>
   8:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_2>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec ee       	ldi	r30, 0xEC	; 236
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 36       	cpi	r26, 0x6C	; 108
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ac e6       	ldi	r26, 0x6C	; 108
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 3d       	cpi	r26, 0xD0	; 208
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 2c 03 	call	0x658	; 0x658 <main>
  a6:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:
	msg.length=	(int)(read_MCP2515(MCP_RXB0_DLC) & 0x0f);
	printf(" Message length %i:\n",msg.length);
	
	
	/*READING DATA FROM DATABUFFER*/
	for (int i=0; i < msg.length; i++){
  ae:	0e 94 a9 01 	call	0x352	; 0x352 <MCP2515_init>
		msg.data[i]= read_MCP2515(MCP_RXB0_D0+i);
  b2:	4f ef       	ldi	r20, 0xFF	; 255
  b4:	60 e6       	ldi	r22, 0x60	; 96
  b6:	80 e6       	ldi	r24, 0x60	; 96
  b8:	0e 94 87 01 	call	0x30e	; 0x30e <bit_modify_MCP2515>
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	64 e0       	ldi	r22, 0x04	; 4
  c0:	80 e6       	ldi	r24, 0x60	; 96
  c2:	0e 94 87 01 	call	0x30e	; 0x30e <bit_modify_MCP2515>
	msg.length=	(int)(read_MCP2515(MCP_RXB0_DLC) & 0x0f);
	printf(" Message length %i:\n",msg.length);
	
	
	/*READING DATA FROM DATABUFFER*/
	for (int i=0; i < msg.length; i++){
  c6:	45 e0       	ldi	r20, 0x05	; 5
  c8:	65 e0       	ldi	r22, 0x05	; 5
  ca:	8b e2       	ldi	r24, 0x2B	; 43
		msg.data[i]= read_MCP2515(MCP_RXB0_D0+i);
		
	}
	//MUST clear RXB0IF after reading message
	bit_modify_MCP2515(MCP_CANINTF, (1<<RX0IF),0x00);
  cc:	0e 94 87 01 	call	0x30e	; 0x30e <bit_modify_MCP2515>
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	60 ee       	ldi	r22, 0xE0	; 224
  d4:	8f e0       	ldi	r24, 0x0F	; 15
	
	/*else {
		msg.ID = 0;
	}*/
	
	return msg;
  d6:	0e 94 87 01 	call	0x30e	; 0x30e <bit_modify_MCP2515>
  da:	08 95       	ret

000000dc <send_CAN_message>:
  dc:	8f 92       	push	r8
  de:	9f 92       	push	r9
  e0:	af 92       	push	r10
  e2:	bf 92       	push	r11
  e4:	cf 92       	push	r12
  e6:	df 92       	push	r13
  e8:	ef 92       	push	r14
}
  ea:	ff 92       	push	r15
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	62 97       	sbiw	r28, 0x12	; 18
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
 104:	89 82       	std	Y+1, r8	; 0x01
 106:	9a 82       	std	Y+2, r9	; 0x02
 108:	ab 82       	std	Y+3, r10	; 0x03
 10a:	bc 82       	std	Y+4, r11	; 0x04
 10c:	cd 82       	std	Y+5, r12	; 0x05
 10e:	de 82       	std	Y+6, r13	; 0x06
	
	//bit_modify_MCP2515(MCP_CANCTRL,0xE0,MODE_LOOPBACK);//Enables loop back mode
	bit_modify_MCP2515(MCP_CANCTRL,0xE0,MODE_NORMAL);//Enables normal mode
}

void send_CAN_message(struct CAN_struct msg){
 110:	ef 82       	std	Y+7, r14	; 0x07
 112:	f8 86       	std	Y+8, r15	; 0x08
 114:	09 87       	std	Y+9, r16	; 0x09
 116:	1a 87       	std	Y+10, r17	; 0x0a
 118:	2b 87       	std	Y+11, r18	; 0x0b
 11a:	3c 87       	std	Y+12, r19	; 0x0c
 11c:	4d 87       	std	Y+13, r20	; 0x0d
 11e:	5e 87       	std	Y+14, r21	; 0x0e
 120:	6f 87       	std	Y+15, r22	; 0x0f
 122:	78 8b       	std	Y+16, r23	; 0x10
 124:	89 8b       	std	Y+17, r24	; 0x11
 126:	9a 8b       	std	Y+18, r25	; 0x12
 128:	c9 2c       	mov	r12, r9
	printf("MCP_TXB0CTRL: %x\n", read_MCP2515(MCP_TXB0CTRL));
 12a:	80 e3       	ldi	r24, 0x30	; 48
 12c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <read_MCP2515>
 130:	1f 92       	push	r1
 132:	8f 93       	push	r24
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	9f 93       	push	r25
 13a:	8f 93       	push	r24
 13c:	0e 94 ba 03 	call	0x774	; 0x774 <printf>
	while (read_MCP2515(MCP_TXB0CTRL) & (1<<TXREQ)){//will be cleared when finished
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <read_MCP2515>
 14e:	83 fd       	sbrc	r24, 3
 150:	fb cf       	rjmp	.-10     	; 0x148 <send_CAN_message+0x6c>
	//bit_modify_MCP2515(MCP_TXB0CTRL,(1<<TXREQ),(1<<TXREQ));//Choosing to write to buffer 0
	
	//write_MCP2515(MCP_TXB0CTRL,);
	
	//load SIDL
	write_MCP2515(MCP_TXB0_SIDL, msg.ID << 5);
 152:	68 2d       	mov	r22, r8
 154:	62 95       	swap	r22
 156:	66 0f       	add	r22, r22
 158:	60 7e       	andi	r22, 0xE0	; 224
 15a:	82 e3       	ldi	r24, 0x32	; 50
 15c:	0e 94 66 01 	call	0x2cc	; 0x2cc <write_MCP2515>
	
	//load SIDH
	write_MCP2515(MCP_TXB0_SIDH, msg.ID >> 3);
 160:	68 2d       	mov	r22, r8
 162:	66 95       	lsr	r22
 164:	66 95       	lsr	r22
 166:	66 95       	lsr	r22
 168:	81 e3       	ldi	r24, 0x31	; 49
 16a:	0e 94 66 01 	call	0x2cc	; 0x2cc <write_MCP2515>

	
	//load DLC
	//bit_modify_MCP2515(MCP_TXB0_DLC, 0x0F,(char)msg.length);//setting datalength
	
	write_MCP2515(MCP_TXB0_DLC,(char)msg.length);
 16e:	6c 2d       	mov	r22, r12
 170:	85 e3       	ldi	r24, 0x35	; 53
 172:	0e 94 66 01 	call	0x2cc	; 0x2cc <write_MCP2515>
	
	//if data--> TXBnDm load
	//write_MCP2515(MCP_TXB0_D0,(char)msg.data);
	
	/*PUTTING DATA IN DATABUFFER*/
	for (int i=0; i < msg.length; i++){
 176:	d1 2c       	mov	r13, r1
 178:	1c 14       	cp	r1, r12
 17a:	1d 04       	cpc	r1, r13
 17c:	a4 f4       	brge	.+40     	; 0x1a6 <send_CAN_message+0xca>
 17e:	7e 01       	movw	r14, r28
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	e8 0e       	add	r14, r24
 184:	f1 1c       	adc	r15, r1
 186:	00 e0       	ldi	r16, 0x00	; 0
 188:	10 e0       	ldi	r17, 0x00	; 0
		//printf(" I: %i\n",i);
		write_MCP2515(MCP_TXB0_D0+i,(char)msg.data[i]);
 18a:	f7 01       	movw	r30, r14
 18c:	60 81       	ld	r22, Z
 18e:	f2 e0       	ldi	r31, 0x02	; 2
 190:	ef 0e       	add	r14, r31
 192:	f1 1c       	adc	r15, r1
 194:	86 e3       	ldi	r24, 0x36	; 54
 196:	80 0f       	add	r24, r16
 198:	0e 94 66 01 	call	0x2cc	; 0x2cc <write_MCP2515>
	
	//if data--> TXBnDm load
	//write_MCP2515(MCP_TXB0_D0,(char)msg.data);
	
	/*PUTTING DATA IN DATABUFFER*/
	for (int i=0; i < msg.length; i++){
 19c:	0f 5f       	subi	r16, 0xFF	; 255
 19e:	1f 4f       	sbci	r17, 0xFF	; 255
 1a0:	0c 15       	cp	r16, r12
 1a2:	1d 05       	cpc	r17, r13
 1a4:	94 f3       	brlt	.-28     	; 0x18a <send_CAN_message+0xae>
	//printf("MCP_TXB0_SIDL: %x\n", read_MCP2515(MCP_TXB0_SIDL));
	//printf("MCP_TXB0_SIDH: %x\n", read_MCP2515(MCP_TXB0_SIDH));

	
	//printf("reg: %x\n", read_MCP2515(MCP_TXB0_SIDH));
	printf("MCP_TXB0CTRL: %x\n", read_MCP2515(MCP_TXB0CTRL));
 1a6:	80 e3       	ldi	r24, 0x30	; 48
 1a8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <read_MCP2515>
 1ac:	1f 92       	push	r1
 1ae:	8f 93       	push	r24
 1b0:	06 e0       	ldi	r16, 0x06	; 6
 1b2:	11 e0       	ldi	r17, 0x01	; 1
 1b4:	1f 93       	push	r17
 1b6:	0f 93       	push	r16
 1b8:	0e 94 ba 03 	call	0x774	; 0x774 <printf>
	/*REQUEST TO SEND*/
	request_to_send_MCP2515(0x01);// Setting the TXBnCTRL for buffer 0.
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <request_to_send_MCP2515>
	printf("MCP_TXB0CTRL: %x\n", read_MCP2515(MCP_TXB0CTRL));
 1c2:	80 e3       	ldi	r24, 0x30	; 48
 1c4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <read_MCP2515>
 1c8:	1f 92       	push	r1
 1ca:	8f 93       	push	r24
 1cc:	1f 93       	push	r17
 1ce:	0f 93       	push	r16
 1d0:	0e 94 ba 03 	call	0x774	; 0x774 <printf>
	printf("Requesting to send!\n");
 1d4:	88 e1       	ldi	r24, 0x18	; 24
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 ce 03 	call	0x79c	; 0x79c <puts>
	printf("CANINTF: %x\n", read_MCP2515(MCP_CANINTF));
 1dc:	8c e2       	ldi	r24, 0x2C	; 44
 1de:	0e 94 54 01 	call	0x2a8	; 0x2a8 <read_MCP2515>
 1e2:	1f 92       	push	r1
 1e4:	8f 93       	push	r24
 1e6:	8c e2       	ldi	r24, 0x2C	; 44
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	9f 93       	push	r25
 1ec:	8f 93       	push	r24
 1ee:	0e 94 ba 03 	call	0x774	; 0x774 <printf>
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
	/*CHECK IF TRANSMIT SUCCEEDS*/

	/*ABORT TRANSMISSION?*/
	
}
 1fc:	62 96       	adiw	r28, 0x12	; 18
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	ff 90       	pop	r15
 212:	ef 90       	pop	r14
 214:	df 90       	pop	r13
 216:	cf 90       	pop	r12
 218:	bf 90       	pop	r11
 21a:	af 90       	pop	r10
 21c:	9f 90       	pop	r9
 21e:	8f 90       	pop	r8
 220:	08 95       	ret

00000222 <CAN_test>:
#include <util/delay.h> //for _delay_ms()

#define RX0IF 0


void CAN_test(){
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
 22a:	62 97       	sbiw	r28, 0x12	; 18
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	de bf       	out	0x3e, r29	; 62
 232:	0f be       	out	0x3f, r0	; 63
 234:	cd bf       	out	0x3d, r28	; 61
	CAN_init();
 236:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	
	CAN_struct msg;
	msg.ID=3;
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	89 83       	std	Y+1, r24	; 0x01
	msg.length=8;
 23e:	88 e0       	ldi	r24, 0x08	; 8
 240:	8a 83       	std	Y+2, r24	; 0x02
	msg.data[0]='K';
 242:	8b e4       	ldi	r24, 0x4B	; 75
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	9c 83       	std	Y+4, r25	; 0x04
 248:	8b 83       	std	Y+3, r24	; 0x03
	msg.data[1]='A';
 24a:	81 e4       	ldi	r24, 0x41	; 65
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	9e 83       	std	Y+6, r25	; 0x06
 250:	8d 83       	std	Y+5, r24	; 0x05
	msg.data[2]='R';
 252:	22 e5       	ldi	r18, 0x52	; 82
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	38 87       	std	Y+8, r19	; 0x08
 258:	2f 83       	std	Y+7, r18	; 0x07
	msg.data[3]='L';
 25a:	2c e4       	ldi	r18, 0x4C	; 76
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	3a 87       	std	Y+10, r19	; 0x0a
 260:	29 87       	std	Y+9, r18	; 0x09
	msg.data[4]='S';
 262:	23 e5       	ldi	r18, 0x53	; 83
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	3c 87       	std	Y+12, r19	; 0x0c
 268:	2b 87       	std	Y+11, r18	; 0x0b
	msg.data[5]='T';
 26a:	24 e5       	ldi	r18, 0x54	; 84
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	3e 87       	std	Y+14, r19	; 0x0e
 270:	2d 87       	std	Y+13, r18	; 0x0d
	msg.data[6]='A';
 272:	98 8b       	std	Y+16, r25	; 0x10
 274:	8f 87       	std	Y+15, r24	; 0x0f
	msg.data[7]='D';
 276:	84 e4       	ldi	r24, 0x44	; 68
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	9a 8b       	std	Y+18, r25	; 0x12
 27c:	89 8b       	std	Y+17, r24	; 0x11
	//bit_modify_MCP2515(MCP_CANCTRL,0xE0,MODE_LOOPBACK);//Enables loop back mode
	while(1){
		send_CAN_message(msg);
 27e:	89 80       	ldd	r8, Y+1	; 0x01
 280:	9a 80       	ldd	r9, Y+2	; 0x02
 282:	ab 80       	ldd	r10, Y+3	; 0x03
 284:	bc 80       	ldd	r11, Y+4	; 0x04
 286:	cd 80       	ldd	r12, Y+5	; 0x05
 288:	de 80       	ldd	r13, Y+6	; 0x06
 28a:	ef 80       	ldd	r14, Y+7	; 0x07
 28c:	f8 84       	ldd	r15, Y+8	; 0x08
 28e:	09 85       	ldd	r16, Y+9	; 0x09
 290:	1a 85       	ldd	r17, Y+10	; 0x0a
 292:	2b 85       	ldd	r18, Y+11	; 0x0b
 294:	3c 85       	ldd	r19, Y+12	; 0x0c
 296:	4d 85       	ldd	r20, Y+13	; 0x0d
 298:	5e 85       	ldd	r21, Y+14	; 0x0e
 29a:	6f 85       	ldd	r22, Y+15	; 0x0f
 29c:	78 89       	ldd	r23, Y+16	; 0x10
 29e:	89 89       	ldd	r24, Y+17	; 0x11
 2a0:	9a 89       	ldd	r25, Y+18	; 0x12
 2a2:	0e 94 6e 00 	call	0xdc	; 0xdc <send_CAN_message>
 2a6:	eb cf       	rjmp	.-42     	; 0x27e <CAN_test+0x5c>

000002a8 <read_MCP2515>:
	SPI_master_init();
	reset_MCP2515();	
}


char read_MCP2515(char read_address){
 2a8:	cf 93       	push	r28
 2aa:	c8 2f       	mov	r28, r24
	spi_chipselect_deactivate();
 2ac:	0e 94 58 03 	call	0x6b0	; 0x6b0 <spi_chipselect_deactivate>
	send_master_SPI(0x03);	//'read' instruction. 
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	0e 94 4b 03 	call	0x696	; 0x696 <send_master_SPI>
	send_master_SPI(read_address);
 2b6:	8c 2f       	mov	r24, r28
 2b8:	0e 94 4b 03 	call	0x696	; 0x696 <send_master_SPI>
	
	char val=read_master_SPI();
 2bc:	0e 94 4f 03 	call	0x69e	; 0x69e <read_master_SPI>
 2c0:	c8 2f       	mov	r28, r24
	spi_chipselect_activate();
 2c2:	0e 94 56 03 	call	0x6ac	; 0x6ac <spi_chipselect_activate>
	return val;
	//PORTB |=(1<<SSn);
}
 2c6:	8c 2f       	mov	r24, r28
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <write_MCP2515>:


void write_MCP2515(char write_address, char write_data){
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	d8 2f       	mov	r29, r24
 2d2:	c6 2f       	mov	r28, r22
	spi_chipselect_deactivate();
 2d4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <spi_chipselect_deactivate>
	send_master_SPI(0x02);	//'write byte' instruction.
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	0e 94 4b 03 	call	0x696	; 0x696 <send_master_SPI>
	send_master_SPI(write_address);
 2de:	8d 2f       	mov	r24, r29
 2e0:	0e 94 4b 03 	call	0x696	; 0x696 <send_master_SPI>
	send_master_SPI(write_data);
 2e4:	8c 2f       	mov	r24, r28
 2e6:	0e 94 4b 03 	call	0x696	; 0x696 <send_master_SPI>
	spi_chipselect_activate();
 2ea:	0e 94 56 03 	call	0x6ac	; 0x6ac <spi_chipselect_activate>
	
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <request_to_send_MCP2515>:

void request_to_send_MCP2515(char RTS_in){
 2f4:	cf 93       	push	r28
 2f6:	c8 2f       	mov	r28, r24
	spi_chipselect_deactivate();
 2f8:	0e 94 58 03 	call	0x6b0	; 0x6b0 <spi_chipselect_deactivate>
	RTS_in = RTS_in % 8;		//Ensures no more than 3 bits proceed.
 2fc:	8c 2f       	mov	r24, r28
 2fe:	87 70       	andi	r24, 0x07	; 7
	send_master_SPI(0x80 + RTS_in);
 300:	80 58       	subi	r24, 0x80	; 128
 302:	0e 94 4b 03 	call	0x696	; 0x696 <send_master_SPI>

	spi_chipselect_activate();
 306:	0e 94 56 03 	call	0x6ac	; 0x6ac <spi_chipselect_activate>
}
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <bit_modify_MCP2515>:
		return repeat;
	}*/
	return out;
}

void bit_modify_MCP2515(char address, char mask_byte, char data){
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	18 2f       	mov	r17, r24
 316:	d6 2f       	mov	r29, r22
 318:	c4 2f       	mov	r28, r20
	spi_chipselect_deactivate();
 31a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <spi_chipselect_deactivate>
	send_master_SPI(0x05);	//'bit modify' instruction.
 31e:	85 e0       	ldi	r24, 0x05	; 5
 320:	0e 94 4b 03 	call	0x696	; 0x696 <send_master_SPI>
	send_master_SPI(address);
 324:	81 2f       	mov	r24, r17
 326:	0e 94 4b 03 	call	0x696	; 0x696 <send_master_SPI>
	send_master_SPI(mask_byte);
 32a:	8d 2f       	mov	r24, r29
 32c:	0e 94 4b 03 	call	0x696	; 0x696 <send_master_SPI>
	send_master_SPI(data);
 330:	8c 2f       	mov	r24, r28
 332:	0e 94 4b 03 	call	0x696	; 0x696 <send_master_SPI>
	spi_chipselect_activate();
 336:	0e 94 56 03 	call	0x6ac	; 0x6ac <spi_chipselect_activate>
}
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	08 95       	ret

00000342 <reset_MCP2515>:

void reset_MCP2515(){
	spi_chipselect_deactivate();
 342:	0e 94 58 03 	call	0x6b0	; 0x6b0 <spi_chipselect_deactivate>
	send_master_SPI(0xC0);	//'reset' instruction.
 346:	80 ec       	ldi	r24, 0xC0	; 192
 348:	0e 94 4b 03 	call	0x696	; 0x696 <send_master_SPI>
	spi_chipselect_activate();
 34c:	0e 94 56 03 	call	0x6ac	; 0x6ac <spi_chipselect_activate>
 350:	08 95       	ret

00000352 <MCP2515_init>:
#include "CAN MCP2515 header files\MCP2515.h"



void MCP2515_init(){
	SPI_master_init();
 352:	0e 94 42 03 	call	0x684	; 0x684 <SPI_master_init>
	reset_MCP2515();	
 356:	0e 94 a1 01 	call	0x342	; 0x342 <reset_MCP2515>
 35a:	08 95       	ret

0000035c <memory_init>:
#include <stdlib.h>
#include <avr/io.h>


void memory_init(void){
	MCUCR|=(1<<SRE);
 35c:	85 b7       	in	r24, 0x35	; 53
 35e:	80 68       	ori	r24, 0x80	; 128
 360:	85 bf       	out	0x35, r24	; 53
	SFIOR|=(1<<XMM2);
 362:	80 b7       	in	r24, 0x30	; 48
 364:	80 62       	ori	r24, 0x20	; 32
 366:	80 bf       	out	0x30, r24	; 48
 368:	08 95       	ret

0000036a <menu_print>:
	} else if (!(current_node->children[arrow_page - 1] == NULL)){
		current_node = current_node->children[arrow_page -1];
	}
	arrow_page = 0;
	menu_print();
}
 36a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <OLED_reset>

 36e:	e0 91 bd 01 	lds	r30, 0x01BD
 372:	f0 91 be 01 	lds	r31, 0x01BE
 376:	62 e0       	ldi	r22, 0x02	; 2
 378:	80 89       	ldd	r24, Z+16	; 0x10
 37a:	91 89       	ldd	r25, Z+17	; 0x11
 37c:	0e 94 87 02 	call	0x50e	; 0x50e <print_to_OLED>
ISR(INT1_vect){
 380:	e0 91 bd 01 	lds	r30, 0x01BD
 384:	f0 91 be 01 	lds	r31, 0x01BE
 388:	62 e0       	ldi	r22, 0x02	; 2
 38a:	82 89       	ldd	r24, Z+18	; 0x12
 38c:	93 89       	ldd	r25, Z+19	; 0x13
 38e:	0e 94 87 02 	call	0x50e	; 0x50e <print_to_OLED>
	current_node = current_node->parent;
 392:	80 91 6c 01 	lds	r24, 0x016C
 396:	0e 94 12 03 	call	0x624	; 0x624 <OLED_print_arrow>
 39a:	08 95       	ret

0000039c <__vector_1>:

void menu_arrow(){
	clear_arrow_space();
	int direction = get_joy_direction();
	if (direction == 0){
	} else if (direction == 3){
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	2f 93       	push	r18
 3a8:	3f 93       	push	r19
 3aa:	4f 93       	push	r20
 3ac:	5f 93       	push	r21
 3ae:	6f 93       	push	r22
 3b0:	7f 93       	push	r23
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	af 93       	push	r26
 3b8:	bf 93       	push	r27
 3ba:	ef 93       	push	r30
 3bc:	ff 93       	push	r31
		arrow_page = arrow_page -1 % DISPLAY_PAGES;
 3be:	e0 91 6c 01 	lds	r30, 0x016C
 3c2:	e1 11       	cpse	r30, r1
 3c4:	0b c0       	rjmp	.+22     	; 0x3dc <__vector_1+0x40>
	} else if (direction == 4){
 3c6:	e0 91 bd 01 	lds	r30, 0x01BD
 3ca:	f0 91 be 01 	lds	r31, 0x01BE
 3ce:	80 81       	ld	r24, Z
 3d0:	91 81       	ldd	r25, Z+1	; 0x01
 3d2:	90 93 be 01 	sts	0x01BE, r25
 3d6:	80 93 bd 01 	sts	0x01BD, r24
 3da:	11 c0       	rjmp	.+34     	; 0x3fe <__vector_1+0x62>
		arrow_page = arrow_page +1 % DISPLAY_PAGES;
 3dc:	80 91 bd 01 	lds	r24, 0x01BD
 3e0:	90 91 be 01 	lds	r25, 0x01BE
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	e8 0f       	add	r30, r24
 3ec:	f9 1f       	adc	r31, r25
 3ee:	80 81       	ld	r24, Z
 3f0:	91 81       	ldd	r25, Z+1	; 0x01
 3f2:	00 97       	sbiw	r24, 0x00	; 0
 3f4:	21 f0       	breq	.+8      	; 0x3fe <__vector_1+0x62>
	}
 3f6:	90 93 be 01 	sts	0x01BE, r25
 3fa:	80 93 bd 01 	sts	0x01BD, r24
	OLED_print_arrow(arrow_page);
}
 3fe:	10 92 6c 01 	sts	0x016C, r1

 402:	0e 94 b5 01 	call	0x36a	; 0x36a <menu_print>
/* Left slider button, INT0_vect, pin PD2. Right slider button, INT1_vect, pin PD3.*/
 406:	ff 91       	pop	r31
 408:	ef 91       	pop	r30
 40a:	bf 91       	pop	r27
 40c:	af 91       	pop	r26
 40e:	9f 91       	pop	r25
 410:	8f 91       	pop	r24
 412:	7f 91       	pop	r23
 414:	6f 91       	pop	r22
 416:	5f 91       	pop	r21
 418:	4f 91       	pop	r20
 41a:	3f 91       	pop	r19
 41c:	2f 91       	pop	r18
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

00000428 <__vector_2>:
ISR(INT0_vect){//, INT1_vect){
	if (arrow_page <= 0){
 428:	1f 92       	push	r1
 42a:	0f 92       	push	r0
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	0f 92       	push	r0
 430:	11 24       	eor	r1, r1
 432:	2f 93       	push	r18
 434:	3f 93       	push	r19
 436:	4f 93       	push	r20
 438:	5f 93       	push	r21
 43a:	6f 93       	push	r22
 43c:	7f 93       	push	r23
 43e:	8f 93       	push	r24
 440:	9f 93       	push	r25
 442:	af 93       	push	r26
 444:	bf 93       	push	r27
 446:	ef 93       	push	r30
 448:	ff 93       	push	r31
		current_node = current_node->parent;
 44a:	e0 91 bd 01 	lds	r30, 0x01BD
 44e:	f0 91 be 01 	lds	r31, 0x01BE
 452:	80 81       	ld	r24, Z
 454:	91 81       	ldd	r25, Z+1	; 0x01
 456:	90 93 be 01 	sts	0x01BE, r25
 45a:	80 93 bd 01 	sts	0x01BD, r24
	} else if (!(current_node->children[arrow_page - 1] == NULL)){
 45e:	0e 94 b5 01 	call	0x36a	; 0x36a <menu_print>
		current_node = current_node->children[arrow_page -1];
 462:	ff 91       	pop	r31
 464:	ef 91       	pop	r30
 466:	bf 91       	pop	r27
 468:	af 91       	pop	r26
 46a:	9f 91       	pop	r25
 46c:	8f 91       	pop	r24
 46e:	7f 91       	pop	r23
 470:	6f 91       	pop	r22
 472:	5f 91       	pop	r21
 474:	4f 91       	pop	r20
 476:	3f 91       	pop	r19
 478:	2f 91       	pop	r18
 47a:	0f 90       	pop	r0
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	0f 90       	pop	r0
 480:	1f 90       	pop	r1
 482:	18 95       	reti

00000484 <goto_OLED_page>:
	goto_OLED_char_column(0);
	return;
}

void goto_OLED_page(uint8_t page){
	current_page = page % DISPLAY_PAGES;
 484:	87 70       	andi	r24, 0x07	; 7
 486:	80 93 c4 01 	sts	0x01C4, r24
	write_OLED_cmd(0xB0 + current_page);
 48a:	80 55       	subi	r24, 0x50	; 80
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 48c:	80 93 00 10 	sts	0x1000, r24
 490:	08 95       	ret

00000492 <goto_OLED_char_column>:
	write_OLED_cmd(0xB0 + current_page);
	return;
}

void goto_OLED_char_column(uint8_t column){
	uint8_t c = column * font_type.width;
 492:	90 91 bf 01 	lds	r25, 0x01BF
 496:	89 9f       	mul	r24, r25
 498:	90 2d       	mov	r25, r0
 49a:	11 24       	eor	r1, r1
	uint8_t low_bits = c & 0x0f;
 49c:	29 2f       	mov	r18, r25
 49e:	2f 70       	andi	r18, 0x0F	; 15
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 4a0:	e0 e0       	ldi	r30, 0x00	; 0
 4a2:	f0 e1       	ldi	r31, 0x10	; 16
 4a4:	20 83       	st	Z, r18
void goto_OLED_char_column(uint8_t column){
	uint8_t c = column * font_type.width;
	uint8_t low_bits = c & 0x0f;
	uint8_t high_bits = c & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
 4a6:	92 95       	swap	r25
 4a8:	9f 70       	andi	r25, 0x0F	; 15
 4aa:	90 5f       	subi	r25, 0xF0	; 240
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 4ac:	90 83       	st	Z, r25
	uint8_t low_bits = c & 0x0f;
	uint8_t high_bits = c & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
	
	current_column = column;
 4ae:	80 93 c5 01 	sts	0x01C5, r24
 4b2:	08 95       	ret

000004b4 <OLED_home>:
	OLED_home();
	return;
}

void OLED_home(){
	goto_OLED_page(0);
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 42 02 	call	0x484	; 0x484 <goto_OLED_page>
	goto_OLED_char_column(0);
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	0e 94 49 02 	call	0x492	; 0x492 <goto_OLED_char_column>
 4c0:	08 95       	ret

000004c2 <goto_OLED_physical_column>:
	current_column = temp_col;
	return;
}

void goto_OLED_physical_column(uint8_t column){
	uint8_t low_bits = column & 0x0f;
 4c2:	98 2f       	mov	r25, r24
 4c4:	9f 70       	andi	r25, 0x0F	; 15
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 4c6:	e0 e0       	ldi	r30, 0x00	; 0
 4c8:	f0 e1       	ldi	r31, 0x10	; 16
 4ca:	90 83       	st	Z, r25

void goto_OLED_physical_column(uint8_t column){
	uint8_t low_bits = column & 0x0f;
	uint8_t high_bits = column & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
 4cc:	98 2f       	mov	r25, r24
 4ce:	92 95       	swap	r25
 4d0:	9f 70       	andi	r25, 0x0F	; 15
 4d2:	90 5f       	subi	r25, 0xF0	; 240
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 4d4:	90 83       	st	Z, r25
	uint8_t low_bits = column & 0x0f;
	uint8_t high_bits = column & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
	
	current_column = column;
 4d6:	80 93 c5 01 	sts	0x01C5, r24
 4da:	08 95       	ret

000004dc <clear_OLED_page>:
	return;
}

void clear_OLED_page(uint8_t page){
	goto_OLED_page(page);
 4dc:	0e 94 42 02 	call	0x484	; 0x484 <goto_OLED_page>
	for (uint8_t i = 0; i < DISPLAY_COLUMNS; i++){
 4e0:	80 e0       	ldi	r24, 0x00	; 0
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 4e2:	e0 e0       	ldi	r30, 0x00	; 0
 4e4:	f2 e1       	ldi	r31, 0x12	; 18
 4e6:	10 82       	st	Z, r1
	return;
}

void clear_OLED_page(uint8_t page){
	goto_OLED_page(page);
	for (uint8_t i = 0; i < DISPLAY_COLUMNS; i++){
 4e8:	8f 5f       	subi	r24, 0xFF	; 255
 4ea:	80 38       	cpi	r24, 0x80	; 128
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <clear_OLED_page+0xa>
		write_OLED_data(0);
	}
	return;
}
 4ee:	08 95       	ret

000004f0 <OLED_reset>:
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
}


void OLED_reset(){
 4f0:	cf 93       	push	r28
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 4f2:	80 e4       	ldi	r24, 0x40	; 64
 4f4:	80 93 00 10 	sts	0x1000, r24
}


void OLED_reset(){
	write_OLED_cmd(0x40);		//Set display line start at page 0. 
	for (uint8_t i = 0; i < DISPLAY_PAGES; i++){
 4f8:	c0 e0       	ldi	r28, 0x00	; 0
		clear_OLED_page(i);
 4fa:	8c 2f       	mov	r24, r28
 4fc:	0e 94 6e 02 	call	0x4dc	; 0x4dc <clear_OLED_page>
}


void OLED_reset(){
	write_OLED_cmd(0x40);		//Set display line start at page 0. 
	for (uint8_t i = 0; i < DISPLAY_PAGES; i++){
 500:	cf 5f       	subi	r28, 0xFF	; 255
 502:	c8 30       	cpi	r28, 0x08	; 8
 504:	d1 f7       	brne	.-12     	; 0x4fa <OLED_reset+0xa>
		clear_OLED_page(i);
	}
	OLED_home();
 506:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <OLED_home>
	return;
}
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <print_to_OLED>:

void OLED_pos(uint8_t page, uint8_t column){
	return;
}

void print_to_OLED(const char * string, uint8_t start_column){
 50e:	3f 92       	push	r3
 510:	4f 92       	push	r4
 512:	5f 92       	push	r5
 514:	6f 92       	push	r6
 516:	7f 92       	push	r7
 518:	8f 92       	push	r8
 51a:	9f 92       	push	r9
 51c:	af 92       	push	r10
 51e:	bf 92       	push	r11
 520:	cf 92       	push	r12
 522:	df 92       	push	r13
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	ec 01       	movw	r28, r24
 532:	36 2e       	mov	r3, r22
	goto_OLED_char_column(start_column);
 534:	86 2f       	mov	r24, r22
 536:	0e 94 49 02 	call	0x492	; 0x492 <goto_OLED_char_column>
	int length = strlen(string);
 53a:	fe 01       	movw	r30, r28
 53c:	01 90       	ld	r0, Z+
 53e:	00 20       	and	r0, r0
 540:	e9 f7       	brne	.-6      	; 0x53c <print_to_OLED+0x2e>
 542:	31 97       	sbiw	r30, 0x01	; 1
 544:	3f 01       	movw	r6, r30
 546:	6c 1a       	sub	r6, r28
 548:	7d 0a       	sbc	r7, r29
	
	for (int i = 0; i < length; i++){
 54a:	16 14       	cp	r1, r6
 54c:	17 04       	cpc	r1, r7
 54e:	0c f0       	brlt	.+2      	; 0x552 <print_to_OLED+0x44>
 550:	57 c0       	rjmp	.+174    	; 0x600 <print_to_OLED+0xf2>
 552:	4e 01       	movw	r8, r28
 554:	a1 2c       	mov	r10, r1
 556:	b1 2c       	mov	r11, r1
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 558:	cf eb       	ldi	r28, 0xBF	; 191
 55a:	d1 e0       	ldi	r29, 0x01	; 1
 55c:	51 2c       	mov	r5, r1
 55e:	41 2c       	mov	r4, r1
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
 560:	0f 2e       	mov	r0, r31
 562:	f2 ec       	ldi	r31, 0xC2	; 194
 564:	cf 2e       	mov	r12, r31
 566:	f1 e0       	ldi	r31, 0x01	; 1
 568:	df 2e       	mov	r13, r31
 56a:	f0 2d       	mov	r31, r0
 56c:	0f 2e       	mov	r0, r31
 56e:	f1 ec       	ldi	r31, 0xC1	; 193
 570:	ef 2e       	mov	r14, r31
 572:	f1 e0       	ldi	r31, 0x01	; 1
 574:	ff 2e       	mov	r15, r31
 576:	f0 2d       	mov	r31, r0
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 578:	00 e0       	ldi	r16, 0x00	; 0
 57a:	12 e1       	ldi	r17, 0x12	; 18
void print_to_OLED(const char * string, uint8_t start_column){
	goto_OLED_char_column(start_column);
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
		char c = string[i];
 57c:	d4 01       	movw	r26, r8
 57e:	4d 91       	ld	r20, X+
 580:	4d 01       	movw	r8, r26
		if (c == '\n') {
 582:	4a 30       	cpi	r20, 0x0A	; 10
 584:	31 f0       	breq	.+12     	; 0x592 <print_to_OLED+0x84>
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 586:	28 81       	ld	r18, Y
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	12 16       	cp	r1, r18
 58c:	13 06       	cpc	r1, r19
 58e:	6c f0       	brlt	.+26     	; 0x5aa <print_to_OLED+0x9c>
 590:	30 c0       	rjmp	.+96     	; 0x5f2 <print_to_OLED+0xe4>
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
		char c = string[i];
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
 592:	80 91 c4 01 	lds	r24, 0x01C4
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	87 70       	andi	r24, 0x07	; 7
 59c:	90 78       	andi	r25, 0x80	; 128
 59e:	0e 94 42 02 	call	0x484	; 0x484 <goto_OLED_page>
			goto_OLED_char_column(start_column);
 5a2:	83 2d       	mov	r24, r3
 5a4:	0e 94 49 02 	call	0x492	; 0x492 <goto_OLED_char_column>
 5a8:	24 c0       	rjmp	.+72     	; 0x5f2 <print_to_OLED+0xe4>
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 5aa:	85 2d       	mov	r24, r5
 5ac:	94 2d       	mov	r25, r4
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	f7 01       	movw	r30, r14
 5b2:	60 81       	ld	r22, Z
 5b4:	da 01       	movw	r26, r20
 5b6:	a6 1b       	sub	r26, r22
 5b8:	b1 09       	sbc	r27, r1
 5ba:	2a 9f       	mul	r18, r26
 5bc:	f0 01       	movw	r30, r0
 5be:	2b 9f       	mul	r18, r27
 5c0:	f0 0d       	add	r31, r0
 5c2:	3a 9f       	mul	r19, r26
 5c4:	f0 0d       	add	r31, r0
 5c6:	11 24       	eor	r1, r1
 5c8:	e8 0f       	add	r30, r24
 5ca:	f9 1f       	adc	r31, r25
 5cc:	d6 01       	movw	r26, r12
 5ce:	2d 91       	ld	r18, X+
 5d0:	3c 91       	ld	r19, X
 5d2:	e2 0f       	add	r30, r18
 5d4:	f3 1f       	adc	r31, r19
 5d6:	e4 91       	lpm	r30, Z
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 5d8:	d8 01       	movw	r26, r16
 5da:	ec 93       	st	X, r30
		else{
			for (int j = 0; j < font_type.width; j++){
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
				//write_OLED_data(pgm_read_byte(&font[c-font_type.ascii_offset][j]));
				//write_OLED_data(pgm_read_byte(&font_type.data[c-font_type.ascii_offset][j]));
				current_column = current_column + font_type.width;
 5dc:	30 91 c5 01 	lds	r19, 0x01C5
 5e0:	28 81       	ld	r18, Y
 5e2:	32 0f       	add	r19, r18
 5e4:	30 93 c5 01 	sts	0x01C5, r19
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	82 17       	cp	r24, r18
 5ee:	93 07       	cpc	r25, r19
 5f0:	fc f2       	brlt	.-66     	; 0x5b0 <print_to_OLED+0xa2>

void print_to_OLED(const char * string, uint8_t start_column){
	goto_OLED_char_column(start_column);
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
 5f2:	bf ef       	ldi	r27, 0xFF	; 255
 5f4:	ab 1a       	sub	r10, r27
 5f6:	bb 0a       	sbc	r11, r27
 5f8:	6a 14       	cp	r6, r10
 5fa:	7b 04       	cpc	r7, r11
 5fc:	09 f0       	breq	.+2      	; 0x600 <print_to_OLED+0xf2>
 5fe:	be cf       	rjmp	.-132    	; 0x57c <print_to_OLED+0x6e>
				current_column = current_column + font_type.width;
			}
		}
	}
	return;
}
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	1f 91       	pop	r17
 606:	0f 91       	pop	r16
 608:	ff 90       	pop	r15
 60a:	ef 90       	pop	r14
 60c:	df 90       	pop	r13
 60e:	cf 90       	pop	r12
 610:	bf 90       	pop	r11
 612:	af 90       	pop	r10
 614:	9f 90       	pop	r9
 616:	8f 90       	pop	r8
 618:	7f 90       	pop	r7
 61a:	6f 90       	pop	r6
 61c:	5f 90       	pop	r5
 61e:	4f 90       	pop	r4
 620:	3f 90       	pop	r3
 622:	08 95       	ret

00000624 <OLED_print_arrow>:

void OLED_print_arrow(uint8_t page)
{	int temp = current_page;
 624:	cf 93       	push	r28
 626:	c0 91 c4 01 	lds	r28, 0x01C4
	goto_OLED_page(page);
 62a:	0e 94 42 02 	call	0x484	; 0x484 <goto_OLED_page>
	goto_OLED_physical_column(1);
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	0e 94 61 02 	call	0x4c2	; 0x4c2 <goto_OLED_physical_column>
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 634:	e0 e0       	ldi	r30, 0x00	; 0
 636:	f2 e1       	ldi	r31, 0x12	; 18
 638:	98 e1       	ldi	r25, 0x18	; 24
 63a:	90 83       	st	Z, r25
 63c:	90 83       	st	Z, r25
 63e:	8e e7       	ldi	r24, 0x7E	; 126
 640:	80 83       	st	Z, r24
 642:	8c e3       	ldi	r24, 0x3C	; 60
 644:	80 83       	st	Z, r24
 646:	90 83       	st	Z, r25
	write_OLED_data(0b00011000);
	write_OLED_data(0b00011000);
	write_OLED_data(0b01111110);
	write_OLED_data(0b00111100);
	write_OLED_data(0b00011000);
	current_column = ARROW_WIDTH;
 648:	88 e0       	ldi	r24, 0x08	; 8
 64a:	80 93 c5 01 	sts	0x01C5, r24
	
	goto_OLED_page(temp);
 64e:	8c 2f       	mov	r24, r28
 650:	0e 94 42 02 	call	0x484	; 0x484 <goto_OLED_page>
}
 654:	cf 91       	pop	r28
 656:	08 95       	ret

00000658 <main>:
	 //}
	
	
	//ov2////////////////////////////////
	
	DDRE=0x3;
 658:	83 e0       	ldi	r24, 0x03	; 3
 65a:	86 b9       	out	0x06, r24	; 6
	DDRA=0xFF;
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 660:	1b ba       	out	0x1b, r1	; 27
	PORTE=0x2;
 662:	82 e0       	ldi	r24, 0x02	; 2
 664:	87 b9       	out	0x07, r24	; 7
	char temp = read_MCP2515(MCP_CANCTRL);
	printf("Temp: %i\n", temp);
	}*/
	
	
	memory_init();
 666:	0e 94 ae 01 	call	0x35c	; 0x35c <memory_init>
	UART_Init(MYUBRR);
 66a:	8f e1       	ldi	r24, 0x1F	; 31
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <UART_Init>
	printf("Atmega162 start\n");
 672:	8c e5       	ldi	r24, 0x5C	; 92
 674:	91 e0       	ldi	r25, 0x01	; 1
 676:	0e 94 ce 03 	call	0x79c	; 0x79c <puts>
	
	CAN_test();
 67a:	0e 94 11 01 	call	0x222	; 0x222 <CAN_test>
	//CAN_test_communication();
	
	return 0;
	
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	08 95       	ret

00000684 <SPI_master_init>:
	#define SCK		1
#endif


void SPI_master_init(){
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SSn);		//Set MOSI, SCK, SSn output.
 684:	87 b3       	in	r24, 0x17	; 23
 686:	80 6b       	ori	r24, 0xB0	; 176
 688:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~((1<<MISO));		//Set MISO input.
 68a:	be 98       	cbi	0x17, 6	; 23
	PORTB|=(1<<MISO);
 68c:	c6 9a       	sbi	0x18, 6	; 24
	SPCR |= (1<<SPE) | (1<<MSTR)|(1<<SPR0);	//Enable SPI, Master, set clock rate fck/16.
 68e:	8d b1       	in	r24, 0x0d	; 13
 690:	81 65       	ori	r24, 0x51	; 81
 692:	8d b9       	out	0x0d, r24	; 13
 694:	08 95       	ret

00000696 <send_master_SPI>:
	SPCR = (1<<SPE);	//Enable SPI.
}

void send_master_SPI(char data){
	
	SPDR = data;			//Send data.
 696:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF))) {}		//Wait for transmission complete.
 698:	77 9b       	sbis	0x0e, 7	; 14
 69a:	fe cf       	rjmp	.-4      	; 0x698 <send_master_SPI+0x2>
	
}
 69c:	08 95       	ret

0000069e <read_master_SPI>:

char read_master_SPI(){
	
	
	send_master_SPI(0xFF);		//Send dummy byte.		
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	0e 94 4b 03 	call	0x696	; 0x696 <send_master_SPI>
	while (!(SPSR & (1<<SPIF))) {}		//Wait for transmission complete.
 6a4:	77 9b       	sbis	0x0e, 7	; 14
 6a6:	fe cf       	rjmp	.-4      	; 0x6a4 <read_master_SPI+0x6>
	return SPDR;
 6a8:	8f b1       	in	r24, 0x0f	; 15
}
 6aa:	08 95       	ret

000006ac <spi_chipselect_activate>:

void spi_chipselect_activate(){
	PORTB |=(1<<SSn);
 6ac:	c4 9a       	sbi	0x18, 4	; 24
 6ae:	08 95       	ret

000006b0 <spi_chipselect_deactivate>:
}

void spi_chipselect_deactivate(){
	PORTB &=~(1<<SSn);
 6b0:	c4 98       	cbi	0x18, 4	; 24
 6b2:	08 95       	ret

000006b4 <UART_Transmit>:
	}
	
void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer*/
		while( !( UCSR0A & (1<<UDRE0)) )
 6b4:	5d 9b       	sbis	0x0b, 5	; 11
 6b6:	fe cf       	rjmp	.-4      	; 0x6b4 <UART_Transmit>
		;
	/* Put data into buffer, sends the data*/
		UDR0 = data;
 6b8:	8c b9       	out	0x0c, r24	; 12
 6ba:	08 95       	ret

000006bc <UART_Receive>:
}

unsigned char UART_Receive(void)
	{
		/* Wait for data to be received*/
		while( !(UCSR0A & (1<<RXC0)) )
 6bc:	5f 9b       	sbis	0x0b, 7	; 11
 6be:	fe cf       	rjmp	.-4      	; 0x6bc <UART_Receive>
			;
		/* Get and return received data from buffer*/
		return UDR0;
 6c0:	8c b1       	in	r24, 0x0c	; 12
 6c2:	08 95       	ret

000006c4 <UART_Init>:
#define MYUBRR FOSC/16/BAUD-1

void UART_Init(unsigned int ubrr)
	{
		/* Set baud rate */
		UBRR0H = (unsigned char)(ubrr>>8);
 6c4:	90 bd       	out	0x20, r25	; 32
		UBRR0L = (unsigned char)ubrr;
 6c6:	89 b9       	out	0x09, r24	; 9
		/* Enable receiver and transmitter */
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 6c8:	88 e1       	ldi	r24, 0x18	; 24
 6ca:	8a b9       	out	0x0a, r24	; 10
		/* 
		Set frame format: 8data, 2stop bit
		*/
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 6cc:	8e e8       	ldi	r24, 0x8E	; 142
 6ce:	80 bd       	out	0x20, r24	; 32
		fdevopen(&UART_Transmit, &UART_Receive);
 6d0:	6e e5       	ldi	r22, 0x5E	; 94
 6d2:	73 e0       	ldi	r23, 0x03	; 3
 6d4:	8a e5       	ldi	r24, 0x5A	; 90
 6d6:	93 e0       	ldi	r25, 0x03	; 3
 6d8:	0e 94 6f 03 	call	0x6de	; 0x6de <fdevopen>
 6dc:	08 95       	ret

000006de <fdevopen>:
 6de:	0f 93       	push	r16
 6e0:	1f 93       	push	r17
 6e2:	cf 93       	push	r28
 6e4:	df 93       	push	r29
 6e6:	ec 01       	movw	r28, r24
 6e8:	8b 01       	movw	r16, r22
 6ea:	00 97       	sbiw	r24, 0x00	; 0
 6ec:	31 f4       	brne	.+12     	; 0x6fa <fdevopen+0x1c>
 6ee:	61 15       	cp	r22, r1
 6f0:	71 05       	cpc	r23, r1
 6f2:	19 f4       	brne	.+6      	; 0x6fa <fdevopen+0x1c>
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	38 c0       	rjmp	.+112    	; 0x76a <fdevopen+0x8c>
 6fa:	6e e0       	ldi	r22, 0x0E	; 14
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 cd 05 	call	0xb9a	; 0xb9a <calloc>
 706:	fc 01       	movw	r30, r24
 708:	00 97       	sbiw	r24, 0x00	; 0
 70a:	a1 f3       	breq	.-24     	; 0x6f4 <fdevopen+0x16>
 70c:	80 e8       	ldi	r24, 0x80	; 128
 70e:	83 83       	std	Z+3, r24	; 0x03
 710:	01 15       	cp	r16, r1
 712:	11 05       	cpc	r17, r1
 714:	71 f0       	breq	.+28     	; 0x732 <fdevopen+0x54>
 716:	13 87       	std	Z+11, r17	; 0x0b
 718:	02 87       	std	Z+10, r16	; 0x0a
 71a:	81 e8       	ldi	r24, 0x81	; 129
 71c:	83 83       	std	Z+3, r24	; 0x03
 71e:	80 91 c6 01 	lds	r24, 0x01C6
 722:	90 91 c7 01 	lds	r25, 0x01C7
 726:	89 2b       	or	r24, r25
 728:	21 f4       	brne	.+8      	; 0x732 <fdevopen+0x54>
 72a:	f0 93 c7 01 	sts	0x01C7, r31
 72e:	e0 93 c6 01 	sts	0x01C6, r30
 732:	20 97       	sbiw	r28, 0x00	; 0
 734:	c9 f0       	breq	.+50     	; 0x768 <fdevopen+0x8a>
 736:	d1 87       	std	Z+9, r29	; 0x09
 738:	c0 87       	std	Z+8, r28	; 0x08
 73a:	83 81       	ldd	r24, Z+3	; 0x03
 73c:	82 60       	ori	r24, 0x02	; 2
 73e:	83 83       	std	Z+3, r24	; 0x03
 740:	80 91 c8 01 	lds	r24, 0x01C8
 744:	90 91 c9 01 	lds	r25, 0x01C9
 748:	89 2b       	or	r24, r25
 74a:	71 f4       	brne	.+28     	; 0x768 <fdevopen+0x8a>
 74c:	f0 93 c9 01 	sts	0x01C9, r31
 750:	e0 93 c8 01 	sts	0x01C8, r30
 754:	80 91 ca 01 	lds	r24, 0x01CA
 758:	90 91 cb 01 	lds	r25, 0x01CB
 75c:	89 2b       	or	r24, r25
 75e:	21 f4       	brne	.+8      	; 0x768 <fdevopen+0x8a>
 760:	f0 93 cb 01 	sts	0x01CB, r31
 764:	e0 93 ca 01 	sts	0x01CA, r30
 768:	cf 01       	movw	r24, r30
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	1f 91       	pop	r17
 770:	0f 91       	pop	r16
 772:	08 95       	ret

00000774 <printf>:
 774:	a0 e0       	ldi	r26, 0x00	; 0
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	e0 ec       	ldi	r30, 0xC0	; 192
 77a:	f3 e0       	ldi	r31, 0x03	; 3
 77c:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__prologue_saves__+0x20>
 780:	fe 01       	movw	r30, r28
 782:	35 96       	adiw	r30, 0x05	; 5
 784:	61 91       	ld	r22, Z+
 786:	71 91       	ld	r23, Z+
 788:	af 01       	movw	r20, r30
 78a:	80 91 c8 01 	lds	r24, 0x01C8
 78e:	90 91 c9 01 	lds	r25, 0x01C9
 792:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <vfprintf>
 796:	e2 e0       	ldi	r30, 0x02	; 2
 798:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__epilogue_restores__+0x20>

0000079c <puts>:
 79c:	0f 93       	push	r16
 79e:	1f 93       	push	r17
 7a0:	cf 93       	push	r28
 7a2:	df 93       	push	r29
 7a4:	e0 91 c8 01 	lds	r30, 0x01C8
 7a8:	f0 91 c9 01 	lds	r31, 0x01C9
 7ac:	23 81       	ldd	r18, Z+3	; 0x03
 7ae:	21 ff       	sbrs	r18, 1
 7b0:	1b c0       	rjmp	.+54     	; 0x7e8 <puts+0x4c>
 7b2:	ec 01       	movw	r28, r24
 7b4:	00 e0       	ldi	r16, 0x00	; 0
 7b6:	10 e0       	ldi	r17, 0x00	; 0
 7b8:	89 91       	ld	r24, Y+
 7ba:	60 91 c8 01 	lds	r22, 0x01C8
 7be:	70 91 c9 01 	lds	r23, 0x01C9
 7c2:	db 01       	movw	r26, r22
 7c4:	18 96       	adiw	r26, 0x08	; 8
 7c6:	ed 91       	ld	r30, X+
 7c8:	fc 91       	ld	r31, X
 7ca:	19 97       	sbiw	r26, 0x09	; 9
 7cc:	88 23       	and	r24, r24
 7ce:	31 f0       	breq	.+12     	; 0x7dc <puts+0x40>
 7d0:	09 95       	icall
 7d2:	89 2b       	or	r24, r25
 7d4:	89 f3       	breq	.-30     	; 0x7b8 <puts+0x1c>
 7d6:	0f ef       	ldi	r16, 0xFF	; 255
 7d8:	1f ef       	ldi	r17, 0xFF	; 255
 7da:	ee cf       	rjmp	.-36     	; 0x7b8 <puts+0x1c>
 7dc:	8a e0       	ldi	r24, 0x0A	; 10
 7de:	09 95       	icall
 7e0:	89 2b       	or	r24, r25
 7e2:	11 f4       	brne	.+4      	; 0x7e8 <puts+0x4c>
 7e4:	c8 01       	movw	r24, r16
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <puts+0x50>
 7e8:	8f ef       	ldi	r24, 0xFF	; 255
 7ea:	9f ef       	ldi	r25, 0xFF	; 255
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	08 95       	ret

000007f6 <vfprintf>:
 7f6:	ac e0       	ldi	r26, 0x0C	; 12
 7f8:	b0 e0       	ldi	r27, 0x00	; 0
 7fa:	e1 e0       	ldi	r30, 0x01	; 1
 7fc:	f4 e0       	ldi	r31, 0x04	; 4
 7fe:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__prologue_saves__>
 802:	7c 01       	movw	r14, r24
 804:	6b 01       	movw	r12, r22
 806:	8a 01       	movw	r16, r20
 808:	fc 01       	movw	r30, r24
 80a:	17 82       	std	Z+7, r1	; 0x07
 80c:	16 82       	std	Z+6, r1	; 0x06
 80e:	83 81       	ldd	r24, Z+3	; 0x03
 810:	81 ff       	sbrs	r24, 1
 812:	bd c1       	rjmp	.+890    	; 0xb8e <vfprintf+0x398>
 814:	ce 01       	movw	r24, r28
 816:	01 96       	adiw	r24, 0x01	; 1
 818:	4c 01       	movw	r8, r24
 81a:	f7 01       	movw	r30, r14
 81c:	93 81       	ldd	r25, Z+3	; 0x03
 81e:	f6 01       	movw	r30, r12
 820:	93 fd       	sbrc	r25, 3
 822:	85 91       	lpm	r24, Z+
 824:	93 ff       	sbrs	r25, 3
 826:	81 91       	ld	r24, Z+
 828:	6f 01       	movw	r12, r30
 82a:	88 23       	and	r24, r24
 82c:	09 f4       	brne	.+2      	; 0x830 <vfprintf+0x3a>
 82e:	ab c1       	rjmp	.+854    	; 0xb86 <vfprintf+0x390>
 830:	85 32       	cpi	r24, 0x25	; 37
 832:	39 f4       	brne	.+14     	; 0x842 <vfprintf+0x4c>
 834:	93 fd       	sbrc	r25, 3
 836:	85 91       	lpm	r24, Z+
 838:	93 ff       	sbrs	r25, 3
 83a:	81 91       	ld	r24, Z+
 83c:	6f 01       	movw	r12, r30
 83e:	85 32       	cpi	r24, 0x25	; 37
 840:	29 f4       	brne	.+10     	; 0x84c <vfprintf+0x56>
 842:	b7 01       	movw	r22, r14
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
 84a:	e7 cf       	rjmp	.-50     	; 0x81a <vfprintf+0x24>
 84c:	51 2c       	mov	r5, r1
 84e:	31 2c       	mov	r3, r1
 850:	20 e0       	ldi	r18, 0x00	; 0
 852:	20 32       	cpi	r18, 0x20	; 32
 854:	a0 f4       	brcc	.+40     	; 0x87e <vfprintf+0x88>
 856:	8b 32       	cpi	r24, 0x2B	; 43
 858:	69 f0       	breq	.+26     	; 0x874 <vfprintf+0x7e>
 85a:	30 f4       	brcc	.+12     	; 0x868 <vfprintf+0x72>
 85c:	80 32       	cpi	r24, 0x20	; 32
 85e:	59 f0       	breq	.+22     	; 0x876 <vfprintf+0x80>
 860:	83 32       	cpi	r24, 0x23	; 35
 862:	69 f4       	brne	.+26     	; 0x87e <vfprintf+0x88>
 864:	20 61       	ori	r18, 0x10	; 16
 866:	2c c0       	rjmp	.+88     	; 0x8c0 <vfprintf+0xca>
 868:	8d 32       	cpi	r24, 0x2D	; 45
 86a:	39 f0       	breq	.+14     	; 0x87a <vfprintf+0x84>
 86c:	80 33       	cpi	r24, 0x30	; 48
 86e:	39 f4       	brne	.+14     	; 0x87e <vfprintf+0x88>
 870:	21 60       	ori	r18, 0x01	; 1
 872:	26 c0       	rjmp	.+76     	; 0x8c0 <vfprintf+0xca>
 874:	22 60       	ori	r18, 0x02	; 2
 876:	24 60       	ori	r18, 0x04	; 4
 878:	23 c0       	rjmp	.+70     	; 0x8c0 <vfprintf+0xca>
 87a:	28 60       	ori	r18, 0x08	; 8
 87c:	21 c0       	rjmp	.+66     	; 0x8c0 <vfprintf+0xca>
 87e:	27 fd       	sbrc	r18, 7
 880:	27 c0       	rjmp	.+78     	; 0x8d0 <vfprintf+0xda>
 882:	30 ed       	ldi	r19, 0xD0	; 208
 884:	38 0f       	add	r19, r24
 886:	3a 30       	cpi	r19, 0x0A	; 10
 888:	78 f4       	brcc	.+30     	; 0x8a8 <vfprintf+0xb2>
 88a:	26 ff       	sbrs	r18, 6
 88c:	06 c0       	rjmp	.+12     	; 0x89a <vfprintf+0xa4>
 88e:	fa e0       	ldi	r31, 0x0A	; 10
 890:	5f 9e       	mul	r5, r31
 892:	30 0d       	add	r19, r0
 894:	11 24       	eor	r1, r1
 896:	53 2e       	mov	r5, r19
 898:	13 c0       	rjmp	.+38     	; 0x8c0 <vfprintf+0xca>
 89a:	8a e0       	ldi	r24, 0x0A	; 10
 89c:	38 9e       	mul	r3, r24
 89e:	30 0d       	add	r19, r0
 8a0:	11 24       	eor	r1, r1
 8a2:	33 2e       	mov	r3, r19
 8a4:	20 62       	ori	r18, 0x20	; 32
 8a6:	0c c0       	rjmp	.+24     	; 0x8c0 <vfprintf+0xca>
 8a8:	8e 32       	cpi	r24, 0x2E	; 46
 8aa:	21 f4       	brne	.+8      	; 0x8b4 <vfprintf+0xbe>
 8ac:	26 fd       	sbrc	r18, 6
 8ae:	6b c1       	rjmp	.+726    	; 0xb86 <vfprintf+0x390>
 8b0:	20 64       	ori	r18, 0x40	; 64
 8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <vfprintf+0xca>
 8b4:	8c 36       	cpi	r24, 0x6C	; 108
 8b6:	11 f4       	brne	.+4      	; 0x8bc <vfprintf+0xc6>
 8b8:	20 68       	ori	r18, 0x80	; 128
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <vfprintf+0xca>
 8bc:	88 36       	cpi	r24, 0x68	; 104
 8be:	41 f4       	brne	.+16     	; 0x8d0 <vfprintf+0xda>
 8c0:	f6 01       	movw	r30, r12
 8c2:	93 fd       	sbrc	r25, 3
 8c4:	85 91       	lpm	r24, Z+
 8c6:	93 ff       	sbrs	r25, 3
 8c8:	81 91       	ld	r24, Z+
 8ca:	6f 01       	movw	r12, r30
 8cc:	81 11       	cpse	r24, r1
 8ce:	c1 cf       	rjmp	.-126    	; 0x852 <vfprintf+0x5c>
 8d0:	98 2f       	mov	r25, r24
 8d2:	9f 7d       	andi	r25, 0xDF	; 223
 8d4:	95 54       	subi	r25, 0x45	; 69
 8d6:	93 30       	cpi	r25, 0x03	; 3
 8d8:	28 f4       	brcc	.+10     	; 0x8e4 <vfprintf+0xee>
 8da:	0c 5f       	subi	r16, 0xFC	; 252
 8dc:	1f 4f       	sbci	r17, 0xFF	; 255
 8de:	ff e3       	ldi	r31, 0x3F	; 63
 8e0:	f9 83       	std	Y+1, r31	; 0x01
 8e2:	0d c0       	rjmp	.+26     	; 0x8fe <vfprintf+0x108>
 8e4:	83 36       	cpi	r24, 0x63	; 99
 8e6:	31 f0       	breq	.+12     	; 0x8f4 <vfprintf+0xfe>
 8e8:	83 37       	cpi	r24, 0x73	; 115
 8ea:	71 f0       	breq	.+28     	; 0x908 <vfprintf+0x112>
 8ec:	83 35       	cpi	r24, 0x53	; 83
 8ee:	09 f0       	breq	.+2      	; 0x8f2 <vfprintf+0xfc>
 8f0:	5b c0       	rjmp	.+182    	; 0x9a8 <vfprintf+0x1b2>
 8f2:	22 c0       	rjmp	.+68     	; 0x938 <vfprintf+0x142>
 8f4:	f8 01       	movw	r30, r16
 8f6:	80 81       	ld	r24, Z
 8f8:	89 83       	std	Y+1, r24	; 0x01
 8fa:	0e 5f       	subi	r16, 0xFE	; 254
 8fc:	1f 4f       	sbci	r17, 0xFF	; 255
 8fe:	44 24       	eor	r4, r4
 900:	43 94       	inc	r4
 902:	51 2c       	mov	r5, r1
 904:	54 01       	movw	r10, r8
 906:	15 c0       	rjmp	.+42     	; 0x932 <vfprintf+0x13c>
 908:	38 01       	movw	r6, r16
 90a:	f2 e0       	ldi	r31, 0x02	; 2
 90c:	6f 0e       	add	r6, r31
 90e:	71 1c       	adc	r7, r1
 910:	f8 01       	movw	r30, r16
 912:	a0 80       	ld	r10, Z
 914:	b1 80       	ldd	r11, Z+1	; 0x01
 916:	26 ff       	sbrs	r18, 6
 918:	03 c0       	rjmp	.+6      	; 0x920 <vfprintf+0x12a>
 91a:	65 2d       	mov	r22, r5
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	02 c0       	rjmp	.+4      	; 0x924 <vfprintf+0x12e>
 920:	6f ef       	ldi	r22, 0xFF	; 255
 922:	7f ef       	ldi	r23, 0xFF	; 255
 924:	c5 01       	movw	r24, r10
 926:	2c 87       	std	Y+12, r18	; 0x0c
 928:	0e 94 22 07 	call	0xe44	; 0xe44 <strnlen>
 92c:	2c 01       	movw	r4, r24
 92e:	83 01       	movw	r16, r6
 930:	2c 85       	ldd	r18, Y+12	; 0x0c
 932:	2f 77       	andi	r18, 0x7F	; 127
 934:	22 2e       	mov	r2, r18
 936:	17 c0       	rjmp	.+46     	; 0x966 <vfprintf+0x170>
 938:	38 01       	movw	r6, r16
 93a:	f2 e0       	ldi	r31, 0x02	; 2
 93c:	6f 0e       	add	r6, r31
 93e:	71 1c       	adc	r7, r1
 940:	f8 01       	movw	r30, r16
 942:	a0 80       	ld	r10, Z
 944:	b1 80       	ldd	r11, Z+1	; 0x01
 946:	26 ff       	sbrs	r18, 6
 948:	03 c0       	rjmp	.+6      	; 0x950 <vfprintf+0x15a>
 94a:	65 2d       	mov	r22, r5
 94c:	70 e0       	ldi	r23, 0x00	; 0
 94e:	02 c0       	rjmp	.+4      	; 0x954 <vfprintf+0x15e>
 950:	6f ef       	ldi	r22, 0xFF	; 255
 952:	7f ef       	ldi	r23, 0xFF	; 255
 954:	c5 01       	movw	r24, r10
 956:	2c 87       	std	Y+12, r18	; 0x0c
 958:	0e 94 10 07 	call	0xe20	; 0xe20 <strnlen_P>
 95c:	2c 01       	movw	r4, r24
 95e:	2c 85       	ldd	r18, Y+12	; 0x0c
 960:	20 68       	ori	r18, 0x80	; 128
 962:	22 2e       	mov	r2, r18
 964:	83 01       	movw	r16, r6
 966:	23 fc       	sbrc	r2, 3
 968:	1b c0       	rjmp	.+54     	; 0x9a0 <vfprintf+0x1aa>
 96a:	83 2d       	mov	r24, r3
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	48 16       	cp	r4, r24
 970:	59 06       	cpc	r5, r25
 972:	b0 f4       	brcc	.+44     	; 0x9a0 <vfprintf+0x1aa>
 974:	b7 01       	movw	r22, r14
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
 97e:	3a 94       	dec	r3
 980:	f4 cf       	rjmp	.-24     	; 0x96a <vfprintf+0x174>
 982:	f5 01       	movw	r30, r10
 984:	27 fc       	sbrc	r2, 7
 986:	85 91       	lpm	r24, Z+
 988:	27 fe       	sbrs	r2, 7
 98a:	81 91       	ld	r24, Z+
 98c:	5f 01       	movw	r10, r30
 98e:	b7 01       	movw	r22, r14
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
 996:	31 10       	cpse	r3, r1
 998:	3a 94       	dec	r3
 99a:	f1 e0       	ldi	r31, 0x01	; 1
 99c:	4f 1a       	sub	r4, r31
 99e:	51 08       	sbc	r5, r1
 9a0:	41 14       	cp	r4, r1
 9a2:	51 04       	cpc	r5, r1
 9a4:	71 f7       	brne	.-36     	; 0x982 <vfprintf+0x18c>
 9a6:	e5 c0       	rjmp	.+458    	; 0xb72 <vfprintf+0x37c>
 9a8:	84 36       	cpi	r24, 0x64	; 100
 9aa:	11 f0       	breq	.+4      	; 0x9b0 <vfprintf+0x1ba>
 9ac:	89 36       	cpi	r24, 0x69	; 105
 9ae:	39 f5       	brne	.+78     	; 0x9fe <vfprintf+0x208>
 9b0:	f8 01       	movw	r30, r16
 9b2:	27 ff       	sbrs	r18, 7
 9b4:	07 c0       	rjmp	.+14     	; 0x9c4 <vfprintf+0x1ce>
 9b6:	60 81       	ld	r22, Z
 9b8:	71 81       	ldd	r23, Z+1	; 0x01
 9ba:	82 81       	ldd	r24, Z+2	; 0x02
 9bc:	93 81       	ldd	r25, Z+3	; 0x03
 9be:	0c 5f       	subi	r16, 0xFC	; 252
 9c0:	1f 4f       	sbci	r17, 0xFF	; 255
 9c2:	08 c0       	rjmp	.+16     	; 0x9d4 <vfprintf+0x1de>
 9c4:	60 81       	ld	r22, Z
 9c6:	71 81       	ldd	r23, Z+1	; 0x01
 9c8:	88 27       	eor	r24, r24
 9ca:	77 fd       	sbrc	r23, 7
 9cc:	80 95       	com	r24
 9ce:	98 2f       	mov	r25, r24
 9d0:	0e 5f       	subi	r16, 0xFE	; 254
 9d2:	1f 4f       	sbci	r17, 0xFF	; 255
 9d4:	2f 76       	andi	r18, 0x6F	; 111
 9d6:	b2 2e       	mov	r11, r18
 9d8:	97 ff       	sbrs	r25, 7
 9da:	09 c0       	rjmp	.+18     	; 0x9ee <vfprintf+0x1f8>
 9dc:	90 95       	com	r25
 9de:	80 95       	com	r24
 9e0:	70 95       	com	r23
 9e2:	61 95       	neg	r22
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255
 9e6:	8f 4f       	sbci	r24, 0xFF	; 255
 9e8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ea:	20 68       	ori	r18, 0x80	; 128
 9ec:	b2 2e       	mov	r11, r18
 9ee:	2a e0       	ldi	r18, 0x0A	; 10
 9f0:	30 e0       	ldi	r19, 0x00	; 0
 9f2:	a4 01       	movw	r20, r8
 9f4:	0e 94 5f 07 	call	0xebe	; 0xebe <__ultoa_invert>
 9f8:	a8 2e       	mov	r10, r24
 9fa:	a8 18       	sub	r10, r8
 9fc:	44 c0       	rjmp	.+136    	; 0xa86 <vfprintf+0x290>
 9fe:	85 37       	cpi	r24, 0x75	; 117
 a00:	29 f4       	brne	.+10     	; 0xa0c <vfprintf+0x216>
 a02:	2f 7e       	andi	r18, 0xEF	; 239
 a04:	b2 2e       	mov	r11, r18
 a06:	2a e0       	ldi	r18, 0x0A	; 10
 a08:	30 e0       	ldi	r19, 0x00	; 0
 a0a:	25 c0       	rjmp	.+74     	; 0xa56 <vfprintf+0x260>
 a0c:	f2 2f       	mov	r31, r18
 a0e:	f9 7f       	andi	r31, 0xF9	; 249
 a10:	bf 2e       	mov	r11, r31
 a12:	8f 36       	cpi	r24, 0x6F	; 111
 a14:	c1 f0       	breq	.+48     	; 0xa46 <vfprintf+0x250>
 a16:	18 f4       	brcc	.+6      	; 0xa1e <vfprintf+0x228>
 a18:	88 35       	cpi	r24, 0x58	; 88
 a1a:	79 f0       	breq	.+30     	; 0xa3a <vfprintf+0x244>
 a1c:	b4 c0       	rjmp	.+360    	; 0xb86 <vfprintf+0x390>
 a1e:	80 37       	cpi	r24, 0x70	; 112
 a20:	19 f0       	breq	.+6      	; 0xa28 <vfprintf+0x232>
 a22:	88 37       	cpi	r24, 0x78	; 120
 a24:	21 f0       	breq	.+8      	; 0xa2e <vfprintf+0x238>
 a26:	af c0       	rjmp	.+350    	; 0xb86 <vfprintf+0x390>
 a28:	2f 2f       	mov	r18, r31
 a2a:	20 61       	ori	r18, 0x10	; 16
 a2c:	b2 2e       	mov	r11, r18
 a2e:	b4 fe       	sbrs	r11, 4
 a30:	0d c0       	rjmp	.+26     	; 0xa4c <vfprintf+0x256>
 a32:	8b 2d       	mov	r24, r11
 a34:	84 60       	ori	r24, 0x04	; 4
 a36:	b8 2e       	mov	r11, r24
 a38:	09 c0       	rjmp	.+18     	; 0xa4c <vfprintf+0x256>
 a3a:	24 ff       	sbrs	r18, 4
 a3c:	0a c0       	rjmp	.+20     	; 0xa52 <vfprintf+0x25c>
 a3e:	9f 2f       	mov	r25, r31
 a40:	96 60       	ori	r25, 0x06	; 6
 a42:	b9 2e       	mov	r11, r25
 a44:	06 c0       	rjmp	.+12     	; 0xa52 <vfprintf+0x25c>
 a46:	28 e0       	ldi	r18, 0x08	; 8
 a48:	30 e0       	ldi	r19, 0x00	; 0
 a4a:	05 c0       	rjmp	.+10     	; 0xa56 <vfprintf+0x260>
 a4c:	20 e1       	ldi	r18, 0x10	; 16
 a4e:	30 e0       	ldi	r19, 0x00	; 0
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <vfprintf+0x260>
 a52:	20 e1       	ldi	r18, 0x10	; 16
 a54:	32 e0       	ldi	r19, 0x02	; 2
 a56:	f8 01       	movw	r30, r16
 a58:	b7 fe       	sbrs	r11, 7
 a5a:	07 c0       	rjmp	.+14     	; 0xa6a <vfprintf+0x274>
 a5c:	60 81       	ld	r22, Z
 a5e:	71 81       	ldd	r23, Z+1	; 0x01
 a60:	82 81       	ldd	r24, Z+2	; 0x02
 a62:	93 81       	ldd	r25, Z+3	; 0x03
 a64:	0c 5f       	subi	r16, 0xFC	; 252
 a66:	1f 4f       	sbci	r17, 0xFF	; 255
 a68:	06 c0       	rjmp	.+12     	; 0xa76 <vfprintf+0x280>
 a6a:	60 81       	ld	r22, Z
 a6c:	71 81       	ldd	r23, Z+1	; 0x01
 a6e:	80 e0       	ldi	r24, 0x00	; 0
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 5f       	subi	r16, 0xFE	; 254
 a74:	1f 4f       	sbci	r17, 0xFF	; 255
 a76:	a4 01       	movw	r20, r8
 a78:	0e 94 5f 07 	call	0xebe	; 0xebe <__ultoa_invert>
 a7c:	a8 2e       	mov	r10, r24
 a7e:	a8 18       	sub	r10, r8
 a80:	fb 2d       	mov	r31, r11
 a82:	ff 77       	andi	r31, 0x7F	; 127
 a84:	bf 2e       	mov	r11, r31
 a86:	b6 fe       	sbrs	r11, 6
 a88:	0b c0       	rjmp	.+22     	; 0xaa0 <vfprintf+0x2aa>
 a8a:	2b 2d       	mov	r18, r11
 a8c:	2e 7f       	andi	r18, 0xFE	; 254
 a8e:	a5 14       	cp	r10, r5
 a90:	50 f4       	brcc	.+20     	; 0xaa6 <vfprintf+0x2b0>
 a92:	b4 fe       	sbrs	r11, 4
 a94:	0a c0       	rjmp	.+20     	; 0xaaa <vfprintf+0x2b4>
 a96:	b2 fc       	sbrc	r11, 2
 a98:	08 c0       	rjmp	.+16     	; 0xaaa <vfprintf+0x2b4>
 a9a:	2b 2d       	mov	r18, r11
 a9c:	2e 7e       	andi	r18, 0xEE	; 238
 a9e:	05 c0       	rjmp	.+10     	; 0xaaa <vfprintf+0x2b4>
 aa0:	7a 2c       	mov	r7, r10
 aa2:	2b 2d       	mov	r18, r11
 aa4:	03 c0       	rjmp	.+6      	; 0xaac <vfprintf+0x2b6>
 aa6:	7a 2c       	mov	r7, r10
 aa8:	01 c0       	rjmp	.+2      	; 0xaac <vfprintf+0x2b6>
 aaa:	75 2c       	mov	r7, r5
 aac:	24 ff       	sbrs	r18, 4
 aae:	0d c0       	rjmp	.+26     	; 0xaca <vfprintf+0x2d4>
 ab0:	fe 01       	movw	r30, r28
 ab2:	ea 0d       	add	r30, r10
 ab4:	f1 1d       	adc	r31, r1
 ab6:	80 81       	ld	r24, Z
 ab8:	80 33       	cpi	r24, 0x30	; 48
 aba:	11 f4       	brne	.+4      	; 0xac0 <vfprintf+0x2ca>
 abc:	29 7e       	andi	r18, 0xE9	; 233
 abe:	09 c0       	rjmp	.+18     	; 0xad2 <vfprintf+0x2dc>
 ac0:	22 ff       	sbrs	r18, 2
 ac2:	06 c0       	rjmp	.+12     	; 0xad0 <vfprintf+0x2da>
 ac4:	73 94       	inc	r7
 ac6:	73 94       	inc	r7
 ac8:	04 c0       	rjmp	.+8      	; 0xad2 <vfprintf+0x2dc>
 aca:	82 2f       	mov	r24, r18
 acc:	86 78       	andi	r24, 0x86	; 134
 ace:	09 f0       	breq	.+2      	; 0xad2 <vfprintf+0x2dc>
 ad0:	73 94       	inc	r7
 ad2:	23 fd       	sbrc	r18, 3
 ad4:	13 c0       	rjmp	.+38     	; 0xafc <vfprintf+0x306>
 ad6:	20 ff       	sbrs	r18, 0
 ad8:	06 c0       	rjmp	.+12     	; 0xae6 <vfprintf+0x2f0>
 ada:	5a 2c       	mov	r5, r10
 adc:	73 14       	cp	r7, r3
 ade:	18 f4       	brcc	.+6      	; 0xae6 <vfprintf+0x2f0>
 ae0:	53 0c       	add	r5, r3
 ae2:	57 18       	sub	r5, r7
 ae4:	73 2c       	mov	r7, r3
 ae6:	73 14       	cp	r7, r3
 ae8:	68 f4       	brcc	.+26     	; 0xb04 <vfprintf+0x30e>
 aea:	b7 01       	movw	r22, r14
 aec:	80 e2       	ldi	r24, 0x20	; 32
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	2c 87       	std	Y+12, r18	; 0x0c
 af2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
 af6:	73 94       	inc	r7
 af8:	2c 85       	ldd	r18, Y+12	; 0x0c
 afa:	f5 cf       	rjmp	.-22     	; 0xae6 <vfprintf+0x2f0>
 afc:	73 14       	cp	r7, r3
 afe:	10 f4       	brcc	.+4      	; 0xb04 <vfprintf+0x30e>
 b00:	37 18       	sub	r3, r7
 b02:	01 c0       	rjmp	.+2      	; 0xb06 <vfprintf+0x310>
 b04:	31 2c       	mov	r3, r1
 b06:	24 ff       	sbrs	r18, 4
 b08:	12 c0       	rjmp	.+36     	; 0xb2e <vfprintf+0x338>
 b0a:	b7 01       	movw	r22, r14
 b0c:	80 e3       	ldi	r24, 0x30	; 48
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	2c 87       	std	Y+12, r18	; 0x0c
 b12:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
 b16:	2c 85       	ldd	r18, Y+12	; 0x0c
 b18:	22 ff       	sbrs	r18, 2
 b1a:	17 c0       	rjmp	.+46     	; 0xb4a <vfprintf+0x354>
 b1c:	21 ff       	sbrs	r18, 1
 b1e:	03 c0       	rjmp	.+6      	; 0xb26 <vfprintf+0x330>
 b20:	88 e5       	ldi	r24, 0x58	; 88
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <vfprintf+0x334>
 b26:	88 e7       	ldi	r24, 0x78	; 120
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	b7 01       	movw	r22, r14
 b2c:	0c c0       	rjmp	.+24     	; 0xb46 <vfprintf+0x350>
 b2e:	82 2f       	mov	r24, r18
 b30:	86 78       	andi	r24, 0x86	; 134
 b32:	59 f0       	breq	.+22     	; 0xb4a <vfprintf+0x354>
 b34:	21 fd       	sbrc	r18, 1
 b36:	02 c0       	rjmp	.+4      	; 0xb3c <vfprintf+0x346>
 b38:	80 e2       	ldi	r24, 0x20	; 32
 b3a:	01 c0       	rjmp	.+2      	; 0xb3e <vfprintf+0x348>
 b3c:	8b e2       	ldi	r24, 0x2B	; 43
 b3e:	27 fd       	sbrc	r18, 7
 b40:	8d e2       	ldi	r24, 0x2D	; 45
 b42:	b7 01       	movw	r22, r14
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
 b4a:	a5 14       	cp	r10, r5
 b4c:	38 f4       	brcc	.+14     	; 0xb5c <vfprintf+0x366>
 b4e:	b7 01       	movw	r22, r14
 b50:	80 e3       	ldi	r24, 0x30	; 48
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
 b58:	5a 94       	dec	r5
 b5a:	f7 cf       	rjmp	.-18     	; 0xb4a <vfprintf+0x354>
 b5c:	aa 94       	dec	r10
 b5e:	f4 01       	movw	r30, r8
 b60:	ea 0d       	add	r30, r10
 b62:	f1 1d       	adc	r31, r1
 b64:	80 81       	ld	r24, Z
 b66:	b7 01       	movw	r22, r14
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
 b6e:	a1 10       	cpse	r10, r1
 b70:	f5 cf       	rjmp	.-22     	; 0xb5c <vfprintf+0x366>
 b72:	33 20       	and	r3, r3
 b74:	09 f4       	brne	.+2      	; 0xb78 <vfprintf+0x382>
 b76:	51 ce       	rjmp	.-862    	; 0x81a <vfprintf+0x24>
 b78:	b7 01       	movw	r22, r14
 b7a:	80 e2       	ldi	r24, 0x20	; 32
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
 b82:	3a 94       	dec	r3
 b84:	f6 cf       	rjmp	.-20     	; 0xb72 <vfprintf+0x37c>
 b86:	f7 01       	movw	r30, r14
 b88:	86 81       	ldd	r24, Z+6	; 0x06
 b8a:	97 81       	ldd	r25, Z+7	; 0x07
 b8c:	02 c0       	rjmp	.+4      	; 0xb92 <vfprintf+0x39c>
 b8e:	8f ef       	ldi	r24, 0xFF	; 255
 b90:	9f ef       	ldi	r25, 0xFF	; 255
 b92:	2c 96       	adiw	r28, 0x0c	; 12
 b94:	e2 e1       	ldi	r30, 0x12	; 18
 b96:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__epilogue_restores__>

00000b9a <calloc>:
 b9a:	0f 93       	push	r16
 b9c:	1f 93       	push	r17
 b9e:	cf 93       	push	r28
 ba0:	df 93       	push	r29
 ba2:	86 9f       	mul	r24, r22
 ba4:	80 01       	movw	r16, r0
 ba6:	87 9f       	mul	r24, r23
 ba8:	10 0d       	add	r17, r0
 baa:	96 9f       	mul	r25, r22
 bac:	10 0d       	add	r17, r0
 bae:	11 24       	eor	r1, r1
 bb0:	c8 01       	movw	r24, r16
 bb2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <malloc>
 bb6:	ec 01       	movw	r28, r24
 bb8:	00 97       	sbiw	r24, 0x00	; 0
 bba:	29 f0       	breq	.+10     	; 0xbc6 <calloc+0x2c>
 bbc:	a8 01       	movw	r20, r16
 bbe:	60 e0       	ldi	r22, 0x00	; 0
 bc0:	70 e0       	ldi	r23, 0x00	; 0
 bc2:	0e 94 1b 07 	call	0xe36	; 0xe36 <memset>
 bc6:	ce 01       	movw	r24, r28
 bc8:	df 91       	pop	r29
 bca:	cf 91       	pop	r28
 bcc:	1f 91       	pop	r17
 bce:	0f 91       	pop	r16
 bd0:	08 95       	ret

00000bd2 <malloc>:
 bd2:	cf 93       	push	r28
 bd4:	df 93       	push	r29
 bd6:	82 30       	cpi	r24, 0x02	; 2
 bd8:	91 05       	cpc	r25, r1
 bda:	10 f4       	brcc	.+4      	; 0xbe0 <malloc+0xe>
 bdc:	82 e0       	ldi	r24, 0x02	; 2
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	e0 91 ce 01 	lds	r30, 0x01CE
 be4:	f0 91 cf 01 	lds	r31, 0x01CF
 be8:	20 e0       	ldi	r18, 0x00	; 0
 bea:	30 e0       	ldi	r19, 0x00	; 0
 bec:	a0 e0       	ldi	r26, 0x00	; 0
 bee:	b0 e0       	ldi	r27, 0x00	; 0
 bf0:	30 97       	sbiw	r30, 0x00	; 0
 bf2:	39 f1       	breq	.+78     	; 0xc42 <malloc+0x70>
 bf4:	40 81       	ld	r20, Z
 bf6:	51 81       	ldd	r21, Z+1	; 0x01
 bf8:	48 17       	cp	r20, r24
 bfa:	59 07       	cpc	r21, r25
 bfc:	b8 f0       	brcs	.+46     	; 0xc2c <malloc+0x5a>
 bfe:	48 17       	cp	r20, r24
 c00:	59 07       	cpc	r21, r25
 c02:	71 f4       	brne	.+28     	; 0xc20 <malloc+0x4e>
 c04:	82 81       	ldd	r24, Z+2	; 0x02
 c06:	93 81       	ldd	r25, Z+3	; 0x03
 c08:	10 97       	sbiw	r26, 0x00	; 0
 c0a:	29 f0       	breq	.+10     	; 0xc16 <malloc+0x44>
 c0c:	13 96       	adiw	r26, 0x03	; 3
 c0e:	9c 93       	st	X, r25
 c10:	8e 93       	st	-X, r24
 c12:	12 97       	sbiw	r26, 0x02	; 2
 c14:	2c c0       	rjmp	.+88     	; 0xc6e <malloc+0x9c>
 c16:	90 93 cf 01 	sts	0x01CF, r25
 c1a:	80 93 ce 01 	sts	0x01CE, r24
 c1e:	27 c0       	rjmp	.+78     	; 0xc6e <malloc+0x9c>
 c20:	21 15       	cp	r18, r1
 c22:	31 05       	cpc	r19, r1
 c24:	31 f0       	breq	.+12     	; 0xc32 <malloc+0x60>
 c26:	42 17       	cp	r20, r18
 c28:	53 07       	cpc	r21, r19
 c2a:	18 f0       	brcs	.+6      	; 0xc32 <malloc+0x60>
 c2c:	a9 01       	movw	r20, r18
 c2e:	db 01       	movw	r26, r22
 c30:	01 c0       	rjmp	.+2      	; 0xc34 <malloc+0x62>
 c32:	ef 01       	movw	r28, r30
 c34:	9a 01       	movw	r18, r20
 c36:	bd 01       	movw	r22, r26
 c38:	df 01       	movw	r26, r30
 c3a:	02 80       	ldd	r0, Z+2	; 0x02
 c3c:	f3 81       	ldd	r31, Z+3	; 0x03
 c3e:	e0 2d       	mov	r30, r0
 c40:	d7 cf       	rjmp	.-82     	; 0xbf0 <malloc+0x1e>
 c42:	21 15       	cp	r18, r1
 c44:	31 05       	cpc	r19, r1
 c46:	f9 f0       	breq	.+62     	; 0xc86 <malloc+0xb4>
 c48:	28 1b       	sub	r18, r24
 c4a:	39 0b       	sbc	r19, r25
 c4c:	24 30       	cpi	r18, 0x04	; 4
 c4e:	31 05       	cpc	r19, r1
 c50:	80 f4       	brcc	.+32     	; 0xc72 <malloc+0xa0>
 c52:	8a 81       	ldd	r24, Y+2	; 0x02
 c54:	9b 81       	ldd	r25, Y+3	; 0x03
 c56:	61 15       	cp	r22, r1
 c58:	71 05       	cpc	r23, r1
 c5a:	21 f0       	breq	.+8      	; 0xc64 <malloc+0x92>
 c5c:	fb 01       	movw	r30, r22
 c5e:	93 83       	std	Z+3, r25	; 0x03
 c60:	82 83       	std	Z+2, r24	; 0x02
 c62:	04 c0       	rjmp	.+8      	; 0xc6c <malloc+0x9a>
 c64:	90 93 cf 01 	sts	0x01CF, r25
 c68:	80 93 ce 01 	sts	0x01CE, r24
 c6c:	fe 01       	movw	r30, r28
 c6e:	32 96       	adiw	r30, 0x02	; 2
 c70:	44 c0       	rjmp	.+136    	; 0xcfa <malloc+0x128>
 c72:	fe 01       	movw	r30, r28
 c74:	e2 0f       	add	r30, r18
 c76:	f3 1f       	adc	r31, r19
 c78:	81 93       	st	Z+, r24
 c7a:	91 93       	st	Z+, r25
 c7c:	22 50       	subi	r18, 0x02	; 2
 c7e:	31 09       	sbc	r19, r1
 c80:	39 83       	std	Y+1, r19	; 0x01
 c82:	28 83       	st	Y, r18
 c84:	3a c0       	rjmp	.+116    	; 0xcfa <malloc+0x128>
 c86:	20 91 cc 01 	lds	r18, 0x01CC
 c8a:	30 91 cd 01 	lds	r19, 0x01CD
 c8e:	23 2b       	or	r18, r19
 c90:	41 f4       	brne	.+16     	; 0xca2 <malloc+0xd0>
 c92:	20 91 02 01 	lds	r18, 0x0102
 c96:	30 91 03 01 	lds	r19, 0x0103
 c9a:	30 93 cd 01 	sts	0x01CD, r19
 c9e:	20 93 cc 01 	sts	0x01CC, r18
 ca2:	20 91 00 01 	lds	r18, 0x0100
 ca6:	30 91 01 01 	lds	r19, 0x0101
 caa:	21 15       	cp	r18, r1
 cac:	31 05       	cpc	r19, r1
 cae:	41 f4       	brne	.+16     	; 0xcc0 <malloc+0xee>
 cb0:	2d b7       	in	r18, 0x3d	; 61
 cb2:	3e b7       	in	r19, 0x3e	; 62
 cb4:	40 91 04 01 	lds	r20, 0x0104
 cb8:	50 91 05 01 	lds	r21, 0x0105
 cbc:	24 1b       	sub	r18, r20
 cbe:	35 0b       	sbc	r19, r21
 cc0:	e0 91 cc 01 	lds	r30, 0x01CC
 cc4:	f0 91 cd 01 	lds	r31, 0x01CD
 cc8:	e2 17       	cp	r30, r18
 cca:	f3 07       	cpc	r31, r19
 ccc:	a0 f4       	brcc	.+40     	; 0xcf6 <malloc+0x124>
 cce:	2e 1b       	sub	r18, r30
 cd0:	3f 0b       	sbc	r19, r31
 cd2:	28 17       	cp	r18, r24
 cd4:	39 07       	cpc	r19, r25
 cd6:	78 f0       	brcs	.+30     	; 0xcf6 <malloc+0x124>
 cd8:	ac 01       	movw	r20, r24
 cda:	4e 5f       	subi	r20, 0xFE	; 254
 cdc:	5f 4f       	sbci	r21, 0xFF	; 255
 cde:	24 17       	cp	r18, r20
 ce0:	35 07       	cpc	r19, r21
 ce2:	48 f0       	brcs	.+18     	; 0xcf6 <malloc+0x124>
 ce4:	4e 0f       	add	r20, r30
 ce6:	5f 1f       	adc	r21, r31
 ce8:	50 93 cd 01 	sts	0x01CD, r21
 cec:	40 93 cc 01 	sts	0x01CC, r20
 cf0:	81 93       	st	Z+, r24
 cf2:	91 93       	st	Z+, r25
 cf4:	02 c0       	rjmp	.+4      	; 0xcfa <malloc+0x128>
 cf6:	e0 e0       	ldi	r30, 0x00	; 0
 cf8:	f0 e0       	ldi	r31, 0x00	; 0
 cfa:	cf 01       	movw	r24, r30
 cfc:	df 91       	pop	r29
 cfe:	cf 91       	pop	r28
 d00:	08 95       	ret

00000d02 <free>:
 d02:	cf 93       	push	r28
 d04:	df 93       	push	r29
 d06:	00 97       	sbiw	r24, 0x00	; 0
 d08:	09 f4       	brne	.+2      	; 0xd0c <free+0xa>
 d0a:	87 c0       	rjmp	.+270    	; 0xe1a <free+0x118>
 d0c:	fc 01       	movw	r30, r24
 d0e:	32 97       	sbiw	r30, 0x02	; 2
 d10:	13 82       	std	Z+3, r1	; 0x03
 d12:	12 82       	std	Z+2, r1	; 0x02
 d14:	c0 91 ce 01 	lds	r28, 0x01CE
 d18:	d0 91 cf 01 	lds	r29, 0x01CF
 d1c:	20 97       	sbiw	r28, 0x00	; 0
 d1e:	81 f4       	brne	.+32     	; 0xd40 <free+0x3e>
 d20:	20 81       	ld	r18, Z
 d22:	31 81       	ldd	r19, Z+1	; 0x01
 d24:	28 0f       	add	r18, r24
 d26:	39 1f       	adc	r19, r25
 d28:	80 91 cc 01 	lds	r24, 0x01CC
 d2c:	90 91 cd 01 	lds	r25, 0x01CD
 d30:	82 17       	cp	r24, r18
 d32:	93 07       	cpc	r25, r19
 d34:	79 f5       	brne	.+94     	; 0xd94 <free+0x92>
 d36:	f0 93 cd 01 	sts	0x01CD, r31
 d3a:	e0 93 cc 01 	sts	0x01CC, r30
 d3e:	6d c0       	rjmp	.+218    	; 0xe1a <free+0x118>
 d40:	de 01       	movw	r26, r28
 d42:	20 e0       	ldi	r18, 0x00	; 0
 d44:	30 e0       	ldi	r19, 0x00	; 0
 d46:	ae 17       	cp	r26, r30
 d48:	bf 07       	cpc	r27, r31
 d4a:	50 f4       	brcc	.+20     	; 0xd60 <free+0x5e>
 d4c:	12 96       	adiw	r26, 0x02	; 2
 d4e:	4d 91       	ld	r20, X+
 d50:	5c 91       	ld	r21, X
 d52:	13 97       	sbiw	r26, 0x03	; 3
 d54:	9d 01       	movw	r18, r26
 d56:	41 15       	cp	r20, r1
 d58:	51 05       	cpc	r21, r1
 d5a:	09 f1       	breq	.+66     	; 0xd9e <free+0x9c>
 d5c:	da 01       	movw	r26, r20
 d5e:	f3 cf       	rjmp	.-26     	; 0xd46 <free+0x44>
 d60:	b3 83       	std	Z+3, r27	; 0x03
 d62:	a2 83       	std	Z+2, r26	; 0x02
 d64:	40 81       	ld	r20, Z
 d66:	51 81       	ldd	r21, Z+1	; 0x01
 d68:	84 0f       	add	r24, r20
 d6a:	95 1f       	adc	r25, r21
 d6c:	8a 17       	cp	r24, r26
 d6e:	9b 07       	cpc	r25, r27
 d70:	71 f4       	brne	.+28     	; 0xd8e <free+0x8c>
 d72:	8d 91       	ld	r24, X+
 d74:	9c 91       	ld	r25, X
 d76:	11 97       	sbiw	r26, 0x01	; 1
 d78:	84 0f       	add	r24, r20
 d7a:	95 1f       	adc	r25, r21
 d7c:	02 96       	adiw	r24, 0x02	; 2
 d7e:	91 83       	std	Z+1, r25	; 0x01
 d80:	80 83       	st	Z, r24
 d82:	12 96       	adiw	r26, 0x02	; 2
 d84:	8d 91       	ld	r24, X+
 d86:	9c 91       	ld	r25, X
 d88:	13 97       	sbiw	r26, 0x03	; 3
 d8a:	93 83       	std	Z+3, r25	; 0x03
 d8c:	82 83       	std	Z+2, r24	; 0x02
 d8e:	21 15       	cp	r18, r1
 d90:	31 05       	cpc	r19, r1
 d92:	29 f4       	brne	.+10     	; 0xd9e <free+0x9c>
 d94:	f0 93 cf 01 	sts	0x01CF, r31
 d98:	e0 93 ce 01 	sts	0x01CE, r30
 d9c:	3e c0       	rjmp	.+124    	; 0xe1a <free+0x118>
 d9e:	d9 01       	movw	r26, r18
 da0:	13 96       	adiw	r26, 0x03	; 3
 da2:	fc 93       	st	X, r31
 da4:	ee 93       	st	-X, r30
 da6:	12 97       	sbiw	r26, 0x02	; 2
 da8:	4d 91       	ld	r20, X+
 daa:	5d 91       	ld	r21, X+
 dac:	a4 0f       	add	r26, r20
 dae:	b5 1f       	adc	r27, r21
 db0:	ea 17       	cp	r30, r26
 db2:	fb 07       	cpc	r31, r27
 db4:	79 f4       	brne	.+30     	; 0xdd4 <free+0xd2>
 db6:	80 81       	ld	r24, Z
 db8:	91 81       	ldd	r25, Z+1	; 0x01
 dba:	84 0f       	add	r24, r20
 dbc:	95 1f       	adc	r25, r21
 dbe:	02 96       	adiw	r24, 0x02	; 2
 dc0:	d9 01       	movw	r26, r18
 dc2:	11 96       	adiw	r26, 0x01	; 1
 dc4:	9c 93       	st	X, r25
 dc6:	8e 93       	st	-X, r24
 dc8:	82 81       	ldd	r24, Z+2	; 0x02
 dca:	93 81       	ldd	r25, Z+3	; 0x03
 dcc:	13 96       	adiw	r26, 0x03	; 3
 dce:	9c 93       	st	X, r25
 dd0:	8e 93       	st	-X, r24
 dd2:	12 97       	sbiw	r26, 0x02	; 2
 dd4:	e0 e0       	ldi	r30, 0x00	; 0
 dd6:	f0 e0       	ldi	r31, 0x00	; 0
 dd8:	8a 81       	ldd	r24, Y+2	; 0x02
 dda:	9b 81       	ldd	r25, Y+3	; 0x03
 ddc:	00 97       	sbiw	r24, 0x00	; 0
 dde:	19 f0       	breq	.+6      	; 0xde6 <free+0xe4>
 de0:	fe 01       	movw	r30, r28
 de2:	ec 01       	movw	r28, r24
 de4:	f9 cf       	rjmp	.-14     	; 0xdd8 <free+0xd6>
 de6:	ce 01       	movw	r24, r28
 de8:	02 96       	adiw	r24, 0x02	; 2
 dea:	28 81       	ld	r18, Y
 dec:	39 81       	ldd	r19, Y+1	; 0x01
 dee:	82 0f       	add	r24, r18
 df0:	93 1f       	adc	r25, r19
 df2:	20 91 cc 01 	lds	r18, 0x01CC
 df6:	30 91 cd 01 	lds	r19, 0x01CD
 dfa:	28 17       	cp	r18, r24
 dfc:	39 07       	cpc	r19, r25
 dfe:	69 f4       	brne	.+26     	; 0xe1a <free+0x118>
 e00:	30 97       	sbiw	r30, 0x00	; 0
 e02:	29 f4       	brne	.+10     	; 0xe0e <free+0x10c>
 e04:	10 92 cf 01 	sts	0x01CF, r1
 e08:	10 92 ce 01 	sts	0x01CE, r1
 e0c:	02 c0       	rjmp	.+4      	; 0xe12 <free+0x110>
 e0e:	13 82       	std	Z+3, r1	; 0x03
 e10:	12 82       	std	Z+2, r1	; 0x02
 e12:	d0 93 cd 01 	sts	0x01CD, r29
 e16:	c0 93 cc 01 	sts	0x01CC, r28
 e1a:	df 91       	pop	r29
 e1c:	cf 91       	pop	r28
 e1e:	08 95       	ret

00000e20 <strnlen_P>:
 e20:	fc 01       	movw	r30, r24
 e22:	05 90       	lpm	r0, Z+
 e24:	61 50       	subi	r22, 0x01	; 1
 e26:	70 40       	sbci	r23, 0x00	; 0
 e28:	01 10       	cpse	r0, r1
 e2a:	d8 f7       	brcc	.-10     	; 0xe22 <strnlen_P+0x2>
 e2c:	80 95       	com	r24
 e2e:	90 95       	com	r25
 e30:	8e 0f       	add	r24, r30
 e32:	9f 1f       	adc	r25, r31
 e34:	08 95       	ret

00000e36 <memset>:
 e36:	dc 01       	movw	r26, r24
 e38:	01 c0       	rjmp	.+2      	; 0xe3c <memset+0x6>
 e3a:	6d 93       	st	X+, r22
 e3c:	41 50       	subi	r20, 0x01	; 1
 e3e:	50 40       	sbci	r21, 0x00	; 0
 e40:	e0 f7       	brcc	.-8      	; 0xe3a <memset+0x4>
 e42:	08 95       	ret

00000e44 <strnlen>:
 e44:	fc 01       	movw	r30, r24
 e46:	61 50       	subi	r22, 0x01	; 1
 e48:	70 40       	sbci	r23, 0x00	; 0
 e4a:	01 90       	ld	r0, Z+
 e4c:	01 10       	cpse	r0, r1
 e4e:	d8 f7       	brcc	.-10     	; 0xe46 <strnlen+0x2>
 e50:	80 95       	com	r24
 e52:	90 95       	com	r25
 e54:	8e 0f       	add	r24, r30
 e56:	9f 1f       	adc	r25, r31
 e58:	08 95       	ret

00000e5a <fputc>:
 e5a:	0f 93       	push	r16
 e5c:	1f 93       	push	r17
 e5e:	cf 93       	push	r28
 e60:	df 93       	push	r29
 e62:	18 2f       	mov	r17, r24
 e64:	09 2f       	mov	r16, r25
 e66:	eb 01       	movw	r28, r22
 e68:	8b 81       	ldd	r24, Y+3	; 0x03
 e6a:	81 fd       	sbrc	r24, 1
 e6c:	03 c0       	rjmp	.+6      	; 0xe74 <fputc+0x1a>
 e6e:	8f ef       	ldi	r24, 0xFF	; 255
 e70:	9f ef       	ldi	r25, 0xFF	; 255
 e72:	20 c0       	rjmp	.+64     	; 0xeb4 <fputc+0x5a>
 e74:	82 ff       	sbrs	r24, 2
 e76:	10 c0       	rjmp	.+32     	; 0xe98 <fputc+0x3e>
 e78:	4e 81       	ldd	r20, Y+6	; 0x06
 e7a:	5f 81       	ldd	r21, Y+7	; 0x07
 e7c:	2c 81       	ldd	r18, Y+4	; 0x04
 e7e:	3d 81       	ldd	r19, Y+5	; 0x05
 e80:	42 17       	cp	r20, r18
 e82:	53 07       	cpc	r21, r19
 e84:	7c f4       	brge	.+30     	; 0xea4 <fputc+0x4a>
 e86:	e8 81       	ld	r30, Y
 e88:	f9 81       	ldd	r31, Y+1	; 0x01
 e8a:	9f 01       	movw	r18, r30
 e8c:	2f 5f       	subi	r18, 0xFF	; 255
 e8e:	3f 4f       	sbci	r19, 0xFF	; 255
 e90:	39 83       	std	Y+1, r19	; 0x01
 e92:	28 83       	st	Y, r18
 e94:	10 83       	st	Z, r17
 e96:	06 c0       	rjmp	.+12     	; 0xea4 <fputc+0x4a>
 e98:	e8 85       	ldd	r30, Y+8	; 0x08
 e9a:	f9 85       	ldd	r31, Y+9	; 0x09
 e9c:	81 2f       	mov	r24, r17
 e9e:	09 95       	icall
 ea0:	89 2b       	or	r24, r25
 ea2:	29 f7       	brne	.-54     	; 0xe6e <fputc+0x14>
 ea4:	2e 81       	ldd	r18, Y+6	; 0x06
 ea6:	3f 81       	ldd	r19, Y+7	; 0x07
 ea8:	2f 5f       	subi	r18, 0xFF	; 255
 eaa:	3f 4f       	sbci	r19, 0xFF	; 255
 eac:	3f 83       	std	Y+7, r19	; 0x07
 eae:	2e 83       	std	Y+6, r18	; 0x06
 eb0:	81 2f       	mov	r24, r17
 eb2:	90 2f       	mov	r25, r16
 eb4:	df 91       	pop	r29
 eb6:	cf 91       	pop	r28
 eb8:	1f 91       	pop	r17
 eba:	0f 91       	pop	r16
 ebc:	08 95       	ret

00000ebe <__ultoa_invert>:
 ebe:	fa 01       	movw	r30, r20
 ec0:	aa 27       	eor	r26, r26
 ec2:	28 30       	cpi	r18, 0x08	; 8
 ec4:	51 f1       	breq	.+84     	; 0xf1a <__ultoa_invert+0x5c>
 ec6:	20 31       	cpi	r18, 0x10	; 16
 ec8:	81 f1       	breq	.+96     	; 0xf2a <__ultoa_invert+0x6c>
 eca:	e8 94       	clt
 ecc:	6f 93       	push	r22
 ece:	6e 7f       	andi	r22, 0xFE	; 254
 ed0:	6e 5f       	subi	r22, 0xFE	; 254
 ed2:	7f 4f       	sbci	r23, 0xFF	; 255
 ed4:	8f 4f       	sbci	r24, 0xFF	; 255
 ed6:	9f 4f       	sbci	r25, 0xFF	; 255
 ed8:	af 4f       	sbci	r26, 0xFF	; 255
 eda:	b1 e0       	ldi	r27, 0x01	; 1
 edc:	3e d0       	rcall	.+124    	; 0xf5a <__ultoa_invert+0x9c>
 ede:	b4 e0       	ldi	r27, 0x04	; 4
 ee0:	3c d0       	rcall	.+120    	; 0xf5a <__ultoa_invert+0x9c>
 ee2:	67 0f       	add	r22, r23
 ee4:	78 1f       	adc	r23, r24
 ee6:	89 1f       	adc	r24, r25
 ee8:	9a 1f       	adc	r25, r26
 eea:	a1 1d       	adc	r26, r1
 eec:	68 0f       	add	r22, r24
 eee:	79 1f       	adc	r23, r25
 ef0:	8a 1f       	adc	r24, r26
 ef2:	91 1d       	adc	r25, r1
 ef4:	a1 1d       	adc	r26, r1
 ef6:	6a 0f       	add	r22, r26
 ef8:	71 1d       	adc	r23, r1
 efa:	81 1d       	adc	r24, r1
 efc:	91 1d       	adc	r25, r1
 efe:	a1 1d       	adc	r26, r1
 f00:	20 d0       	rcall	.+64     	; 0xf42 <__ultoa_invert+0x84>
 f02:	09 f4       	brne	.+2      	; 0xf06 <__ultoa_invert+0x48>
 f04:	68 94       	set
 f06:	3f 91       	pop	r19
 f08:	2a e0       	ldi	r18, 0x0A	; 10
 f0a:	26 9f       	mul	r18, r22
 f0c:	11 24       	eor	r1, r1
 f0e:	30 19       	sub	r19, r0
 f10:	30 5d       	subi	r19, 0xD0	; 208
 f12:	31 93       	st	Z+, r19
 f14:	de f6       	brtc	.-74     	; 0xecc <__ultoa_invert+0xe>
 f16:	cf 01       	movw	r24, r30
 f18:	08 95       	ret
 f1a:	46 2f       	mov	r20, r22
 f1c:	47 70       	andi	r20, 0x07	; 7
 f1e:	40 5d       	subi	r20, 0xD0	; 208
 f20:	41 93       	st	Z+, r20
 f22:	b3 e0       	ldi	r27, 0x03	; 3
 f24:	0f d0       	rcall	.+30     	; 0xf44 <__ultoa_invert+0x86>
 f26:	c9 f7       	brne	.-14     	; 0xf1a <__ultoa_invert+0x5c>
 f28:	f6 cf       	rjmp	.-20     	; 0xf16 <__ultoa_invert+0x58>
 f2a:	46 2f       	mov	r20, r22
 f2c:	4f 70       	andi	r20, 0x0F	; 15
 f2e:	40 5d       	subi	r20, 0xD0	; 208
 f30:	4a 33       	cpi	r20, 0x3A	; 58
 f32:	18 f0       	brcs	.+6      	; 0xf3a <__ultoa_invert+0x7c>
 f34:	49 5d       	subi	r20, 0xD9	; 217
 f36:	31 fd       	sbrc	r19, 1
 f38:	40 52       	subi	r20, 0x20	; 32
 f3a:	41 93       	st	Z+, r20
 f3c:	02 d0       	rcall	.+4      	; 0xf42 <__ultoa_invert+0x84>
 f3e:	a9 f7       	brne	.-22     	; 0xf2a <__ultoa_invert+0x6c>
 f40:	ea cf       	rjmp	.-44     	; 0xf16 <__ultoa_invert+0x58>
 f42:	b4 e0       	ldi	r27, 0x04	; 4
 f44:	a6 95       	lsr	r26
 f46:	97 95       	ror	r25
 f48:	87 95       	ror	r24
 f4a:	77 95       	ror	r23
 f4c:	67 95       	ror	r22
 f4e:	ba 95       	dec	r27
 f50:	c9 f7       	brne	.-14     	; 0xf44 <__ultoa_invert+0x86>
 f52:	00 97       	sbiw	r24, 0x00	; 0
 f54:	61 05       	cpc	r22, r1
 f56:	71 05       	cpc	r23, r1
 f58:	08 95       	ret
 f5a:	9b 01       	movw	r18, r22
 f5c:	ac 01       	movw	r20, r24
 f5e:	0a 2e       	mov	r0, r26
 f60:	06 94       	lsr	r0
 f62:	57 95       	ror	r21
 f64:	47 95       	ror	r20
 f66:	37 95       	ror	r19
 f68:	27 95       	ror	r18
 f6a:	ba 95       	dec	r27
 f6c:	c9 f7       	brne	.-14     	; 0xf60 <__ultoa_invert+0xa2>
 f6e:	62 0f       	add	r22, r18
 f70:	73 1f       	adc	r23, r19
 f72:	84 1f       	adc	r24, r20
 f74:	95 1f       	adc	r25, r21
 f76:	a0 1d       	adc	r26, r0
 f78:	08 95       	ret

00000f7a <__prologue_saves__>:
 f7a:	2f 92       	push	r2
 f7c:	3f 92       	push	r3
 f7e:	4f 92       	push	r4
 f80:	5f 92       	push	r5
 f82:	6f 92       	push	r6
 f84:	7f 92       	push	r7
 f86:	8f 92       	push	r8
 f88:	9f 92       	push	r9
 f8a:	af 92       	push	r10
 f8c:	bf 92       	push	r11
 f8e:	cf 92       	push	r12
 f90:	df 92       	push	r13
 f92:	ef 92       	push	r14
 f94:	ff 92       	push	r15
 f96:	0f 93       	push	r16
 f98:	1f 93       	push	r17
 f9a:	cf 93       	push	r28
 f9c:	df 93       	push	r29
 f9e:	cd b7       	in	r28, 0x3d	; 61
 fa0:	de b7       	in	r29, 0x3e	; 62
 fa2:	ca 1b       	sub	r28, r26
 fa4:	db 0b       	sbc	r29, r27
 fa6:	0f b6       	in	r0, 0x3f	; 63
 fa8:	f8 94       	cli
 faa:	de bf       	out	0x3e, r29	; 62
 fac:	0f be       	out	0x3f, r0	; 63
 fae:	cd bf       	out	0x3d, r28	; 61
 fb0:	09 94       	ijmp

00000fb2 <__epilogue_restores__>:
 fb2:	2a 88       	ldd	r2, Y+18	; 0x12
 fb4:	39 88       	ldd	r3, Y+17	; 0x11
 fb6:	48 88       	ldd	r4, Y+16	; 0x10
 fb8:	5f 84       	ldd	r5, Y+15	; 0x0f
 fba:	6e 84       	ldd	r6, Y+14	; 0x0e
 fbc:	7d 84       	ldd	r7, Y+13	; 0x0d
 fbe:	8c 84       	ldd	r8, Y+12	; 0x0c
 fc0:	9b 84       	ldd	r9, Y+11	; 0x0b
 fc2:	aa 84       	ldd	r10, Y+10	; 0x0a
 fc4:	b9 84       	ldd	r11, Y+9	; 0x09
 fc6:	c8 84       	ldd	r12, Y+8	; 0x08
 fc8:	df 80       	ldd	r13, Y+7	; 0x07
 fca:	ee 80       	ldd	r14, Y+6	; 0x06
 fcc:	fd 80       	ldd	r15, Y+5	; 0x05
 fce:	0c 81       	ldd	r16, Y+4	; 0x04
 fd0:	1b 81       	ldd	r17, Y+3	; 0x03
 fd2:	aa 81       	ldd	r26, Y+2	; 0x02
 fd4:	b9 81       	ldd	r27, Y+1	; 0x01
 fd6:	ce 0f       	add	r28, r30
 fd8:	d1 1d       	adc	r29, r1
 fda:	0f b6       	in	r0, 0x3f	; 63
 fdc:	f8 94       	cli
 fde:	de bf       	out	0x3e, r29	; 62
 fe0:	0f be       	out	0x3f, r0	; 63
 fe2:	cd bf       	out	0x3d, r28	; 61
 fe4:	ed 01       	movw	r28, r26
 fe6:	08 95       	ret

00000fe8 <_exit>:
 fe8:	f8 94       	cli

00000fea <__stop_program>:
 fea:	ff cf       	rjmp	.-2      	; 0xfea <__stop_program>
