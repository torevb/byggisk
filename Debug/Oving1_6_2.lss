
Oving1_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000104  00800100  00000ae2  00000b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000080  00800204  00800204  00000c7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c7a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e51  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b01  00000000  00000000  00002cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b75  00000000  00000000  000037f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000464  00000000  00000000  0000436c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000619  00000000  00000000  000047d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a9d  00000000  00000000  00004de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  00005886  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:


uint8_t get_joy_position(ADC_channel adc_ch){
	volatile char *ext_adc = (char *) 0x1400; // Start address for the ADC
	
	*ext_adc	= adc_ch;
   0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
   4:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   8:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_2>
   c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
	_delay_us(40);//delay kan justeres ned til 20 mikro, sidan klokka går på 4915200
	////connect interruptsignal til pbx. if(PBx=1){}...
	uint8_t position = *ext_adc;
  10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
	null_position.x_pos = get_joy_position(JOY_X);
	null_position.y_pos = get_joy_position(JOY_Y);
}

void joy_relative_pos(){
	int y= get_joy_position(JOY_Y);
  14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
	//rel_position.y_pos=(int)(y-null_position.y_pos)*100/127;
	rel_position.y_pos=(int)(y-null_position.y_pos)*(JOY_MAX-1)/127;
  18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>


uint8_t get_joy_position(ADC_channel adc_ch){
	volatile char *ext_adc = (char *) 0x1400; // Start address for the ADC
	
	*ext_adc	= adc_ch;
  40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
	_delay_us(40);//delay kan justeres ned til 20 mikro, sidan klokka går på 4915200
	////connect interruptsignal til pbx. if(PBx=1){}...
	uint8_t position = *ext_adc;
  4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
	int y= get_joy_position(JOY_Y);
	//rel_position.y_pos=(int)(y-null_position.y_pos)*100/127;
	rel_position.y_pos=(int)(y-null_position.y_pos)*(JOY_MAX-1)/127;
	int x= get_joy_position(JOY_X);
	//rel_position.x_pos=(int)(x-null_position.x_pos)*100/127;
	rel_position.x_pos=(int)(x-null_position.x_pos)*(JOY_MAX-1)/127;
  50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 5c       	subi	r16, 0xC0	; 192
  76:	00 00       	nop
  78:	0c 00       	.word	0x000c	; ????
  7a:	0c 00       	.word	0x000c	; ????
  7c:	7c 28       	or	r7, r12
  7e:	7c 28       	or	r7, r12
  80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
  82:	68 00       	.word	0x0068	; ????
  84:	24 10       	cpse	r2, r4
  86:	48 00       	.word	0x0048	; ????
  88:	28 54       	subi	r18, 0x48	; 72
  8a:	28 40       	sbci	r18, 0x08	; 8
  8c:	00 0c       	add	r0, r0
  8e:	00 00       	nop
  90:	00 78       	andi	r16, 0x80	; 128
  92:	84 00       	.word	0x0084	; ????
  94:	84 78       	andi	r24, 0x84	; 132
  96:	00 00       	nop
  98:	54 38       	cpi	r21, 0x84	; 132
  9a:	54 00       	.word	0x0054	; ????
  9c:	10 7c       	andi	r17, 0xC0	; 192
  9e:	10 00       	.word	0x0010	; ????
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	00 00       	nop
  a4:	10 10       	cpse	r1, r0
  a6:	10 00       	.word	0x0010	; ????
  a8:	00 40       	sbci	r16, 0x00	; 0
  aa:	00 00       	nop
  ac:	60 10       	cpse	r6, r0
  ae:	0c 00       	.word	0x000c	; ????
  b0:	38 54       	subi	r19, 0x48	; 72
  b2:	38 00       	.word	0x0038	; ????
  b4:	48 7c       	andi	r20, 0xC8	; 200
  b6:	40 00       	.word	0x0040	; ????
  b8:	48 64       	ori	r20, 0x48	; 72
  ba:	58 00       	.word	0x0058	; ????
  bc:	44 54       	subi	r20, 0x44	; 68
  be:	2c 00       	.word	0x002c	; ????
  c0:	1c 10       	cpse	r1, r12
  c2:	7c 00       	.word	0x007c	; ????
  c4:	5c 54       	subi	r21, 0x4C	; 76
  c6:	24 00       	.word	0x0024	; ????
  c8:	38 54       	subi	r19, 0x48	; 72
  ca:	24 00       	.word	0x0024	; ????
  cc:	64 14       	cp	r6, r4
  ce:	0c 00       	.word	0x000c	; ????
  d0:	68 54       	subi	r22, 0x48	; 72
  d2:	2c 00       	.word	0x002c	; ????
  d4:	48 54       	subi	r20, 0x48	; 72
  d6:	38 00       	.word	0x0038	; ????
  d8:	00 48       	sbci	r16, 0x80	; 128
  da:	00 00       	nop
  dc:	80 48       	sbci	r24, 0x80	; 128
  de:	00 00       	nop
  e0:	10 28       	or	r1, r0
  e2:	44 00       	.word	0x0044	; ????
  e4:	28 28       	or	r2, r8
  e6:	28 00       	.word	0x0028	; ????
  e8:	44 28       	or	r4, r4
  ea:	10 00       	.word	0x0010	; ????
  ec:	04 54       	subi	r16, 0x44	; 68
  ee:	08 00       	.word	0x0008	; ????
  f0:	38 44       	sbci	r19, 0x48	; 72
  f2:	5c 00       	.word	0x005c	; ????
  f4:	78 14       	cp	r7, r8
  f6:	78 00       	.word	0x0078	; ????
  f8:	7c 54       	subi	r23, 0x4C	; 76
  fa:	28 00       	.word	0x0028	; ????
  fc:	38 44       	sbci	r19, 0x48	; 72
  fe:	28 00       	.word	0x0028	; ????
 100:	7c 44       	sbci	r23, 0x4C	; 76
 102:	38 00       	.word	0x0038	; ????
 104:	7c 54       	subi	r23, 0x4C	; 76
 106:	44 00       	.word	0x0044	; ????
 108:	7c 14       	cp	r7, r12
 10a:	04 00       	.word	0x0004	; ????
 10c:	38 44       	sbci	r19, 0x48	; 72
 10e:	74 00       	.word	0x0074	; ????
 110:	7c 10       	cpse	r7, r12
 112:	7c 00       	.word	0x007c	; ????
 114:	44 7c       	andi	r20, 0xC4	; 196
 116:	44 00       	.word	0x0044	; ????
 118:	20 40       	sbci	r18, 0x00	; 0
 11a:	3c 00       	.word	0x003c	; ????
 11c:	7c 10       	cpse	r7, r12
 11e:	6c 00       	.word	0x006c	; ????
 120:	7c 40       	sbci	r23, 0x0C	; 12
 122:	40 00       	.word	0x0040	; ????
 124:	7c 18       	sub	r7, r12
 126:	7c 00       	.word	0x007c	; ????
 128:	78 10       	cpse	r7, r8
 12a:	3c 00       	.word	0x003c	; ????
 12c:	38 44       	sbci	r19, 0x48	; 72
 12e:	38 00       	.word	0x0038	; ????
 130:	7c 14       	cp	r7, r12
 132:	08 00       	.word	0x0008	; ????
 134:	38 44       	sbci	r19, 0x48	; 72
 136:	b8 00       	.word	0x00b8	; ????
 138:	7c 14       	cp	r7, r12
 13a:	68 00       	.word	0x0068	; ????
 13c:	48 54       	subi	r20, 0x48	; 72
 13e:	24 00       	.word	0x0024	; ????
 140:	04 7c       	andi	r16, 0xC4	; 196
 142:	04 00       	.word	0x0004	; ????
 144:	7c 40       	sbci	r23, 0x0C	; 12
 146:	7c 00       	.word	0x007c	; ????
 148:	3c 60       	ori	r19, 0x0C	; 12
 14a:	3c 00       	.word	0x003c	; ????
 14c:	7c 30       	cpi	r23, 0x0C	; 12
 14e:	7c 00       	.word	0x007c	; ????
 150:	6c 10       	cpse	r6, r12
 152:	6c 00       	.word	0x006c	; ????
 154:	0c 70       	andi	r16, 0x0C	; 12
 156:	0c 00       	.word	0x000c	; ????
 158:	64 54       	subi	r22, 0x44	; 68
 15a:	4c 00       	.word	0x004c	; ????
 15c:	00 7c       	andi	r16, 0xC0	; 192
 15e:	44 00       	.word	0x0044	; ????
 160:	0c 10       	cpse	r0, r12
 162:	60 00       	.word	0x0060	; ????
 164:	44 7c       	andi	r20, 0xC4	; 196
 166:	00 00       	nop
 168:	08 04       	cpc	r0, r8
 16a:	08 00       	.word	0x0008	; ????
 16c:	80 80       	ld	r8, Z
 16e:	80 00       	.word	0x0080	; ????
 170:	00 04       	cpc	r0, r0
 172:	08 00       	.word	0x0008	; ????
 174:	30 48       	sbci	r19, 0x80	; 128
 176:	78 00       	.word	0x0078	; ????
 178:	7c 48       	sbci	r23, 0x8C	; 140
 17a:	30 00       	.word	0x0030	; ????
 17c:	30 48       	sbci	r19, 0x80	; 128
 17e:	48 00       	.word	0x0048	; ????
 180:	30 48       	sbci	r19, 0x80	; 128
 182:	7c 00       	.word	0x007c	; ????
 184:	30 68       	ori	r19, 0x80	; 128
 186:	50 00       	.word	0x0050	; ????
 188:	10 78       	andi	r17, 0x80	; 128
 18a:	14 00       	.word	0x0014	; ????
 18c:	90 a8       	ldd	r9, Z+48	; 0x30
 18e:	78 00       	.word	0x0078	; ????
 190:	7c 08       	sbc	r7, r12
 192:	70 00       	.word	0x0070	; ????
 194:	50 74       	andi	r21, 0x40	; 64
 196:	40 00       	.word	0x0040	; ????
 198:	80 80       	ld	r8, Z
 19a:	74 00       	.word	0x0074	; ????
 19c:	7c 10       	cpse	r7, r12
 19e:	68 00       	.word	0x0068	; ????
 1a0:	44 7c       	andi	r20, 0xC4	; 196
 1a2:	40 00       	.word	0x0040	; ????
 1a4:	78 10       	cpse	r7, r8
 1a6:	78 00       	.word	0x0078	; ????
 1a8:	78 08       	sbc	r7, r8
 1aa:	70 00       	.word	0x0070	; ????
 1ac:	30 48       	sbci	r19, 0x80	; 128
 1ae:	30 00       	.word	0x0030	; ????
 1b0:	f8 28       	or	r15, r8
 1b2:	10 00       	.word	0x0010	; ????
 1b4:	30 48       	sbci	r19, 0x80	; 128
 1b6:	f8 00       	.word	0x00f8	; ????
 1b8:	78 10       	cpse	r7, r8
 1ba:	08 00       	.word	0x0008	; ????
 1bc:	50 58       	subi	r21, 0x80	; 128
 1be:	28 00       	.word	0x0028	; ????
 1c0:	08 3c       	cpi	r16, 0xC8	; 200
 1c2:	48 00       	.word	0x0048	; ????
 1c4:	38 40       	sbci	r19, 0x08	; 8
 1c6:	78 00       	.word	0x0078	; ????
 1c8:	38 40       	sbci	r19, 0x08	; 8
 1ca:	38 00       	.word	0x0038	; ????
 1cc:	78 20       	and	r7, r8
 1ce:	78 00       	.word	0x0078	; ????
 1d0:	48 30       	cpi	r20, 0x08	; 8
 1d2:	48 00       	.word	0x0048	; ????
 1d4:	98 a0       	ldd	r9, Y+32	; 0x20
 1d6:	78 00       	.word	0x0078	; ????
 1d8:	48 68       	ori	r20, 0x88	; 136
 1da:	58 00       	.word	0x0058	; ????
 1dc:	10 78       	andi	r17, 0x80	; 128
 1de:	84 00       	.word	0x0084	; ????
 1e0:	00 7c       	andi	r16, 0xC0	; 192
 1e2:	00 00       	nop
 1e4:	84 78       	andi	r24, 0x84	; 132
 1e6:	10 00       	.word	0x0010	; ????
 1e8:	08 04       	cpc	r0, r8
 1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
 1ec:	11 24       	eor	r1, r1
 1ee:	1f be       	out	0x3f, r1	; 63
 1f0:	cf ef       	ldi	r28, 0xFF	; 255
 1f2:	d4 e0       	ldi	r29, 0x04	; 4
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
 1f8:	12 e0       	ldi	r17, 0x02	; 2
 1fa:	a0 e0       	ldi	r26, 0x00	; 0
 1fc:	b1 e0       	ldi	r27, 0x01	; 1
 1fe:	e2 ee       	ldi	r30, 0xE2	; 226
 200:	fa e0       	ldi	r31, 0x0A	; 10
 202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
 204:	05 90       	lpm	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	a4 30       	cpi	r26, 0x04	; 4
 20a:	b1 07       	cpc	r27, r17
 20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
 20e:	22 e0       	ldi	r18, 0x02	; 2
 210:	a4 e0       	ldi	r26, 0x04	; 4
 212:	b2 e0       	ldi	r27, 0x02	; 2
 214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
 216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
 218:	a4 38       	cpi	r26, 0x84	; 132
 21a:	b2 07       	cpc	r27, r18
 21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
 21e:	0e 94 6d 03 	call	0x6da	; 0x6da <main>
 222:	0c 94 6f 05 	jmp	0xade	; 0xade <_exit>

00000226 <__bad_interrupt>:
 226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <memory_init>:
#include <stdlib.h>
#include <avr/io.h>


void memory_init(void){
	MCUCR|=(1<<SRE);
 22a:	85 b7       	in	r24, 0x35	; 53
 22c:	80 68       	ori	r24, 0x80	; 128
 22e:	85 bf       	out	0x35, r24	; 53
	SFIOR|=(1<<XMM2);
 230:	80 b7       	in	r24, 0x30	; 48
 232:	80 62       	ori	r24, 0x20	; 32
 234:	80 bf       	out	0x30, r24	; 48
 236:	08 95       	ret

00000238 <menu_init>:
uint8_t arrow_page;



void menu_init(){
	OLED_init();
 238:	0e 94 96 02 	call	0x52c	; 0x52c <OLED_init>
	
	root_node.name = "        > Main menu < \n";
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	90 93 4d 02 	sts	0x024D, r25
 244:	80 93 4c 02 	sts	0x024C, r24
	root_node.parent = &root_node;
 248:	ec e3       	ldi	r30, 0x3C	; 60
 24a:	f2 e0       	ldi	r31, 0x02	; 2
 24c:	f1 83       	std	Z+1, r31	; 0x01
 24e:	e0 83       	st	Z, r30
	root_node.children[0] = &playgame_node;
 250:	a8 e2       	ldi	r26, 0x28	; 40
 252:	b2 e0       	ldi	r27, 0x02	; 2
 254:	b0 93 3f 02 	sts	0x023F, r27
 258:	a0 93 3e 02 	sts	0x023E, r26
	root_node.children[1] = &highscore_node;
 25c:	84 e6       	ldi	r24, 0x64	; 100
 25e:	92 e0       	ldi	r25, 0x02	; 2
 260:	90 93 41 02 	sts	0x0241, r25
 264:	80 93 40 02 	sts	0x0240, r24
	root_node.children[2] = &settings_node;
 268:	84 e1       	ldi	r24, 0x14	; 20
 26a:	92 e0       	ldi	r25, 0x02	; 2
 26c:	90 93 43 02 	sts	0x0243, r25
 270:	80 93 42 02 	sts	0x0242, r24
	root_node.children[3]= &draw_node;
 274:	80 e5       	ldi	r24, 0x50	; 80
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	90 93 45 02 	sts	0x0245, r25
 27c:	80 93 44 02 	sts	0x0244, r24
	root_node.content_string = "Play game \nHighscores \nSettings\n";
 280:	8e e1       	ldi	r24, 0x1E	; 30
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	90 93 4f 02 	sts	0x024F, r25
 288:	80 93 4e 02 	sts	0x024E, r24

	playgame_node.name = "Back    > Play game < \n";
 28c:	8f e3       	ldi	r24, 0x3F	; 63
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	90 93 39 02 	sts	0x0239, r25
 294:	80 93 38 02 	sts	0x0238, r24
	playgame_node.parent = &root_node;
 298:	ed 93       	st	X+, r30
 29a:	fc 93       	st	X, r31
 29c:	ea e2       	ldi	r30, 0x2A	; 42
 29e:	f2 e0       	ldi	r31, 0x02	; 2
 2a0:	88 e3       	ldi	r24, 0x38	; 56
 2a2:	92 e0       	ldi	r25, 0x02	; 2
	for (int i=0; i<7;i++){
		playgame_node.children[i]=NULL; 
 2a4:	11 92       	st	Z+, r1
 2a6:	11 92       	st	Z+, r1
	root_node.children[3]= &draw_node;
	root_node.content_string = "Play game \nHighscores \nSettings\n";

	playgame_node.name = "Back    > Play game < \n";
	playgame_node.parent = &root_node;
	for (int i=0; i<7;i++){
 2a8:	e8 17       	cp	r30, r24
 2aa:	f9 07       	cpc	r31, r25
 2ac:	d9 f7       	brne	.-10     	; 0x2a4 <menu_init+0x6c>
		playgame_node.children[i]=NULL; 
	}
	playgame_node.content_string = "new game \n1v1 \n1vsComputer \n";
 2ae:	87 e5       	ldi	r24, 0x57	; 87
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	90 93 3b 02 	sts	0x023B, r25
 2b6:	80 93 3a 02 	sts	0x023A, r24

	highscore_node.name = "Back     > Highscore < \n";
 2ba:	84 e7       	ldi	r24, 0x74	; 116
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	90 93 75 02 	sts	0x0275, r25
 2c2:	80 93 74 02 	sts	0x0274, r24
	highscore_node.parent = &root_node;
 2c6:	8c e3       	ldi	r24, 0x3C	; 60
 2c8:	92 e0       	ldi	r25, 0x02	; 2
 2ca:	90 93 65 02 	sts	0x0265, r25
 2ce:	80 93 64 02 	sts	0x0264, r24
 2d2:	e6 e6       	ldi	r30, 0x66	; 102
 2d4:	f2 e0       	ldi	r31, 0x02	; 2
 2d6:	84 e7       	ldi	r24, 0x74	; 116
 2d8:	92 e0       	ldi	r25, 0x02	; 2
	for (int i=0; i<7;i++){
		highscore_node.children[i]=NULL;
 2da:	11 92       	st	Z+, r1
 2dc:	11 92       	st	Z+, r1
	}
	playgame_node.content_string = "new game \n1v1 \n1vsComputer \n";

	highscore_node.name = "Back     > Highscore < \n";
	highscore_node.parent = &root_node;
	for (int i=0; i<7;i++){
 2de:	e8 17       	cp	r30, r24
 2e0:	f9 07       	cpc	r31, r25
 2e2:	d9 f7       	brne	.-10     	; 0x2da <menu_init+0xa2>
		highscore_node.children[i]=NULL;
	}
	highscore_node.content_string = "Player1 score. \nPlayer2 score. \n";
 2e4:	8d e8       	ldi	r24, 0x8D	; 141
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	90 93 77 02 	sts	0x0277, r25
 2ec:	80 93 76 02 	sts	0x0276, r24

	settings_node.name = "Back     > Settings < \n";
 2f0:	8e ea       	ldi	r24, 0xAE	; 174
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	90 93 25 02 	sts	0x0225, r25
 2f8:	80 93 24 02 	sts	0x0224, r24
	settings_node.parent = &root_node;
 2fc:	8c e3       	ldi	r24, 0x3C	; 60
 2fe:	92 e0       	ldi	r25, 0x02	; 2
 300:	90 93 15 02 	sts	0x0215, r25
 304:	80 93 14 02 	sts	0x0214, r24
 308:	e6 e1       	ldi	r30, 0x16	; 22
 30a:	f2 e0       	ldi	r31, 0x02	; 2
 30c:	84 e2       	ldi	r24, 0x24	; 36
 30e:	92 e0       	ldi	r25, 0x02	; 2
	for (int i=0; i<7;i++){
		settings_node.children[i]=NULL;
 310:	11 92       	st	Z+, r1
 312:	11 92       	st	Z+, r1
	}
	highscore_node.content_string = "Player1 score. \nPlayer2 score. \n";

	settings_node.name = "Back     > Settings < \n";
	settings_node.parent = &root_node;
	for (int i=0; i<7;i++){
 314:	e8 17       	cp	r30, r24
 316:	f9 07       	cpc	r31, r25
 318:	d9 f7       	brne	.-10     	; 0x310 <menu_init+0xd8>
		settings_node.children[i]=NULL;
	}
	settings_node.content_string = "calibrate_node \nvolume_node \n";
 31a:	86 ec       	ldi	r24, 0xC6	; 198
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	90 93 27 02 	sts	0x0227, r25
 322:	80 93 26 02 	sts	0x0226, r24
	
	draw_node.name = "Drawing board ";
 326:	84 ee       	ldi	r24, 0xE4	; 228
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	90 93 61 02 	sts	0x0261, r25
 32e:	80 93 60 02 	sts	0x0260, r24
	draw_node.parent = &root_node;
 332:	8c e3       	ldi	r24, 0x3C	; 60
 334:	92 e0       	ldi	r25, 0x02	; 2
 336:	90 93 51 02 	sts	0x0251, r25
 33a:	80 93 50 02 	sts	0x0250, r24
 33e:	e2 e5       	ldi	r30, 0x52	; 82
 340:	f2 e0       	ldi	r31, 0x02	; 2
 342:	80 e6       	ldi	r24, 0x60	; 96
 344:	92 e0       	ldi	r25, 0x02	; 2
	for (int i=0; i<7;i++){
		draw_node.children[i]=NULL;
 346:	11 92       	st	Z+, r1
 348:	11 92       	st	Z+, r1
	}
	settings_node.content_string = "calibrate_node \nvolume_node \n";
	
	draw_node.name = "Drawing board ";
	draw_node.parent = &root_node;
	for (int i=0; i<7;i++){
 34a:	e8 17       	cp	r30, r24
 34c:	f9 07       	cpc	r31, r25
 34e:	d9 f7       	brne	.-10     	; 0x346 <menu_init+0x10e>
	}
	//draw_node.content_string = draw_OLED();
	
	
	
	current_node = &playgame_node;//&root_node;
 350:	88 e2       	ldi	r24, 0x28	; 40
 352:	92 e0       	ldi	r25, 0x02	; 2
 354:	90 93 79 02 	sts	0x0279, r25
 358:	80 93 78 02 	sts	0x0278, r24
	arrow_page = 0;
 35c:	10 92 13 02 	sts	0x0213, r1
 360:	08 95       	ret

00000362 <menu_print>:
	menu_print();
}

void menu_print(){
	//print_to_OLED(current_node->children[0]->content_string, 2);
	OLED_reset();
 362:	0e 94 87 02 	call	0x50e	; 0x50e <OLED_reset>
	print_to_OLED(current_node->name, 2);
 366:	e0 91 78 02 	lds	r30, 0x0278
 36a:	f0 91 79 02 	lds	r31, 0x0279
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	80 89       	ldd	r24, Z+16	; 0x10
 372:	91 89       	ldd	r25, Z+17	; 0x11
 374:	0e 94 c8 02 	call	0x590	; 0x590 <print_to_OLED>
	print_to_OLED(current_node->content_string, 2);
 378:	e0 91 78 02 	lds	r30, 0x0278
 37c:	f0 91 79 02 	lds	r31, 0x0279
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	82 89       	ldd	r24, Z+18	; 0x12
 384:	93 89       	ldd	r25, Z+19	; 0x13
 386:	0e 94 c8 02 	call	0x590	; 0x590 <print_to_OLED>
	OLED_print_arrow(arrow_page);
 38a:	80 91 13 02 	lds	r24, 0x0213
 38e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <OLED_print_arrow>
 392:	08 95       	ret

00000394 <__vector_1>:
	}
	OLED_print_arrow(arrow_page);
}

/* Left slider button, INT0_vect, pin PD2. Right slider button, INT1_vect, pin PD3.*/
ISR(INT0_vect){//, INT1_vect){
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	2f 93       	push	r18
 3a0:	3f 93       	push	r19
 3a2:	4f 93       	push	r20
 3a4:	5f 93       	push	r21
 3a6:	6f 93       	push	r22
 3a8:	7f 93       	push	r23
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
 3b2:	ef 93       	push	r30
 3b4:	ff 93       	push	r31
	if (current_node == &playgame_node){
 3b6:	e0 91 78 02 	lds	r30, 0x0278
 3ba:	f0 91 79 02 	lds	r31, 0x0279
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	e8 32       	cpi	r30, 0x28	; 40
 3c2:	f8 07       	cpc	r31, r24
 3c4:	19 f4       	brne	.+6      	; 0x3cc <__vector_1+0x38>
		push_solenoid();
 3c6:	0e 94 8f 03 	call	0x71e	; 0x71e <push_solenoid>
 3ca:	1c c0       	rjmp	.+56     	; 0x404 <__vector_1+0x70>
	}
	else{
		if (arrow_page <= 0){
 3cc:	80 91 13 02 	lds	r24, 0x0213
 3d0:	81 11       	cpse	r24, r1
 3d2:	07 c0       	rjmp	.+14     	; 0x3e2 <__vector_1+0x4e>
			current_node = current_node->parent;
 3d4:	80 81       	ld	r24, Z
 3d6:	91 81       	ldd	r25, Z+1	; 0x01
 3d8:	90 93 79 02 	sts	0x0279, r25
 3dc:	80 93 78 02 	sts	0x0278, r24
 3e0:	0d c0       	rjmp	.+26     	; 0x3fc <__vector_1+0x68>
			} else if (!(current_node->children[arrow_page - 1] == NULL)){
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	e8 0f       	add	r30, r24
 3ea:	f9 1f       	adc	r31, r25
 3ec:	80 81       	ld	r24, Z
 3ee:	91 81       	ldd	r25, Z+1	; 0x01
 3f0:	00 97       	sbiw	r24, 0x00	; 0
 3f2:	21 f0       	breq	.+8      	; 0x3fc <__vector_1+0x68>
			current_node = current_node->children[arrow_page -1];
 3f4:	90 93 79 02 	sts	0x0279, r25
 3f8:	80 93 78 02 	sts	0x0278, r24
		}
		arrow_page = 0;
 3fc:	10 92 13 02 	sts	0x0213, r1
		menu_print();
 400:	0e 94 b1 01 	call	0x362	; 0x362 <menu_print>
	}
}
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <__vector_2>:

ISR(INT1_vect){
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	4f 93       	push	r20
 436:	5f 93       	push	r21
 438:	6f 93       	push	r22
 43a:	7f 93       	push	r23
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
	current_node = current_node->parent;
 448:	e0 91 78 02 	lds	r30, 0x0278
 44c:	f0 91 79 02 	lds	r31, 0x0279
 450:	80 81       	ld	r24, Z
 452:	91 81       	ldd	r25, Z+1	; 0x01
 454:	90 93 79 02 	sts	0x0279, r25
 458:	80 93 78 02 	sts	0x0278, r24
	menu_print();
 45c:	0e 94 b1 01 	call	0x362	; 0x362 <menu_print>
}
 460:	ff 91       	pop	r31
 462:	ef 91       	pop	r30
 464:	bf 91       	pop	r27
 466:	af 91       	pop	r26
 468:	9f 91       	pop	r25
 46a:	8f 91       	pop	r24
 46c:	7f 91       	pop	r23
 46e:	6f 91       	pop	r22
 470:	5f 91       	pop	r21
 472:	4f 91       	pop	r20
 474:	3f 91       	pop	r19
 476:	2f 91       	pop	r18
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <set_font4x6>:
};



void set_font4x6(){
	font_type.data = font4x6;
 482:	80 e7       	ldi	r24, 0x70	; 112
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	90 93 12 02 	sts	0x0212, r25
 48a:	80 93 11 02 	sts	0x0211, r24
	font_type.width = 4;
 48e:	84 e0       	ldi	r24, 0x04	; 4
 490:	80 93 0e 02 	sts	0x020E, r24
	font_type.height = 6;
 494:	86 e0       	ldi	r24, 0x06	; 6
 496:	80 93 0f 02 	sts	0x020F, r24
	font_type.ascii_offset = 32;
 49a:	80 e2       	ldi	r24, 0x20	; 32
 49c:	80 93 10 02 	sts	0x0210, r24
 4a0:	08 95       	ret

000004a2 <goto_OLED_page>:
	goto_OLED_char_column(0);
	return;
}

void goto_OLED_page(uint8_t page){
	current_page = page % DISPLAY_PAGES;
 4a2:	87 70       	andi	r24, 0x07	; 7
 4a4:	80 93 04 02 	sts	0x0204, r24
	write_OLED_cmd(0xB0 + current_page);
 4a8:	80 55       	subi	r24, 0x50	; 80
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 4aa:	80 93 00 10 	sts	0x1000, r24
 4ae:	08 95       	ret

000004b0 <goto_OLED_char_column>:
	write_OLED_cmd(0xB0 + current_page);
	return;
}

void goto_OLED_char_column(uint8_t column){
	uint8_t c = column * font_type.width;
 4b0:	90 91 0e 02 	lds	r25, 0x020E
 4b4:	89 9f       	mul	r24, r25
 4b6:	90 2d       	mov	r25, r0
 4b8:	11 24       	eor	r1, r1
	uint8_t low_bits = c & 0x0f;
 4ba:	29 2f       	mov	r18, r25
 4bc:	2f 70       	andi	r18, 0x0F	; 15
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 4be:	e0 e0       	ldi	r30, 0x00	; 0
 4c0:	f0 e1       	ldi	r31, 0x10	; 16
 4c2:	20 83       	st	Z, r18
void goto_OLED_char_column(uint8_t column){
	uint8_t c = column * font_type.width;
	uint8_t low_bits = c & 0x0f;
	uint8_t high_bits = c & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
 4c4:	92 95       	swap	r25
 4c6:	9f 70       	andi	r25, 0x0F	; 15
 4c8:	90 5f       	subi	r25, 0xF0	; 240
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 4ca:	90 83       	st	Z, r25
	uint8_t low_bits = c & 0x0f;
	uint8_t high_bits = c & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
	
	current_column = column;
 4cc:	80 93 05 02 	sts	0x0205, r24
 4d0:	08 95       	ret

000004d2 <OLED_home>:
	OLED_home();
	return;
}

void OLED_home(){
	goto_OLED_page(0);
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <goto_OLED_page>
	goto_OLED_char_column(0);
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	0e 94 58 02 	call	0x4b0	; 0x4b0 <goto_OLED_char_column>
 4de:	08 95       	ret

000004e0 <goto_OLED_physical_column>:
	current_column = temp_col;
	return;
}

void goto_OLED_physical_column(uint8_t column){
	uint8_t low_bits = column & 0x0f;
 4e0:	98 2f       	mov	r25, r24
 4e2:	9f 70       	andi	r25, 0x0F	; 15
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 4e4:	e0 e0       	ldi	r30, 0x00	; 0
 4e6:	f0 e1       	ldi	r31, 0x10	; 16
 4e8:	90 83       	st	Z, r25

void goto_OLED_physical_column(uint8_t column){
	uint8_t low_bits = column & 0x0f;
	uint8_t high_bits = column & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
 4ea:	98 2f       	mov	r25, r24
 4ec:	92 95       	swap	r25
 4ee:	9f 70       	andi	r25, 0x0F	; 15
 4f0:	90 5f       	subi	r25, 0xF0	; 240
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 4f2:	90 83       	st	Z, r25
	uint8_t low_bits = column & 0x0f;
	uint8_t high_bits = column & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
	
	current_column = column;
 4f4:	80 93 05 02 	sts	0x0205, r24
 4f8:	08 95       	ret

000004fa <clear_OLED_page>:
	return;
}

void clear_OLED_page(uint8_t page){
	goto_OLED_page(page);
 4fa:	0e 94 51 02 	call	0x4a2	; 0x4a2 <goto_OLED_page>
	for (uint8_t i = 0; i < DISPLAY_COLUMNS; i++){
 4fe:	80 e0       	ldi	r24, 0x00	; 0
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 500:	e0 e0       	ldi	r30, 0x00	; 0
 502:	f2 e1       	ldi	r31, 0x12	; 18
 504:	10 82       	st	Z, r1
	return;
}

void clear_OLED_page(uint8_t page){
	goto_OLED_page(page);
	for (uint8_t i = 0; i < DISPLAY_COLUMNS; i++){
 506:	8f 5f       	subi	r24, 0xFF	; 255
 508:	80 38       	cpi	r24, 0x80	; 128
 50a:	e1 f7       	brne	.-8      	; 0x504 <__stack+0x5>
		write_OLED_data(0);
	}
	return;
}
 50c:	08 95       	ret

0000050e <OLED_reset>:
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
}


void OLED_reset(){
 50e:	cf 93       	push	r28
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 510:	80 e4       	ldi	r24, 0x40	; 64
 512:	80 93 00 10 	sts	0x1000, r24
}


void OLED_reset(){
	write_OLED_cmd(0x40);		//Set display line start at page 0. 
	for (uint8_t i = 0; i < DISPLAY_PAGES; i++){
 516:	c0 e0       	ldi	r28, 0x00	; 0
		clear_OLED_page(i);
 518:	8c 2f       	mov	r24, r28
 51a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <clear_OLED_page>
}


void OLED_reset(){
	write_OLED_cmd(0x40);		//Set display line start at page 0. 
	for (uint8_t i = 0; i < DISPLAY_PAGES; i++){
 51e:	cf 5f       	subi	r28, 0xFF	; 255
 520:	c8 30       	cpi	r28, 0x08	; 8
 522:	d1 f7       	brne	.-12     	; 0x518 <OLED_reset+0xa>
		clear_OLED_page(i);
	}
	OLED_home();
 524:	0e 94 69 02 	call	0x4d2	; 0x4d2 <OLED_home>
	return;
}
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <OLED_init>:
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 52c:	e0 e0       	ldi	r30, 0x00	; 0
 52e:	f0 e1       	ldi	r31, 0x10	; 16
 530:	8e ea       	ldi	r24, 0xAE	; 174
 532:	80 83       	st	Z, r24
 534:	81 ea       	ldi	r24, 0xA1	; 161
 536:	80 83       	st	Z, r24
 538:	8a ed       	ldi	r24, 0xDA	; 218
 53a:	80 83       	st	Z, r24
 53c:	82 e1       	ldi	r24, 0x12	; 18
 53e:	80 83       	st	Z, r24
 540:	88 ec       	ldi	r24, 0xC8	; 200
 542:	80 83       	st	Z, r24
 544:	88 ea       	ldi	r24, 0xA8	; 168
 546:	80 83       	st	Z, r24
 548:	8f e3       	ldi	r24, 0x3F	; 63
 54a:	80 83       	st	Z, r24
 54c:	85 ed       	ldi	r24, 0xD5	; 213
 54e:	80 83       	st	Z, r24
 550:	80 e8       	ldi	r24, 0x80	; 128
 552:	80 83       	st	Z, r24
 554:	81 e8       	ldi	r24, 0x81	; 129
 556:	80 83       	st	Z, r24
 558:	80 e5       	ldi	r24, 0x50	; 80
 55a:	80 83       	st	Z, r24
 55c:	89 ed       	ldi	r24, 0xD9	; 217
 55e:	80 83       	st	Z, r24
 560:	81 e2       	ldi	r24, 0x21	; 33
 562:	80 83       	st	Z, r24
 564:	80 e2       	ldi	r24, 0x20	; 32
 566:	80 83       	st	Z, r24
 568:	82 e0       	ldi	r24, 0x02	; 2
 56a:	80 83       	st	Z, r24
 56c:	8b ed       	ldi	r24, 0xDB	; 219
 56e:	80 83       	st	Z, r24
 570:	80 e3       	ldi	r24, 0x30	; 48
 572:	80 83       	st	Z, r24
 574:	8d ea       	ldi	r24, 0xAD	; 173
 576:	80 83       	st	Z, r24
 578:	10 82       	st	Z, r1
 57a:	84 ea       	ldi	r24, 0xA4	; 164
 57c:	80 83       	st	Z, r24
 57e:	86 ea       	ldi	r24, 0xA6	; 166
 580:	80 83       	st	Z, r24
 582:	8f ea       	ldi	r24, 0xAF	; 175
 584:	80 83       	st	Z, r24
	
	//write_OLED_cmd(0xA7);		//Inverse display.
	//write_OLED_cmd(0xA5);		//Output ignores RAM content. 
	
	
	OLED_reset();
 586:	0e 94 87 02 	call	0x50e	; 0x50e <OLED_reset>
	set_font4x6();
 58a:	0e 94 41 02 	call	0x482	; 0x482 <set_font4x6>
 58e:	08 95       	ret

00000590 <print_to_OLED>:

void OLED_pos(uint8_t page, uint8_t column){
	return;
}

void print_to_OLED(const char * string, uint8_t start_column){
 590:	3f 92       	push	r3
 592:	4f 92       	push	r4
 594:	5f 92       	push	r5
 596:	6f 92       	push	r6
 598:	7f 92       	push	r7
 59a:	8f 92       	push	r8
 59c:	9f 92       	push	r9
 59e:	af 92       	push	r10
 5a0:	bf 92       	push	r11
 5a2:	cf 92       	push	r12
 5a4:	df 92       	push	r13
 5a6:	ef 92       	push	r14
 5a8:	ff 92       	push	r15
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	ec 01       	movw	r28, r24
 5b4:	36 2e       	mov	r3, r22
	goto_OLED_char_column(start_column);
 5b6:	86 2f       	mov	r24, r22
 5b8:	0e 94 58 02 	call	0x4b0	; 0x4b0 <goto_OLED_char_column>
	int length = strlen(string);
 5bc:	fe 01       	movw	r30, r28
 5be:	01 90       	ld	r0, Z+
 5c0:	00 20       	and	r0, r0
 5c2:	e9 f7       	brne	.-6      	; 0x5be <print_to_OLED+0x2e>
 5c4:	31 97       	sbiw	r30, 0x01	; 1
 5c6:	3f 01       	movw	r6, r30
 5c8:	6c 1a       	sub	r6, r28
 5ca:	7d 0a       	sbc	r7, r29
	
	for (int i = 0; i < length; i++){
 5cc:	16 14       	cp	r1, r6
 5ce:	17 04       	cpc	r1, r7
 5d0:	0c f0       	brlt	.+2      	; 0x5d4 <print_to_OLED+0x44>
 5d2:	57 c0       	rjmp	.+174    	; 0x682 <print_to_OLED+0xf2>
 5d4:	4e 01       	movw	r8, r28
 5d6:	a1 2c       	mov	r10, r1
 5d8:	b1 2c       	mov	r11, r1
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 5da:	ce e0       	ldi	r28, 0x0E	; 14
 5dc:	d2 e0       	ldi	r29, 0x02	; 2
 5de:	51 2c       	mov	r5, r1
 5e0:	41 2c       	mov	r4, r1
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
 5e2:	0f 2e       	mov	r0, r31
 5e4:	f1 e1       	ldi	r31, 0x11	; 17
 5e6:	cf 2e       	mov	r12, r31
 5e8:	f2 e0       	ldi	r31, 0x02	; 2
 5ea:	df 2e       	mov	r13, r31
 5ec:	f0 2d       	mov	r31, r0
 5ee:	0f 2e       	mov	r0, r31
 5f0:	f0 e1       	ldi	r31, 0x10	; 16
 5f2:	ef 2e       	mov	r14, r31
 5f4:	f2 e0       	ldi	r31, 0x02	; 2
 5f6:	ff 2e       	mov	r15, r31
 5f8:	f0 2d       	mov	r31, r0
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 5fa:	00 e0       	ldi	r16, 0x00	; 0
 5fc:	12 e1       	ldi	r17, 0x12	; 18
void print_to_OLED(const char * string, uint8_t start_column){
	goto_OLED_char_column(start_column);
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
		char c = string[i];
 5fe:	d4 01       	movw	r26, r8
 600:	4d 91       	ld	r20, X+
 602:	4d 01       	movw	r8, r26
		if (c == '\n') {
 604:	4a 30       	cpi	r20, 0x0A	; 10
 606:	31 f0       	breq	.+12     	; 0x614 <print_to_OLED+0x84>
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 608:	28 81       	ld	r18, Y
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	12 16       	cp	r1, r18
 60e:	13 06       	cpc	r1, r19
 610:	6c f0       	brlt	.+26     	; 0x62c <print_to_OLED+0x9c>
 612:	30 c0       	rjmp	.+96     	; 0x674 <print_to_OLED+0xe4>
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
		char c = string[i];
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
 614:	80 91 04 02 	lds	r24, 0x0204
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	01 96       	adiw	r24, 0x01	; 1
 61c:	87 70       	andi	r24, 0x07	; 7
 61e:	90 78       	andi	r25, 0x80	; 128
 620:	0e 94 51 02 	call	0x4a2	; 0x4a2 <goto_OLED_page>
			goto_OLED_char_column(start_column);
 624:	83 2d       	mov	r24, r3
 626:	0e 94 58 02 	call	0x4b0	; 0x4b0 <goto_OLED_char_column>
 62a:	24 c0       	rjmp	.+72     	; 0x674 <print_to_OLED+0xe4>
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 62c:	85 2d       	mov	r24, r5
 62e:	94 2d       	mov	r25, r4
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
 630:	50 e0       	ldi	r21, 0x00	; 0
 632:	f7 01       	movw	r30, r14
 634:	60 81       	ld	r22, Z
 636:	da 01       	movw	r26, r20
 638:	a6 1b       	sub	r26, r22
 63a:	b1 09       	sbc	r27, r1
 63c:	2a 9f       	mul	r18, r26
 63e:	f0 01       	movw	r30, r0
 640:	2b 9f       	mul	r18, r27
 642:	f0 0d       	add	r31, r0
 644:	3a 9f       	mul	r19, r26
 646:	f0 0d       	add	r31, r0
 648:	11 24       	eor	r1, r1
 64a:	e8 0f       	add	r30, r24
 64c:	f9 1f       	adc	r31, r25
 64e:	d6 01       	movw	r26, r12
 650:	2d 91       	ld	r18, X+
 652:	3c 91       	ld	r19, X
 654:	e2 0f       	add	r30, r18
 656:	f3 1f       	adc	r31, r19
 658:	e4 91       	lpm	r30, Z
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 65a:	d8 01       	movw	r26, r16
 65c:	ec 93       	st	X, r30
		else{
			for (int j = 0; j < font_type.width; j++){
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
				//write_OLED_data(pgm_read_byte(&font[c-font_type.ascii_offset][j]));
				//write_OLED_data(pgm_read_byte(&font_type.data[c-font_type.ascii_offset][j]));
				current_column = current_column + font_type.width;
 65e:	30 91 05 02 	lds	r19, 0x0205
 662:	28 81       	ld	r18, Y
 664:	32 0f       	add	r19, r18
 666:	30 93 05 02 	sts	0x0205, r19
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 66a:	01 96       	adiw	r24, 0x01	; 1
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	82 17       	cp	r24, r18
 670:	93 07       	cpc	r25, r19
 672:	fc f2       	brlt	.-66     	; 0x632 <print_to_OLED+0xa2>

void print_to_OLED(const char * string, uint8_t start_column){
	goto_OLED_char_column(start_column);
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
 674:	bf ef       	ldi	r27, 0xFF	; 255
 676:	ab 1a       	sub	r10, r27
 678:	bb 0a       	sbc	r11, r27
 67a:	6a 14       	cp	r6, r10
 67c:	7b 04       	cpc	r7, r11
 67e:	09 f0       	breq	.+2      	; 0x682 <print_to_OLED+0xf2>
 680:	be cf       	rjmp	.-132    	; 0x5fe <print_to_OLED+0x6e>
				current_column = current_column + font_type.width;
			}
		}
	}
	return;
}
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	1f 91       	pop	r17
 688:	0f 91       	pop	r16
 68a:	ff 90       	pop	r15
 68c:	ef 90       	pop	r14
 68e:	df 90       	pop	r13
 690:	cf 90       	pop	r12
 692:	bf 90       	pop	r11
 694:	af 90       	pop	r10
 696:	9f 90       	pop	r9
 698:	8f 90       	pop	r8
 69a:	7f 90       	pop	r7
 69c:	6f 90       	pop	r6
 69e:	5f 90       	pop	r5
 6a0:	4f 90       	pop	r4
 6a2:	3f 90       	pop	r3
 6a4:	08 95       	ret

000006a6 <OLED_print_arrow>:

void OLED_print_arrow(uint8_t page)
{	int temp = current_page;
 6a6:	cf 93       	push	r28
 6a8:	c0 91 04 02 	lds	r28, 0x0204
	goto_OLED_page(page);
 6ac:	0e 94 51 02 	call	0x4a2	; 0x4a2 <goto_OLED_page>
	goto_OLED_physical_column(1);
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <goto_OLED_physical_column>
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 6b6:	e0 e0       	ldi	r30, 0x00	; 0
 6b8:	f2 e1       	ldi	r31, 0x12	; 18
 6ba:	98 e1       	ldi	r25, 0x18	; 24
 6bc:	90 83       	st	Z, r25
 6be:	90 83       	st	Z, r25
 6c0:	8e e7       	ldi	r24, 0x7E	; 126
 6c2:	80 83       	st	Z, r24
 6c4:	8c e3       	ldi	r24, 0x3C	; 60
 6c6:	80 83       	st	Z, r24
 6c8:	90 83       	st	Z, r25
	write_OLED_data(0b00011000);
	write_OLED_data(0b00011000);
	write_OLED_data(0b01111110);
	write_OLED_data(0b00111100);
	write_OLED_data(0b00011000);
	current_column = ARROW_WIDTH;
 6ca:	88 e0       	ldi	r24, 0x08	; 8
 6cc:	80 93 05 02 	sts	0x0205, r24
	
	goto_OLED_page(temp);
 6d0:	8c 2f       	mov	r24, r28
 6d2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <goto_OLED_page>
}
 6d6:	cf 91       	pop	r28
 6d8:	08 95       	ret

000006da <main>:
	 //}
	
	
	//ov2////////////////////////////////
	
	DDRE=0x3;
 6da:	83 e0       	ldi	r24, 0x03	; 3
 6dc:	86 b9       	out	0x06, r24	; 6
	DDRA=0xFF;
 6de:	8f ef       	ldi	r24, 0xFF	; 255
 6e0:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 6e2:	1b ba       	out	0x1b, r1	; 27
	PORTE=0x2;
 6e4:	82 e0       	ldi	r24, 0x02	; 2
 6e6:	87 b9       	out	0x07, r24	; 7
	char temp = read_MCP2515(MCP_CANCTRL);
	printf("Temp: %i\n", temp);
	}*/
	
	
	memory_init();
 6e8:	0e 94 15 01 	call	0x22a	; 0x22a <memory_init>
	UART_Init(MYUBRR);
 6ec:	8f e1       	ldi	r24, 0x1F	; 31
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	0e 94 a0 03 	call	0x740	; 0x740 <UART_Init>
	printf("Atmega162 start\n");
 6f4:	83 ef       	ldi	r24, 0xF3	; 243
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <puts>
	CAN_struct joyfull;
	joyfull.ID = 1;
	joyfull.length = 1;
	*/
	
	slider_init();
 6fc:	0e 94 83 03 	call	0x706	; 0x706 <slider_init>
	menu_init();
 700:	0e 94 1c 01 	call	0x238	; 0x238 <menu_init>
 704:	ff cf       	rjmp	.-2      	; 0x704 <main+0x2a>

00000706 <slider_init>:




void slider_init(void){
	DDRD &= ~((1<<PD2) | (1<<PD3));
 706:	81 b3       	in	r24, 0x11	; 17
 708:	83 7f       	andi	r24, 0xF3	; 243
 70a:	81 bb       	out	0x11, r24	; 17
	
	/* Enable slider button interrupts. */
	cli();								// Disable global interrupts
 70c:	f8 94       	cli
	MCUCR |= (1<<ISC01) | (1<<ISC11);	// Interrupt on rising edge PD2 and PD3. 
 70e:	85 b7       	in	r24, 0x35	; 53
 710:	8a 60       	ori	r24, 0x0A	; 10
 712:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0) | (1<< INT1);		// Enable interrupt on PD2 and PD3. 
 714:	8b b7       	in	r24, 0x3b	; 59
 716:	80 6c       	ori	r24, 0xC0	; 192
 718:	8b bf       	out	0x3b, r24	; 59
	sei();								// Enable global interrupts
 71a:	78 94       	sei
 71c:	08 95       	ret

0000071e <push_solenoid>:

void push_solenoid(){
	//int output = slider_left_button() >> 2;
	//PORTB |= (output & (1<<PB0));
	
	PORTB |= (1<<PB0);
 71e:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 720:	83 ed       	ldi	r24, 0xD3	; 211
 722:	90 e3       	ldi	r25, 0x30	; 48
 724:	01 97       	sbiw	r24, 0x01	; 1
 726:	f1 f7       	brne	.-4      	; 0x724 <push_solenoid+0x6>
 728:	00 c0       	rjmp	.+0      	; 0x72a <push_solenoid+0xc>
 72a:	00 00       	nop
	_delay_ms(50);
	PORTB &= ~(1<<PB0);
 72c:	c0 98       	cbi	0x18, 0	; 24
 72e:	08 95       	ret

00000730 <UART_Transmit>:
	}
	
void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer*/
		while( !( UCSR0A & (1<<UDRE0)) )
 730:	5d 9b       	sbis	0x0b, 5	; 11
 732:	fe cf       	rjmp	.-4      	; 0x730 <UART_Transmit>
		;
	/* Put data into buffer, sends the data*/
		UDR0 = data;
 734:	8c b9       	out	0x0c, r24	; 12
 736:	08 95       	ret

00000738 <UART_Receive>:
}

unsigned char UART_Receive(void)
	{
		/* Wait for data to be received*/
		while( !(UCSR0A & (1<<RXC0)) )
 738:	5f 9b       	sbis	0x0b, 7	; 11
 73a:	fe cf       	rjmp	.-4      	; 0x738 <UART_Receive>
			;
		/* Get and return received data from buffer*/
		return UDR0;
 73c:	8c b1       	in	r24, 0x0c	; 12
 73e:	08 95       	ret

00000740 <UART_Init>:
#define MYUBRR FOSC/16/BAUD-1

void UART_Init(unsigned int ubrr)
	{
		/* Set baud rate */
		UBRR0H = (unsigned char)(ubrr>>8);
 740:	90 bd       	out	0x20, r25	; 32
		UBRR0L = (unsigned char)ubrr;
 742:	89 b9       	out	0x09, r24	; 9
		/* Enable receiver and transmitter */
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 744:	88 e1       	ldi	r24, 0x18	; 24
 746:	8a b9       	out	0x0a, r24	; 10
		/* 
		Set frame format: 8data, 2stop bit
		*/
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 748:	8e e8       	ldi	r24, 0x8E	; 142
 74a:	80 bd       	out	0x20, r24	; 32
		fdevopen(&UART_Transmit, &UART_Receive);
 74c:	6c e9       	ldi	r22, 0x9C	; 156
 74e:	73 e0       	ldi	r23, 0x03	; 3
 750:	88 e9       	ldi	r24, 0x98	; 152
 752:	93 e0       	ldi	r25, 0x03	; 3
 754:	0e 94 ad 03 	call	0x75a	; 0x75a <fdevopen>
 758:	08 95       	ret

0000075a <fdevopen>:
 75a:	0f 93       	push	r16
 75c:	1f 93       	push	r17
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	ec 01       	movw	r28, r24
 764:	8b 01       	movw	r16, r22
 766:	00 97       	sbiw	r24, 0x00	; 0
 768:	31 f4       	brne	.+12     	; 0x776 <fdevopen+0x1c>
 76a:	61 15       	cp	r22, r1
 76c:	71 05       	cpc	r23, r1
 76e:	19 f4       	brne	.+6      	; 0x776 <fdevopen+0x1c>
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	38 c0       	rjmp	.+112    	; 0x7e6 <fdevopen+0x8c>
 776:	6e e0       	ldi	r22, 0x0E	; 14
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 25 04 	call	0x84a	; 0x84a <calloc>
 782:	fc 01       	movw	r30, r24
 784:	00 97       	sbiw	r24, 0x00	; 0
 786:	a1 f3       	breq	.-24     	; 0x770 <fdevopen+0x16>
 788:	80 e8       	ldi	r24, 0x80	; 128
 78a:	83 83       	std	Z+3, r24	; 0x03
 78c:	01 15       	cp	r16, r1
 78e:	11 05       	cpc	r17, r1
 790:	71 f0       	breq	.+28     	; 0x7ae <fdevopen+0x54>
 792:	13 87       	std	Z+11, r17	; 0x0b
 794:	02 87       	std	Z+10, r16	; 0x0a
 796:	81 e8       	ldi	r24, 0x81	; 129
 798:	83 83       	std	Z+3, r24	; 0x03
 79a:	80 91 7a 02 	lds	r24, 0x027A
 79e:	90 91 7b 02 	lds	r25, 0x027B
 7a2:	89 2b       	or	r24, r25
 7a4:	21 f4       	brne	.+8      	; 0x7ae <fdevopen+0x54>
 7a6:	f0 93 7b 02 	sts	0x027B, r31
 7aa:	e0 93 7a 02 	sts	0x027A, r30
 7ae:	20 97       	sbiw	r28, 0x00	; 0
 7b0:	c9 f0       	breq	.+50     	; 0x7e4 <fdevopen+0x8a>
 7b2:	d1 87       	std	Z+9, r29	; 0x09
 7b4:	c0 87       	std	Z+8, r28	; 0x08
 7b6:	83 81       	ldd	r24, Z+3	; 0x03
 7b8:	82 60       	ori	r24, 0x02	; 2
 7ba:	83 83       	std	Z+3, r24	; 0x03
 7bc:	80 91 7c 02 	lds	r24, 0x027C
 7c0:	90 91 7d 02 	lds	r25, 0x027D
 7c4:	89 2b       	or	r24, r25
 7c6:	71 f4       	brne	.+28     	; 0x7e4 <fdevopen+0x8a>
 7c8:	f0 93 7d 02 	sts	0x027D, r31
 7cc:	e0 93 7c 02 	sts	0x027C, r30
 7d0:	80 91 7e 02 	lds	r24, 0x027E
 7d4:	90 91 7f 02 	lds	r25, 0x027F
 7d8:	89 2b       	or	r24, r25
 7da:	21 f4       	brne	.+8      	; 0x7e4 <fdevopen+0x8a>
 7dc:	f0 93 7f 02 	sts	0x027F, r31
 7e0:	e0 93 7e 02 	sts	0x027E, r30
 7e4:	cf 01       	movw	r24, r30
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	1f 91       	pop	r17
 7ec:	0f 91       	pop	r16
 7ee:	08 95       	ret

000007f0 <puts>:
 7f0:	0f 93       	push	r16
 7f2:	1f 93       	push	r17
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
 7f8:	e0 91 7c 02 	lds	r30, 0x027C
 7fc:	f0 91 7d 02 	lds	r31, 0x027D
 800:	23 81       	ldd	r18, Z+3	; 0x03
 802:	21 ff       	sbrs	r18, 1
 804:	1b c0       	rjmp	.+54     	; 0x83c <puts+0x4c>
 806:	ec 01       	movw	r28, r24
 808:	00 e0       	ldi	r16, 0x00	; 0
 80a:	10 e0       	ldi	r17, 0x00	; 0
 80c:	89 91       	ld	r24, Y+
 80e:	60 91 7c 02 	lds	r22, 0x027C
 812:	70 91 7d 02 	lds	r23, 0x027D
 816:	db 01       	movw	r26, r22
 818:	18 96       	adiw	r26, 0x08	; 8
 81a:	ed 91       	ld	r30, X+
 81c:	fc 91       	ld	r31, X
 81e:	19 97       	sbiw	r26, 0x09	; 9
 820:	88 23       	and	r24, r24
 822:	31 f0       	breq	.+12     	; 0x830 <puts+0x40>
 824:	09 95       	icall
 826:	89 2b       	or	r24, r25
 828:	89 f3       	breq	.-30     	; 0x80c <puts+0x1c>
 82a:	0f ef       	ldi	r16, 0xFF	; 255
 82c:	1f ef       	ldi	r17, 0xFF	; 255
 82e:	ee cf       	rjmp	.-36     	; 0x80c <puts+0x1c>
 830:	8a e0       	ldi	r24, 0x0A	; 10
 832:	09 95       	icall
 834:	89 2b       	or	r24, r25
 836:	11 f4       	brne	.+4      	; 0x83c <puts+0x4c>
 838:	c8 01       	movw	r24, r16
 83a:	02 c0       	rjmp	.+4      	; 0x840 <puts+0x50>
 83c:	8f ef       	ldi	r24, 0xFF	; 255
 83e:	9f ef       	ldi	r25, 0xFF	; 255
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	1f 91       	pop	r17
 846:	0f 91       	pop	r16
 848:	08 95       	ret

0000084a <calloc>:
 84a:	0f 93       	push	r16
 84c:	1f 93       	push	r17
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	86 9f       	mul	r24, r22
 854:	80 01       	movw	r16, r0
 856:	87 9f       	mul	r24, r23
 858:	10 0d       	add	r17, r0
 85a:	96 9f       	mul	r25, r22
 85c:	10 0d       	add	r17, r0
 85e:	11 24       	eor	r1, r1
 860:	c8 01       	movw	r24, r16
 862:	0e 94 41 04 	call	0x882	; 0x882 <malloc>
 866:	ec 01       	movw	r28, r24
 868:	00 97       	sbiw	r24, 0x00	; 0
 86a:	29 f0       	breq	.+10     	; 0x876 <calloc+0x2c>
 86c:	a8 01       	movw	r20, r16
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	70 e0       	ldi	r23, 0x00	; 0
 872:	0e 94 68 05 	call	0xad0	; 0xad0 <memset>
 876:	ce 01       	movw	r24, r28
 878:	df 91       	pop	r29
 87a:	cf 91       	pop	r28
 87c:	1f 91       	pop	r17
 87e:	0f 91       	pop	r16
 880:	08 95       	ret

00000882 <malloc>:
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
 886:	82 30       	cpi	r24, 0x02	; 2
 888:	91 05       	cpc	r25, r1
 88a:	10 f4       	brcc	.+4      	; 0x890 <malloc+0xe>
 88c:	82 e0       	ldi	r24, 0x02	; 2
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	e0 91 82 02 	lds	r30, 0x0282
 894:	f0 91 83 02 	lds	r31, 0x0283
 898:	20 e0       	ldi	r18, 0x00	; 0
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	a0 e0       	ldi	r26, 0x00	; 0
 89e:	b0 e0       	ldi	r27, 0x00	; 0
 8a0:	30 97       	sbiw	r30, 0x00	; 0
 8a2:	39 f1       	breq	.+78     	; 0x8f2 <malloc+0x70>
 8a4:	40 81       	ld	r20, Z
 8a6:	51 81       	ldd	r21, Z+1	; 0x01
 8a8:	48 17       	cp	r20, r24
 8aa:	59 07       	cpc	r21, r25
 8ac:	b8 f0       	brcs	.+46     	; 0x8dc <malloc+0x5a>
 8ae:	48 17       	cp	r20, r24
 8b0:	59 07       	cpc	r21, r25
 8b2:	71 f4       	brne	.+28     	; 0x8d0 <malloc+0x4e>
 8b4:	82 81       	ldd	r24, Z+2	; 0x02
 8b6:	93 81       	ldd	r25, Z+3	; 0x03
 8b8:	10 97       	sbiw	r26, 0x00	; 0
 8ba:	29 f0       	breq	.+10     	; 0x8c6 <malloc+0x44>
 8bc:	13 96       	adiw	r26, 0x03	; 3
 8be:	9c 93       	st	X, r25
 8c0:	8e 93       	st	-X, r24
 8c2:	12 97       	sbiw	r26, 0x02	; 2
 8c4:	2c c0       	rjmp	.+88     	; 0x91e <malloc+0x9c>
 8c6:	90 93 83 02 	sts	0x0283, r25
 8ca:	80 93 82 02 	sts	0x0282, r24
 8ce:	27 c0       	rjmp	.+78     	; 0x91e <malloc+0x9c>
 8d0:	21 15       	cp	r18, r1
 8d2:	31 05       	cpc	r19, r1
 8d4:	31 f0       	breq	.+12     	; 0x8e2 <malloc+0x60>
 8d6:	42 17       	cp	r20, r18
 8d8:	53 07       	cpc	r21, r19
 8da:	18 f0       	brcs	.+6      	; 0x8e2 <malloc+0x60>
 8dc:	a9 01       	movw	r20, r18
 8de:	db 01       	movw	r26, r22
 8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <malloc+0x62>
 8e2:	ef 01       	movw	r28, r30
 8e4:	9a 01       	movw	r18, r20
 8e6:	bd 01       	movw	r22, r26
 8e8:	df 01       	movw	r26, r30
 8ea:	02 80       	ldd	r0, Z+2	; 0x02
 8ec:	f3 81       	ldd	r31, Z+3	; 0x03
 8ee:	e0 2d       	mov	r30, r0
 8f0:	d7 cf       	rjmp	.-82     	; 0x8a0 <malloc+0x1e>
 8f2:	21 15       	cp	r18, r1
 8f4:	31 05       	cpc	r19, r1
 8f6:	f9 f0       	breq	.+62     	; 0x936 <malloc+0xb4>
 8f8:	28 1b       	sub	r18, r24
 8fa:	39 0b       	sbc	r19, r25
 8fc:	24 30       	cpi	r18, 0x04	; 4
 8fe:	31 05       	cpc	r19, r1
 900:	80 f4       	brcc	.+32     	; 0x922 <malloc+0xa0>
 902:	8a 81       	ldd	r24, Y+2	; 0x02
 904:	9b 81       	ldd	r25, Y+3	; 0x03
 906:	61 15       	cp	r22, r1
 908:	71 05       	cpc	r23, r1
 90a:	21 f0       	breq	.+8      	; 0x914 <malloc+0x92>
 90c:	fb 01       	movw	r30, r22
 90e:	93 83       	std	Z+3, r25	; 0x03
 910:	82 83       	std	Z+2, r24	; 0x02
 912:	04 c0       	rjmp	.+8      	; 0x91c <malloc+0x9a>
 914:	90 93 83 02 	sts	0x0283, r25
 918:	80 93 82 02 	sts	0x0282, r24
 91c:	fe 01       	movw	r30, r28
 91e:	32 96       	adiw	r30, 0x02	; 2
 920:	44 c0       	rjmp	.+136    	; 0x9aa <malloc+0x128>
 922:	fe 01       	movw	r30, r28
 924:	e2 0f       	add	r30, r18
 926:	f3 1f       	adc	r31, r19
 928:	81 93       	st	Z+, r24
 92a:	91 93       	st	Z+, r25
 92c:	22 50       	subi	r18, 0x02	; 2
 92e:	31 09       	sbc	r19, r1
 930:	39 83       	std	Y+1, r19	; 0x01
 932:	28 83       	st	Y, r18
 934:	3a c0       	rjmp	.+116    	; 0x9aa <malloc+0x128>
 936:	20 91 80 02 	lds	r18, 0x0280
 93a:	30 91 81 02 	lds	r19, 0x0281
 93e:	23 2b       	or	r18, r19
 940:	41 f4       	brne	.+16     	; 0x952 <malloc+0xd0>
 942:	20 91 02 01 	lds	r18, 0x0102
 946:	30 91 03 01 	lds	r19, 0x0103
 94a:	30 93 81 02 	sts	0x0281, r19
 94e:	20 93 80 02 	sts	0x0280, r18
 952:	20 91 00 01 	lds	r18, 0x0100
 956:	30 91 01 01 	lds	r19, 0x0101
 95a:	21 15       	cp	r18, r1
 95c:	31 05       	cpc	r19, r1
 95e:	41 f4       	brne	.+16     	; 0x970 <malloc+0xee>
 960:	2d b7       	in	r18, 0x3d	; 61
 962:	3e b7       	in	r19, 0x3e	; 62
 964:	40 91 04 01 	lds	r20, 0x0104
 968:	50 91 05 01 	lds	r21, 0x0105
 96c:	24 1b       	sub	r18, r20
 96e:	35 0b       	sbc	r19, r21
 970:	e0 91 80 02 	lds	r30, 0x0280
 974:	f0 91 81 02 	lds	r31, 0x0281
 978:	e2 17       	cp	r30, r18
 97a:	f3 07       	cpc	r31, r19
 97c:	a0 f4       	brcc	.+40     	; 0x9a6 <malloc+0x124>
 97e:	2e 1b       	sub	r18, r30
 980:	3f 0b       	sbc	r19, r31
 982:	28 17       	cp	r18, r24
 984:	39 07       	cpc	r19, r25
 986:	78 f0       	brcs	.+30     	; 0x9a6 <malloc+0x124>
 988:	ac 01       	movw	r20, r24
 98a:	4e 5f       	subi	r20, 0xFE	; 254
 98c:	5f 4f       	sbci	r21, 0xFF	; 255
 98e:	24 17       	cp	r18, r20
 990:	35 07       	cpc	r19, r21
 992:	48 f0       	brcs	.+18     	; 0x9a6 <malloc+0x124>
 994:	4e 0f       	add	r20, r30
 996:	5f 1f       	adc	r21, r31
 998:	50 93 81 02 	sts	0x0281, r21
 99c:	40 93 80 02 	sts	0x0280, r20
 9a0:	81 93       	st	Z+, r24
 9a2:	91 93       	st	Z+, r25
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <malloc+0x128>
 9a6:	e0 e0       	ldi	r30, 0x00	; 0
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	cf 01       	movw	r24, r30
 9ac:	df 91       	pop	r29
 9ae:	cf 91       	pop	r28
 9b0:	08 95       	ret

000009b2 <free>:
 9b2:	cf 93       	push	r28
 9b4:	df 93       	push	r29
 9b6:	00 97       	sbiw	r24, 0x00	; 0
 9b8:	09 f4       	brne	.+2      	; 0x9bc <free+0xa>
 9ba:	87 c0       	rjmp	.+270    	; 0xaca <free+0x118>
 9bc:	fc 01       	movw	r30, r24
 9be:	32 97       	sbiw	r30, 0x02	; 2
 9c0:	13 82       	std	Z+3, r1	; 0x03
 9c2:	12 82       	std	Z+2, r1	; 0x02
 9c4:	c0 91 82 02 	lds	r28, 0x0282
 9c8:	d0 91 83 02 	lds	r29, 0x0283
 9cc:	20 97       	sbiw	r28, 0x00	; 0
 9ce:	81 f4       	brne	.+32     	; 0x9f0 <free+0x3e>
 9d0:	20 81       	ld	r18, Z
 9d2:	31 81       	ldd	r19, Z+1	; 0x01
 9d4:	28 0f       	add	r18, r24
 9d6:	39 1f       	adc	r19, r25
 9d8:	80 91 80 02 	lds	r24, 0x0280
 9dc:	90 91 81 02 	lds	r25, 0x0281
 9e0:	82 17       	cp	r24, r18
 9e2:	93 07       	cpc	r25, r19
 9e4:	79 f5       	brne	.+94     	; 0xa44 <free+0x92>
 9e6:	f0 93 81 02 	sts	0x0281, r31
 9ea:	e0 93 80 02 	sts	0x0280, r30
 9ee:	6d c0       	rjmp	.+218    	; 0xaca <free+0x118>
 9f0:	de 01       	movw	r26, r28
 9f2:	20 e0       	ldi	r18, 0x00	; 0
 9f4:	30 e0       	ldi	r19, 0x00	; 0
 9f6:	ae 17       	cp	r26, r30
 9f8:	bf 07       	cpc	r27, r31
 9fa:	50 f4       	brcc	.+20     	; 0xa10 <free+0x5e>
 9fc:	12 96       	adiw	r26, 0x02	; 2
 9fe:	4d 91       	ld	r20, X+
 a00:	5c 91       	ld	r21, X
 a02:	13 97       	sbiw	r26, 0x03	; 3
 a04:	9d 01       	movw	r18, r26
 a06:	41 15       	cp	r20, r1
 a08:	51 05       	cpc	r21, r1
 a0a:	09 f1       	breq	.+66     	; 0xa4e <free+0x9c>
 a0c:	da 01       	movw	r26, r20
 a0e:	f3 cf       	rjmp	.-26     	; 0x9f6 <free+0x44>
 a10:	b3 83       	std	Z+3, r27	; 0x03
 a12:	a2 83       	std	Z+2, r26	; 0x02
 a14:	40 81       	ld	r20, Z
 a16:	51 81       	ldd	r21, Z+1	; 0x01
 a18:	84 0f       	add	r24, r20
 a1a:	95 1f       	adc	r25, r21
 a1c:	8a 17       	cp	r24, r26
 a1e:	9b 07       	cpc	r25, r27
 a20:	71 f4       	brne	.+28     	; 0xa3e <free+0x8c>
 a22:	8d 91       	ld	r24, X+
 a24:	9c 91       	ld	r25, X
 a26:	11 97       	sbiw	r26, 0x01	; 1
 a28:	84 0f       	add	r24, r20
 a2a:	95 1f       	adc	r25, r21
 a2c:	02 96       	adiw	r24, 0x02	; 2
 a2e:	91 83       	std	Z+1, r25	; 0x01
 a30:	80 83       	st	Z, r24
 a32:	12 96       	adiw	r26, 0x02	; 2
 a34:	8d 91       	ld	r24, X+
 a36:	9c 91       	ld	r25, X
 a38:	13 97       	sbiw	r26, 0x03	; 3
 a3a:	93 83       	std	Z+3, r25	; 0x03
 a3c:	82 83       	std	Z+2, r24	; 0x02
 a3e:	21 15       	cp	r18, r1
 a40:	31 05       	cpc	r19, r1
 a42:	29 f4       	brne	.+10     	; 0xa4e <free+0x9c>
 a44:	f0 93 83 02 	sts	0x0283, r31
 a48:	e0 93 82 02 	sts	0x0282, r30
 a4c:	3e c0       	rjmp	.+124    	; 0xaca <free+0x118>
 a4e:	d9 01       	movw	r26, r18
 a50:	13 96       	adiw	r26, 0x03	; 3
 a52:	fc 93       	st	X, r31
 a54:	ee 93       	st	-X, r30
 a56:	12 97       	sbiw	r26, 0x02	; 2
 a58:	4d 91       	ld	r20, X+
 a5a:	5d 91       	ld	r21, X+
 a5c:	a4 0f       	add	r26, r20
 a5e:	b5 1f       	adc	r27, r21
 a60:	ea 17       	cp	r30, r26
 a62:	fb 07       	cpc	r31, r27
 a64:	79 f4       	brne	.+30     	; 0xa84 <free+0xd2>
 a66:	80 81       	ld	r24, Z
 a68:	91 81       	ldd	r25, Z+1	; 0x01
 a6a:	84 0f       	add	r24, r20
 a6c:	95 1f       	adc	r25, r21
 a6e:	02 96       	adiw	r24, 0x02	; 2
 a70:	d9 01       	movw	r26, r18
 a72:	11 96       	adiw	r26, 0x01	; 1
 a74:	9c 93       	st	X, r25
 a76:	8e 93       	st	-X, r24
 a78:	82 81       	ldd	r24, Z+2	; 0x02
 a7a:	93 81       	ldd	r25, Z+3	; 0x03
 a7c:	13 96       	adiw	r26, 0x03	; 3
 a7e:	9c 93       	st	X, r25
 a80:	8e 93       	st	-X, r24
 a82:	12 97       	sbiw	r26, 0x02	; 2
 a84:	e0 e0       	ldi	r30, 0x00	; 0
 a86:	f0 e0       	ldi	r31, 0x00	; 0
 a88:	8a 81       	ldd	r24, Y+2	; 0x02
 a8a:	9b 81       	ldd	r25, Y+3	; 0x03
 a8c:	00 97       	sbiw	r24, 0x00	; 0
 a8e:	19 f0       	breq	.+6      	; 0xa96 <free+0xe4>
 a90:	fe 01       	movw	r30, r28
 a92:	ec 01       	movw	r28, r24
 a94:	f9 cf       	rjmp	.-14     	; 0xa88 <free+0xd6>
 a96:	ce 01       	movw	r24, r28
 a98:	02 96       	adiw	r24, 0x02	; 2
 a9a:	28 81       	ld	r18, Y
 a9c:	39 81       	ldd	r19, Y+1	; 0x01
 a9e:	82 0f       	add	r24, r18
 aa0:	93 1f       	adc	r25, r19
 aa2:	20 91 80 02 	lds	r18, 0x0280
 aa6:	30 91 81 02 	lds	r19, 0x0281
 aaa:	28 17       	cp	r18, r24
 aac:	39 07       	cpc	r19, r25
 aae:	69 f4       	brne	.+26     	; 0xaca <free+0x118>
 ab0:	30 97       	sbiw	r30, 0x00	; 0
 ab2:	29 f4       	brne	.+10     	; 0xabe <free+0x10c>
 ab4:	10 92 83 02 	sts	0x0283, r1
 ab8:	10 92 82 02 	sts	0x0282, r1
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <free+0x110>
 abe:	13 82       	std	Z+3, r1	; 0x03
 ac0:	12 82       	std	Z+2, r1	; 0x02
 ac2:	d0 93 81 02 	sts	0x0281, r29
 ac6:	c0 93 80 02 	sts	0x0280, r28
 aca:	df 91       	pop	r29
 acc:	cf 91       	pop	r28
 ace:	08 95       	ret

00000ad0 <memset>:
 ad0:	dc 01       	movw	r26, r24
 ad2:	01 c0       	rjmp	.+2      	; 0xad6 <memset+0x6>
 ad4:	6d 93       	st	X+, r22
 ad6:	41 50       	subi	r20, 0x01	; 1
 ad8:	50 40       	sbci	r21, 0x00	; 0
 ada:	e0 f7       	brcc	.-8      	; 0xad4 <memset+0x4>
 adc:	08 95       	ret

00000ade <_exit>:
 ade:	f8 94       	cli

00000ae0 <__stop_program>:
 ae0:	ff cf       	rjmp	.-2      	; 0xae0 <__stop_program>
