
Oving1_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000ad0  00000b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000080  00800116  00800116  00000b7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b7a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000260  00000000  00000000  00000baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000225e  00000000  00000000  00000e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c3a  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ba0  00000000  00000000  00003ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005d0  00000000  00000000  00004844  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000075b  00000000  00000000  00004e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ee7  00000000  00000000  0000556f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000250  00000000  00000000  00006456  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__vector_1>
   8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__vector_2>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 ed       	ldi	r30, 0xD0	; 208
  84:	fa e0       	ldi	r31, 0x0A	; 10
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 31       	cpi	r26, 0x16	; 22
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e1       	ldi	r26, 0x16	; 22
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 39       	cpi	r26, 0x96	; 150
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 0b 03 	call	0x616	; 0x616 <main>
  a6:	0c 94 66 05 	jmp	0xacc	; 0xacc <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:
  ae:	0e 94 88 01 	call	0x310	; 0x310 <MCP2515_init>
  b2:	4f ef       	ldi	r20, 0xFF	; 255
  b4:	60 e6       	ldi	r22, 0x60	; 96
  b6:	80 e6       	ldi	r24, 0x60	; 96
  b8:	0e 94 66 01 	call	0x2cc	; 0x2cc <bit_modify_MCP2515>
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	64 e0       	ldi	r22, 0x04	; 4
  c0:	80 e6       	ldi	r24, 0x60	; 96
  c2:	0e 94 66 01 	call	0x2cc	; 0x2cc <bit_modify_MCP2515>
  c6:	45 e0       	ldi	r20, 0x05	; 5
  c8:	65 e0       	ldi	r22, 0x05	; 5
  ca:	8b e2       	ldi	r24, 0x2B	; 43
  cc:	0e 94 66 01 	call	0x2cc	; 0x2cc <bit_modify_MCP2515>
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	60 ee       	ldi	r22, 0xE0	; 224
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	0e 94 66 01 	call	0x2cc	; 0x2cc <bit_modify_MCP2515>
  da:	08 95       	ret

000000dc <send_CAN_message>:
  dc:	8f 92       	push	r8
  de:	9f 92       	push	r9
  e0:	af 92       	push	r10
  e2:	bf 92       	push	r11
  e4:	cf 92       	push	r12
  e6:	df 92       	push	r13
  e8:	ef 92       	push	r14
  ea:	ff 92       	push	r15
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	62 97       	sbiw	r28, 0x12	; 18
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
 104:	89 82       	std	Y+1, r8	; 0x01
 106:	9a 82       	std	Y+2, r9	; 0x02
 108:	ab 82       	std	Y+3, r10	; 0x03
 10a:	bc 82       	std	Y+4, r11	; 0x04
 10c:	cd 82       	std	Y+5, r12	; 0x05
 10e:	de 82       	std	Y+6, r13	; 0x06
 110:	ef 82       	std	Y+7, r14	; 0x07
 112:	f8 86       	std	Y+8, r15	; 0x08
 114:	09 87       	std	Y+9, r16	; 0x09
 116:	1a 87       	std	Y+10, r17	; 0x0a
 118:	2b 87       	std	Y+11, r18	; 0x0b
 11a:	3c 87       	std	Y+12, r19	; 0x0c
 11c:	4d 87       	std	Y+13, r20	; 0x0d
 11e:	5e 87       	std	Y+14, r21	; 0x0e
 120:	6f 87       	std	Y+15, r22	; 0x0f
 122:	78 8b       	std	Y+16, r23	; 0x10
 124:	89 8b       	std	Y+17, r24	; 0x11
 126:	9a 8b       	std	Y+18, r25	; 0x12
 128:	c9 2c       	mov	r12, r9
 12a:	80 e3       	ldi	r24, 0x30	; 48
 12c:	0e 94 33 01 	call	0x266	; 0x266 <read_MCP2515>
 130:	83 fd       	sbrc	r24, 3
 132:	fb cf       	rjmp	.-10     	; 0x12a <send_CAN_message+0x4e>
 134:	68 2d       	mov	r22, r8
 136:	62 95       	swap	r22
 138:	66 0f       	add	r22, r22
 13a:	60 7e       	andi	r22, 0xE0	; 224
 13c:	82 e3       	ldi	r24, 0x32	; 50
 13e:	0e 94 45 01 	call	0x28a	; 0x28a <write_MCP2515>
 142:	68 2d       	mov	r22, r8
 144:	66 95       	lsr	r22
 146:	66 95       	lsr	r22
 148:	66 95       	lsr	r22
 14a:	81 e3       	ldi	r24, 0x31	; 49
 14c:	0e 94 45 01 	call	0x28a	; 0x28a <write_MCP2515>
 150:	6c 2d       	mov	r22, r12
 152:	85 e3       	ldi	r24, 0x35	; 53
 154:	0e 94 45 01 	call	0x28a	; 0x28a <write_MCP2515>
 158:	d1 2c       	mov	r13, r1
 15a:	1c 14       	cp	r1, r12
 15c:	1d 04       	cpc	r1, r13
 15e:	a4 f4       	brge	.+40     	; 0x188 <send_CAN_message+0xac>
 160:	7e 01       	movw	r14, r28
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	e8 0e       	add	r14, r24
 166:	f1 1c       	adc	r15, r1
 168:	00 e0       	ldi	r16, 0x00	; 0
 16a:	10 e0       	ldi	r17, 0x00	; 0
 16c:	f7 01       	movw	r30, r14
 16e:	60 81       	ld	r22, Z
 170:	f2 e0       	ldi	r31, 0x02	; 2
 172:	ef 0e       	add	r14, r31
 174:	f1 1c       	adc	r15, r1
 176:	86 e3       	ldi	r24, 0x36	; 54
 178:	80 0f       	add	r24, r16
 17a:	0e 94 45 01 	call	0x28a	; 0x28a <write_MCP2515>
 17e:	0f 5f       	subi	r16, 0xFF	; 255
 180:	1f 4f       	sbci	r17, 0xFF	; 255
 182:	0c 15       	cp	r16, r12
 184:	1d 05       	cpc	r17, r13
 186:	94 f3       	brlt	.-28     	; 0x16c <send_CAN_message+0x90>
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <request_to_send_MCP2515>
 18e:	62 96       	adiw	r28, 0x12	; 18
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	bf 90       	pop	r11
 1ac:	af 90       	pop	r10
 1ae:	9f 90       	pop	r9
 1b0:	8f 90       	pop	r8
 1b2:	08 95       	ret

000001b4 <joy_init>:


uint8_t get_joy_position(ADC_channel adc_ch){
	volatile char *ext_adc = (char *) 0x1400; // Start address for the ADC
	
	*ext_adc	= adc_ch;
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	8d e0       	ldi	r24, 0x0D	; 13
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <joy_init+0x8>
 1c0:	00 00       	nop
	_delay_us(40);//delay kan justeres ned til 20 mikro, sidan klokka går på 4915200
	////connect interruptsignal til pbx. if(PBx=1){}...
	uint8_t position = *ext_adc;
 1c2:	e0 e0       	ldi	r30, 0x00	; 0
 1c4:	f4 e1       	ldi	r31, 0x14	; 20
 1c6:	80 81       	ld	r24, Z
	int x_pos;
	int y_pos;
} null_position;

void joy_init(){
	null_position.x_pos = get_joy_position(JOY_X);
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	90 93 17 01 	sts	0x0117, r25
 1ce:	80 93 16 01 	sts	0x0116, r24


uint8_t get_joy_position(ADC_channel adc_ch){
	volatile char *ext_adc = (char *) 0x1400; // Start address for the ADC
	
	*ext_adc	= adc_ch;
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	80 83       	st	Z, r24
 1d6:	8d e0       	ldi	r24, 0x0D	; 13
 1d8:	8a 95       	dec	r24
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <joy_init+0x24>
 1dc:	00 00       	nop
	_delay_us(40);//delay kan justeres ned til 20 mikro, sidan klokka går på 4915200
	////connect interruptsignal til pbx. if(PBx=1){}...
	uint8_t position = *ext_adc;
 1de:	80 91 00 14 	lds	r24, 0x1400
	int y_pos;
} null_position;

void joy_init(){
	null_position.x_pos = get_joy_position(JOY_X);
	null_position.y_pos = get_joy_position(JOY_Y);
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	90 93 19 01 	sts	0x0119, r25
 1e8:	80 93 18 01 	sts	0x0118, r24
 1ec:	08 95       	ret

000001ee <joy_relative_pos>:


uint8_t get_joy_position(ADC_channel adc_ch){
	volatile char *ext_adc = (char *) 0x1400; // Start address for the ADC
	
	*ext_adc	= adc_ch;
 1ee:	84 e0       	ldi	r24, 0x04	; 4
 1f0:	80 93 00 14 	sts	0x1400, r24
 1f4:	8d e0       	ldi	r24, 0x0D	; 13
 1f6:	8a 95       	dec	r24
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <joy_relative_pos+0x8>
 1fa:	00 00       	nop
	_delay_us(40);//delay kan justeres ned til 20 mikro, sidan klokka går på 4915200
	////connect interruptsignal til pbx. if(PBx=1){}...
	uint8_t position = *ext_adc;
 1fc:	e0 e0       	ldi	r30, 0x00	; 0
 1fe:	f4 e1       	ldi	r31, 0x14	; 20
 200:	20 81       	ld	r18, Z
	null_position.x_pos = get_joy_position(JOY_X);
	null_position.y_pos = get_joy_position(JOY_Y);
}

void joy_relative_pos(){
	int y= get_joy_position(JOY_Y);
 202:	30 e0       	ldi	r19, 0x00	; 0
	//rel_position.y_pos=(int)(y-null_position.y_pos)*100/127;
	rel_position.y_pos=(int)(y-null_position.y_pos)*(JOY_MAX-1)/127;
 204:	80 91 18 01 	lds	r24, 0x0118
 208:	90 91 19 01 	lds	r25, 0x0119
 20c:	28 1b       	sub	r18, r24
 20e:	39 0b       	sbc	r19, r25
 210:	43 e6       	ldi	r20, 0x63	; 99
 212:	42 9f       	mul	r20, r18
 214:	c0 01       	movw	r24, r0
 216:	43 9f       	mul	r20, r19
 218:	90 0d       	add	r25, r0
 21a:	11 24       	eor	r1, r1
 21c:	6f e7       	ldi	r22, 0x7F	; 127
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__divmodhi4>
 224:	70 93 1d 01 	sts	0x011D, r23
 228:	60 93 1c 01 	sts	0x011C, r22


uint8_t get_joy_position(ADC_channel adc_ch){
	volatile char *ext_adc = (char *) 0x1400; // Start address for the ADC
	
	*ext_adc	= adc_ch;
 22c:	85 e0       	ldi	r24, 0x05	; 5
 22e:	80 83       	st	Z, r24
 230:	8d e0       	ldi	r24, 0x0D	; 13
 232:	8a 95       	dec	r24
 234:	f1 f7       	brne	.-4      	; 0x232 <joy_relative_pos+0x44>
 236:	00 00       	nop
	_delay_us(40);//delay kan justeres ned til 20 mikro, sidan klokka går på 4915200
	////connect interruptsignal til pbx. if(PBx=1){}...
	uint8_t position = *ext_adc;
 238:	20 91 00 14 	lds	r18, 0x1400

void joy_relative_pos(){
	int y= get_joy_position(JOY_Y);
	//rel_position.y_pos=(int)(y-null_position.y_pos)*100/127;
	rel_position.y_pos=(int)(y-null_position.y_pos)*(JOY_MAX-1)/127;
	int x= get_joy_position(JOY_X);
 23c:	30 e0       	ldi	r19, 0x00	; 0
	//rel_position.x_pos=(int)(x-null_position.x_pos)*100/127;
	rel_position.x_pos=(int)(x-null_position.x_pos)*(JOY_MAX-1)/127;
 23e:	80 91 16 01 	lds	r24, 0x0116
 242:	90 91 17 01 	lds	r25, 0x0117
 246:	28 1b       	sub	r18, r24
 248:	39 0b       	sbc	r19, r25
 24a:	42 9f       	mul	r20, r18
 24c:	c0 01       	movw	r24, r0
 24e:	43 9f       	mul	r20, r19
 250:	90 0d       	add	r25, r0
 252:	11 24       	eor	r1, r1
 254:	6f e7       	ldi	r22, 0x7F	; 127
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__divmodhi4>
 25c:	70 93 1b 01 	sts	0x011B, r23
 260:	60 93 1a 01 	sts	0x011A, r22
 264:	08 95       	ret

00000266 <read_MCP2515>:
	SPI_master_init();
	reset_MCP2515();	
}


char read_MCP2515(char read_address){
 266:	cf 93       	push	r28
 268:	c8 2f       	mov	r28, r24
	spi_chipselect_deactivate();
 26a:	0e 94 65 03 	call	0x6ca	; 0x6ca <spi_chipselect_deactivate>
	send_master_SPI(0x03);	//'read' instruction. 
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	0e 94 58 03 	call	0x6b0	; 0x6b0 <send_master_SPI>
	send_master_SPI(read_address);
 274:	8c 2f       	mov	r24, r28
 276:	0e 94 58 03 	call	0x6b0	; 0x6b0 <send_master_SPI>
	
	char val=read_master_SPI();
 27a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <read_master_SPI>
 27e:	c8 2f       	mov	r28, r24
	spi_chipselect_activate();
 280:	0e 94 63 03 	call	0x6c6	; 0x6c6 <spi_chipselect_activate>
	return val;
	//PORTB |=(1<<SSn);
}
 284:	8c 2f       	mov	r24, r28
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <write_MCP2515>:


void write_MCP2515(char write_address, char write_data){
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	d8 2f       	mov	r29, r24
 290:	c6 2f       	mov	r28, r22
	spi_chipselect_deactivate();
 292:	0e 94 65 03 	call	0x6ca	; 0x6ca <spi_chipselect_deactivate>
	send_master_SPI(0x02);	//'write byte' instruction.
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 58 03 	call	0x6b0	; 0x6b0 <send_master_SPI>
	send_master_SPI(write_address);
 29c:	8d 2f       	mov	r24, r29
 29e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <send_master_SPI>
	send_master_SPI(write_data);
 2a2:	8c 2f       	mov	r24, r28
 2a4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <send_master_SPI>
	spi_chipselect_activate();
 2a8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <spi_chipselect_activate>
	
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <request_to_send_MCP2515>:

void request_to_send_MCP2515(char RTS_in){
 2b2:	cf 93       	push	r28
 2b4:	c8 2f       	mov	r28, r24
	spi_chipselect_deactivate();
 2b6:	0e 94 65 03 	call	0x6ca	; 0x6ca <spi_chipselect_deactivate>
	RTS_in = RTS_in % 8;		//Ensures no more than 3 bits proceed.
 2ba:	8c 2f       	mov	r24, r28
 2bc:	87 70       	andi	r24, 0x07	; 7
	send_master_SPI(0x80 + RTS_in);
 2be:	80 58       	subi	r24, 0x80	; 128
 2c0:	0e 94 58 03 	call	0x6b0	; 0x6b0 <send_master_SPI>

	spi_chipselect_activate();
 2c4:	0e 94 63 03 	call	0x6c6	; 0x6c6 <spi_chipselect_activate>
}
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <bit_modify_MCP2515>:
		return repeat;
	}*/
	return out;
}

void bit_modify_MCP2515(char address, char mask_byte, char data){
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	18 2f       	mov	r17, r24
 2d4:	d6 2f       	mov	r29, r22
 2d6:	c4 2f       	mov	r28, r20
	spi_chipselect_deactivate();
 2d8:	0e 94 65 03 	call	0x6ca	; 0x6ca <spi_chipselect_deactivate>
	send_master_SPI(0x05);	//'bit modify' instruction.
 2dc:	85 e0       	ldi	r24, 0x05	; 5
 2de:	0e 94 58 03 	call	0x6b0	; 0x6b0 <send_master_SPI>
	send_master_SPI(address);
 2e2:	81 2f       	mov	r24, r17
 2e4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <send_master_SPI>
	send_master_SPI(mask_byte);
 2e8:	8d 2f       	mov	r24, r29
 2ea:	0e 94 58 03 	call	0x6b0	; 0x6b0 <send_master_SPI>
	send_master_SPI(data);
 2ee:	8c 2f       	mov	r24, r28
 2f0:	0e 94 58 03 	call	0x6b0	; 0x6b0 <send_master_SPI>
	spi_chipselect_activate();
 2f4:	0e 94 63 03 	call	0x6c6	; 0x6c6 <spi_chipselect_activate>
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	08 95       	ret

00000300 <reset_MCP2515>:

void reset_MCP2515(){
	spi_chipselect_deactivate();
 300:	0e 94 65 03 	call	0x6ca	; 0x6ca <spi_chipselect_deactivate>
	send_master_SPI(0xC0);	//'reset' instruction.
 304:	80 ec       	ldi	r24, 0xC0	; 192
 306:	0e 94 58 03 	call	0x6b0	; 0x6b0 <send_master_SPI>
	spi_chipselect_activate();
 30a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <spi_chipselect_activate>
 30e:	08 95       	ret

00000310 <MCP2515_init>:
#include "CAN MCP2515 header files\MCP2515.h"



void MCP2515_init(){
	SPI_master_init();
 310:	0e 94 4f 03 	call	0x69e	; 0x69e <SPI_master_init>
	reset_MCP2515();	
 314:	0e 94 80 01 	call	0x300	; 0x300 <reset_MCP2515>
 318:	08 95       	ret

0000031a <memory_init>:
#include <stdlib.h>
#include <avr/io.h>


void memory_init(void){
	MCUCR|=(1<<SRE);
 31a:	85 b7       	in	r24, 0x35	; 53
 31c:	80 68       	ori	r24, 0x80	; 128
 31e:	85 bf       	out	0x35, r24	; 53
	SFIOR|=(1<<XMM2);
 320:	80 b7       	in	r24, 0x30	; 48
 322:	80 62       	ori	r24, 0x20	; 32
 324:	80 bf       	out	0x30, r24	; 48
 326:	08 95       	ret

00000328 <menu_print>:
 328:	0e 94 57 02 	call	0x4ae	; 0x4ae <OLED_reset>
 32c:	e0 91 88 01 	lds	r30, 0x0188
 330:	f0 91 89 01 	lds	r31, 0x0189
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	80 89       	ldd	r24, Z+16	; 0x10
 338:	91 89       	ldd	r25, Z+17	; 0x11
 33a:	0e 94 66 02 	call	0x4cc	; 0x4cc <print_to_OLED>
 33e:	e0 91 88 01 	lds	r30, 0x0188
 342:	f0 91 89 01 	lds	r31, 0x0189
 346:	62 e0       	ldi	r22, 0x02	; 2
 348:	82 89       	ldd	r24, Z+18	; 0x12
 34a:	93 89       	ldd	r25, Z+19	; 0x13
 34c:	0e 94 66 02 	call	0x4cc	; 0x4cc <print_to_OLED>
 350:	80 91 23 01 	lds	r24, 0x0123
 354:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <OLED_print_arrow>
 358:	08 95       	ret

0000035a <__vector_1>:
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
 364:	2f 93       	push	r18
 366:	3f 93       	push	r19
 368:	4f 93       	push	r20
 36a:	5f 93       	push	r21
 36c:	6f 93       	push	r22
 36e:	7f 93       	push	r23
 370:	8f 93       	push	r24
 372:	9f 93       	push	r25
 374:	af 93       	push	r26
 376:	bf 93       	push	r27
 378:	ef 93       	push	r30
 37a:	ff 93       	push	r31
 37c:	e0 91 23 01 	lds	r30, 0x0123
 380:	e1 11       	cpse	r30, r1
 382:	0b c0       	rjmp	.+22     	; 0x39a <__vector_1+0x40>
 384:	e0 91 88 01 	lds	r30, 0x0188
 388:	f0 91 89 01 	lds	r31, 0x0189
 38c:	80 81       	ld	r24, Z
 38e:	91 81       	ldd	r25, Z+1	; 0x01
 390:	90 93 89 01 	sts	0x0189, r25
 394:	80 93 88 01 	sts	0x0188, r24
 398:	11 c0       	rjmp	.+34     	; 0x3bc <__vector_1+0x62>
 39a:	80 91 88 01 	lds	r24, 0x0188
 39e:	90 91 89 01 	lds	r25, 0x0189
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	ee 0f       	add	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	e8 0f       	add	r30, r24
 3aa:	f9 1f       	adc	r31, r25
 3ac:	80 81       	ld	r24, Z
 3ae:	91 81       	ldd	r25, Z+1	; 0x01
 3b0:	00 97       	sbiw	r24, 0x00	; 0
 3b2:	21 f0       	breq	.+8      	; 0x3bc <__vector_1+0x62>
 3b4:	90 93 89 01 	sts	0x0189, r25
 3b8:	80 93 88 01 	sts	0x0188, r24
 3bc:	10 92 23 01 	sts	0x0123, r1
 3c0:	0e 94 94 01 	call	0x328	; 0x328 <menu_print>
 3c4:	ff 91       	pop	r31
 3c6:	ef 91       	pop	r30
 3c8:	bf 91       	pop	r27
 3ca:	af 91       	pop	r26
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	7f 91       	pop	r23
 3d2:	6f 91       	pop	r22
 3d4:	5f 91       	pop	r21
 3d6:	4f 91       	pop	r20
 3d8:	3f 91       	pop	r19
 3da:	2f 91       	pop	r18
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <__vector_2>:
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	2f 93       	push	r18
 3f2:	3f 93       	push	r19
 3f4:	4f 93       	push	r20
 3f6:	5f 93       	push	r21
 3f8:	6f 93       	push	r22
 3fa:	7f 93       	push	r23
 3fc:	8f 93       	push	r24
 3fe:	9f 93       	push	r25
 400:	af 93       	push	r26
 402:	bf 93       	push	r27
 404:	ef 93       	push	r30
 406:	ff 93       	push	r31
 408:	e0 91 88 01 	lds	r30, 0x0188
 40c:	f0 91 89 01 	lds	r31, 0x0189
 410:	80 81       	ld	r24, Z
 412:	91 81       	ldd	r25, Z+1	; 0x01
 414:	90 93 89 01 	sts	0x0189, r25
 418:	80 93 88 01 	sts	0x0188, r24
 41c:	0e 94 94 01 	call	0x328	; 0x328 <menu_print>
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	bf 91       	pop	r27
 426:	af 91       	pop	r26
 428:	9f 91       	pop	r25
 42a:	8f 91       	pop	r24
 42c:	7f 91       	pop	r23
 42e:	6f 91       	pop	r22
 430:	5f 91       	pop	r21
 432:	4f 91       	pop	r20
 434:	3f 91       	pop	r19
 436:	2f 91       	pop	r18
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <goto_OLED_page>:
	goto_OLED_char_column(0);
	return;
}

void goto_OLED_page(uint8_t page){
	current_page = page % DISPLAY_PAGES;
 442:	87 70       	andi	r24, 0x07	; 7
 444:	80 93 8a 01 	sts	0x018A, r24
	write_OLED_cmd(0xB0 + current_page);
 448:	80 55       	subi	r24, 0x50	; 80
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 44a:	80 93 00 10 	sts	0x1000, r24
 44e:	08 95       	ret

00000450 <goto_OLED_char_column>:
	write_OLED_cmd(0xB0 + current_page);
	return;
}

void goto_OLED_char_column(uint8_t column){
	uint8_t c = column * font_type.width;
 450:	90 91 1e 01 	lds	r25, 0x011E
 454:	89 9f       	mul	r24, r25
 456:	90 2d       	mov	r25, r0
 458:	11 24       	eor	r1, r1
	uint8_t low_bits = c & 0x0f;
 45a:	29 2f       	mov	r18, r25
 45c:	2f 70       	andi	r18, 0x0F	; 15
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 45e:	e0 e0       	ldi	r30, 0x00	; 0
 460:	f0 e1       	ldi	r31, 0x10	; 16
 462:	20 83       	st	Z, r18
void goto_OLED_char_column(uint8_t column){
	uint8_t c = column * font_type.width;
	uint8_t low_bits = c & 0x0f;
	uint8_t high_bits = c & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
 464:	92 95       	swap	r25
 466:	9f 70       	andi	r25, 0x0F	; 15
 468:	90 5f       	subi	r25, 0xF0	; 240
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 46a:	90 83       	st	Z, r25
	uint8_t low_bits = c & 0x0f;
	uint8_t high_bits = c & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
	
	current_column = column;
 46c:	80 93 8b 01 	sts	0x018B, r24
 470:	08 95       	ret

00000472 <OLED_home>:
	OLED_home();
	return;
}

void OLED_home(){
	goto_OLED_page(0);
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 21 02 	call	0x442	; 0x442 <goto_OLED_page>
	goto_OLED_char_column(0);
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 28 02 	call	0x450	; 0x450 <goto_OLED_char_column>
 47e:	08 95       	ret

00000480 <goto_OLED_physical_column>:
	current_column = temp_col;
	return;
}

void goto_OLED_physical_column(uint8_t column){
	uint8_t low_bits = column & 0x0f;
 480:	98 2f       	mov	r25, r24
 482:	9f 70       	andi	r25, 0x0F	; 15
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 484:	e0 e0       	ldi	r30, 0x00	; 0
 486:	f0 e1       	ldi	r31, 0x10	; 16
 488:	90 83       	st	Z, r25

void goto_OLED_physical_column(uint8_t column){
	uint8_t low_bits = column & 0x0f;
	uint8_t high_bits = column & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
 48a:	98 2f       	mov	r25, r24
 48c:	92 95       	swap	r25
 48e:	9f 70       	andi	r25, 0x0F	; 15
 490:	90 5f       	subi	r25, 0xF0	; 240
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 492:	90 83       	st	Z, r25
	uint8_t low_bits = column & 0x0f;
	uint8_t high_bits = column & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
	
	current_column = column;
 494:	80 93 8b 01 	sts	0x018B, r24
 498:	08 95       	ret

0000049a <clear_OLED_page>:
	return;
}

void clear_OLED_page(uint8_t page){
	goto_OLED_page(page);
 49a:	0e 94 21 02 	call	0x442	; 0x442 <goto_OLED_page>
	for (uint8_t i = 0; i < DISPLAY_COLUMNS; i++){
 49e:	80 e0       	ldi	r24, 0x00	; 0
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 4a0:	e0 e0       	ldi	r30, 0x00	; 0
 4a2:	f2 e1       	ldi	r31, 0x12	; 18
 4a4:	10 82       	st	Z, r1
	return;
}

void clear_OLED_page(uint8_t page){
	goto_OLED_page(page);
	for (uint8_t i = 0; i < DISPLAY_COLUMNS; i++){
 4a6:	8f 5f       	subi	r24, 0xFF	; 255
 4a8:	80 38       	cpi	r24, 0x80	; 128
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <clear_OLED_page+0xa>
		write_OLED_data(0);
	}
	return;
}
 4ac:	08 95       	ret

000004ae <OLED_reset>:
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
}


void OLED_reset(){
 4ae:	cf 93       	push	r28
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
 4b0:	80 e4       	ldi	r24, 0x40	; 64
 4b2:	80 93 00 10 	sts	0x1000, r24
}


void OLED_reset(){
	write_OLED_cmd(0x40);		//Set display line start at page 0. 
	for (uint8_t i = 0; i < DISPLAY_PAGES; i++){
 4b6:	c0 e0       	ldi	r28, 0x00	; 0
		clear_OLED_page(i);
 4b8:	8c 2f       	mov	r24, r28
 4ba:	0e 94 4d 02 	call	0x49a	; 0x49a <clear_OLED_page>
}


void OLED_reset(){
	write_OLED_cmd(0x40);		//Set display line start at page 0. 
	for (uint8_t i = 0; i < DISPLAY_PAGES; i++){
 4be:	cf 5f       	subi	r28, 0xFF	; 255
 4c0:	c8 30       	cpi	r28, 0x08	; 8
 4c2:	d1 f7       	brne	.-12     	; 0x4b8 <OLED_reset+0xa>
		clear_OLED_page(i);
	}
	OLED_home();
 4c4:	0e 94 39 02 	call	0x472	; 0x472 <OLED_home>
	return;
}
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <print_to_OLED>:

void OLED_pos(uint8_t page, uint8_t column){
	return;
}

void print_to_OLED(const char * string, uint8_t start_column){
 4cc:	3f 92       	push	r3
 4ce:	4f 92       	push	r4
 4d0:	5f 92       	push	r5
 4d2:	6f 92       	push	r6
 4d4:	7f 92       	push	r7
 4d6:	8f 92       	push	r8
 4d8:	9f 92       	push	r9
 4da:	af 92       	push	r10
 4dc:	bf 92       	push	r11
 4de:	cf 92       	push	r12
 4e0:	df 92       	push	r13
 4e2:	ef 92       	push	r14
 4e4:	ff 92       	push	r15
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	ec 01       	movw	r28, r24
 4f0:	36 2e       	mov	r3, r22
	goto_OLED_char_column(start_column);
 4f2:	86 2f       	mov	r24, r22
 4f4:	0e 94 28 02 	call	0x450	; 0x450 <goto_OLED_char_column>
	int length = strlen(string);
 4f8:	fe 01       	movw	r30, r28
 4fa:	01 90       	ld	r0, Z+
 4fc:	00 20       	and	r0, r0
 4fe:	e9 f7       	brne	.-6      	; 0x4fa <print_to_OLED+0x2e>
 500:	31 97       	sbiw	r30, 0x01	; 1
 502:	3f 01       	movw	r6, r30
 504:	6c 1a       	sub	r6, r28
 506:	7d 0a       	sbc	r7, r29
	
	for (int i = 0; i < length; i++){
 508:	16 14       	cp	r1, r6
 50a:	17 04       	cpc	r1, r7
 50c:	0c f0       	brlt	.+2      	; 0x510 <__stack+0x11>
 50e:	57 c0       	rjmp	.+174    	; 0x5be <__stack+0xbf>
 510:	4e 01       	movw	r8, r28
 512:	a1 2c       	mov	r10, r1
 514:	b1 2c       	mov	r11, r1
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 516:	ce e1       	ldi	r28, 0x1E	; 30
 518:	d1 e0       	ldi	r29, 0x01	; 1
 51a:	51 2c       	mov	r5, r1
 51c:	41 2c       	mov	r4, r1
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
 51e:	0f 2e       	mov	r0, r31
 520:	f1 e2       	ldi	r31, 0x21	; 33
 522:	cf 2e       	mov	r12, r31
 524:	f1 e0       	ldi	r31, 0x01	; 1
 526:	df 2e       	mov	r13, r31
 528:	f0 2d       	mov	r31, r0
 52a:	0f 2e       	mov	r0, r31
 52c:	f0 e2       	ldi	r31, 0x20	; 32
 52e:	ef 2e       	mov	r14, r31
 530:	f1 e0       	ldi	r31, 0x01	; 1
 532:	ff 2e       	mov	r15, r31
 534:	f0 2d       	mov	r31, r0
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 536:	00 e0       	ldi	r16, 0x00	; 0
 538:	12 e1       	ldi	r17, 0x12	; 18
void print_to_OLED(const char * string, uint8_t start_column){
	goto_OLED_char_column(start_column);
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
		char c = string[i];
 53a:	d4 01       	movw	r26, r8
 53c:	4d 91       	ld	r20, X+
 53e:	4d 01       	movw	r8, r26
		if (c == '\n') {
 540:	4a 30       	cpi	r20, 0x0A	; 10
 542:	31 f0       	breq	.+12     	; 0x550 <__stack+0x51>
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 544:	28 81       	ld	r18, Y
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	12 16       	cp	r1, r18
 54a:	13 06       	cpc	r1, r19
 54c:	6c f0       	brlt	.+26     	; 0x568 <__stack+0x69>
 54e:	30 c0       	rjmp	.+96     	; 0x5b0 <__stack+0xb1>
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
		char c = string[i];
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
 550:	80 91 8a 01 	lds	r24, 0x018A
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	87 70       	andi	r24, 0x07	; 7
 55a:	90 78       	andi	r25, 0x80	; 128
 55c:	0e 94 21 02 	call	0x442	; 0x442 <goto_OLED_page>
			goto_OLED_char_column(start_column);
 560:	83 2d       	mov	r24, r3
 562:	0e 94 28 02 	call	0x450	; 0x450 <goto_OLED_char_column>
 566:	24 c0       	rjmp	.+72     	; 0x5b0 <__stack+0xb1>
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 568:	85 2d       	mov	r24, r5
 56a:	94 2d       	mov	r25, r4
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
 56c:	50 e0       	ldi	r21, 0x00	; 0
 56e:	f7 01       	movw	r30, r14
 570:	60 81       	ld	r22, Z
 572:	da 01       	movw	r26, r20
 574:	a6 1b       	sub	r26, r22
 576:	b1 09       	sbc	r27, r1
 578:	2a 9f       	mul	r18, r26
 57a:	f0 01       	movw	r30, r0
 57c:	2b 9f       	mul	r18, r27
 57e:	f0 0d       	add	r31, r0
 580:	3a 9f       	mul	r19, r26
 582:	f0 0d       	add	r31, r0
 584:	11 24       	eor	r1, r1
 586:	e8 0f       	add	r30, r24
 588:	f9 1f       	adc	r31, r25
 58a:	d6 01       	movw	r26, r12
 58c:	2d 91       	ld	r18, X+
 58e:	3c 91       	ld	r19, X
 590:	e2 0f       	add	r30, r18
 592:	f3 1f       	adc	r31, r19
 594:	e4 91       	lpm	r30, Z
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 596:	d8 01       	movw	r26, r16
 598:	ec 93       	st	X, r30
		else{
			for (int j = 0; j < font_type.width; j++){
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
				//write_OLED_data(pgm_read_byte(&font[c-font_type.ascii_offset][j]));
				//write_OLED_data(pgm_read_byte(&font_type.data[c-font_type.ascii_offset][j]));
				current_column = current_column + font_type.width;
 59a:	30 91 8b 01 	lds	r19, 0x018B
 59e:	28 81       	ld	r18, Y
 5a0:	32 0f       	add	r19, r18
 5a2:	30 93 8b 01 	sts	0x018B, r19
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
 5a6:	01 96       	adiw	r24, 0x01	; 1
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	82 17       	cp	r24, r18
 5ac:	93 07       	cpc	r25, r19
 5ae:	fc f2       	brlt	.-66     	; 0x56e <__stack+0x6f>

void print_to_OLED(const char * string, uint8_t start_column){
	goto_OLED_char_column(start_column);
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
 5b0:	bf ef       	ldi	r27, 0xFF	; 255
 5b2:	ab 1a       	sub	r10, r27
 5b4:	bb 0a       	sbc	r11, r27
 5b6:	6a 14       	cp	r6, r10
 5b8:	7b 04       	cpc	r7, r11
 5ba:	09 f0       	breq	.+2      	; 0x5be <__stack+0xbf>
 5bc:	be cf       	rjmp	.-132    	; 0x53a <__stack+0x3b>
				current_column = current_column + font_type.width;
			}
		}
	}
	return;
}
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	ff 90       	pop	r15
 5c8:	ef 90       	pop	r14
 5ca:	df 90       	pop	r13
 5cc:	cf 90       	pop	r12
 5ce:	bf 90       	pop	r11
 5d0:	af 90       	pop	r10
 5d2:	9f 90       	pop	r9
 5d4:	8f 90       	pop	r8
 5d6:	7f 90       	pop	r7
 5d8:	6f 90       	pop	r6
 5da:	5f 90       	pop	r5
 5dc:	4f 90       	pop	r4
 5de:	3f 90       	pop	r3
 5e0:	08 95       	ret

000005e2 <OLED_print_arrow>:

void OLED_print_arrow(uint8_t page)
{	int temp = current_page;
 5e2:	cf 93       	push	r28
 5e4:	c0 91 8a 01 	lds	r28, 0x018A
	goto_OLED_page(page);
 5e8:	0e 94 21 02 	call	0x442	; 0x442 <goto_OLED_page>
	goto_OLED_physical_column(1);
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	0e 94 40 02 	call	0x480	; 0x480 <goto_OLED_physical_column>
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
 5f2:	e0 e0       	ldi	r30, 0x00	; 0
 5f4:	f2 e1       	ldi	r31, 0x12	; 18
 5f6:	98 e1       	ldi	r25, 0x18	; 24
 5f8:	90 83       	st	Z, r25
 5fa:	90 83       	st	Z, r25
 5fc:	8e e7       	ldi	r24, 0x7E	; 126
 5fe:	80 83       	st	Z, r24
 600:	8c e3       	ldi	r24, 0x3C	; 60
 602:	80 83       	st	Z, r24
 604:	90 83       	st	Z, r25
	write_OLED_data(0b00011000);
	write_OLED_data(0b00011000);
	write_OLED_data(0b01111110);
	write_OLED_data(0b00111100);
	write_OLED_data(0b00011000);
	current_column = ARROW_WIDTH;
 606:	88 e0       	ldi	r24, 0x08	; 8
 608:	80 93 8b 01 	sts	0x018B, r24
	
	goto_OLED_page(temp);
 60c:	8c 2f       	mov	r24, r28
 60e:	0e 94 21 02 	call	0x442	; 0x442 <goto_OLED_page>
}
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <main>:
#define FOSC 4915200
#define MYUBRR FOSC/16/BAUD-1


int main(void)
{	
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
 61e:	62 97       	sbiw	r28, 0x12	; 18
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	f8 94       	cli
 624:	de bf       	out	0x3e, r29	; 62
 626:	0f be       	out	0x3f, r0	; 63
 628:	cd bf       	out	0x3d, r28	; 61
	 //}
	
	
	//ov2////////////////////////////////
	
	DDRE=0x3;
 62a:	83 e0       	ldi	r24, 0x03	; 3
 62c:	86 b9       	out	0x06, r24	; 6
	DDRA=0xFF;
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 632:	1b ba       	out	0x1b, r1	; 27
	PORTE=0x2;
 634:	82 e0       	ldi	r24, 0x02	; 2
 636:	87 b9       	out	0x07, r24	; 7
	char temp = read_MCP2515(MCP_CANCTRL);
	printf("Temp: %i\n", temp);
	}*/
	
	
	memory_init();
 638:	0e 94 8d 01 	call	0x31a	; 0x31a <memory_init>
	UART_Init(MYUBRR);
 63c:	8f e1       	ldi	r24, 0x1F	; 31
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 6f 03 	call	0x6de	; 0x6de <UART_Init>
	printf("Atmega162 start\n");
 644:	86 e0       	ldi	r24, 0x06	; 6
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	0e 94 ef 03 	call	0x7de	; 0x7de <puts>
	
	//CAN_test();
	
	joy_init();
 64c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <joy_init>
	CAN_init();
 650:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	
	CAN_struct joyfull;
	joyfull.ID = 1;
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	89 83       	std	Y+1, r24	; 0x01
	joyfull.length = 1;
 658:	8a 83       	std	Y+2, r24	; 0x02
	
	
	while(1){
		joy_relative_pos();
		int trudeluu = rel_position.x_pos;
 65a:	0f 2e       	mov	r0, r31
 65c:	fa e1       	ldi	r31, 0x1A	; 26
 65e:	6f 2e       	mov	r6, r31
 660:	f1 e0       	ldi	r31, 0x01	; 1
 662:	7f 2e       	mov	r7, r31
 664:	f0 2d       	mov	r31, r0
	joyfull.ID = 1;
	joyfull.length = 1;
	
	
	while(1){
		joy_relative_pos();
 666:	0e 94 f7 00 	call	0x1ee	; 0x1ee <joy_relative_pos>
		int trudeluu = rel_position.x_pos;
		joyfull.data[0] = trudeluu;
 66a:	f3 01       	movw	r30, r6
 66c:	80 81       	ld	r24, Z
 66e:	91 81       	ldd	r25, Z+1	; 0x01
 670:	a8 2e       	mov	r10, r24
 672:	8b 83       	std	Y+3, r24	; 0x03
 674:	9c 83       	std	Y+4, r25	; 0x04
		
		send_CAN_message(joyfull);
 676:	89 80       	ldd	r8, Y+1	; 0x01
 678:	9a 80       	ldd	r9, Y+2	; 0x02
 67a:	b9 2e       	mov	r11, r25
 67c:	cd 80       	ldd	r12, Y+5	; 0x05
 67e:	de 80       	ldd	r13, Y+6	; 0x06
 680:	ef 80       	ldd	r14, Y+7	; 0x07
 682:	f8 84       	ldd	r15, Y+8	; 0x08
 684:	09 85       	ldd	r16, Y+9	; 0x09
 686:	1a 85       	ldd	r17, Y+10	; 0x0a
 688:	2b 85       	ldd	r18, Y+11	; 0x0b
 68a:	3c 85       	ldd	r19, Y+12	; 0x0c
 68c:	4d 85       	ldd	r20, Y+13	; 0x0d
 68e:	5e 85       	ldd	r21, Y+14	; 0x0e
 690:	6f 85       	ldd	r22, Y+15	; 0x0f
 692:	78 89       	ldd	r23, Y+16	; 0x10
 694:	89 89       	ldd	r24, Y+17	; 0x11
 696:	9a 89       	ldd	r25, Y+18	; 0x12
 698:	0e 94 6e 00 	call	0xdc	; 0xdc <send_CAN_message>
 69c:	e4 cf       	rjmp	.-56     	; 0x666 <main+0x50>

0000069e <SPI_master_init>:
	#define SCK		1
#endif


void SPI_master_init(){
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SSn);		//Set MOSI, SCK, SSn output.
 69e:	87 b3       	in	r24, 0x17	; 23
 6a0:	80 6b       	ori	r24, 0xB0	; 176
 6a2:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~((1<<MISO));		//Set MISO input.
 6a4:	be 98       	cbi	0x17, 6	; 23
	PORTB|=(1<<MISO);
 6a6:	c6 9a       	sbi	0x18, 6	; 24
	SPCR |= (1<<SPE) | (1<<MSTR)|(1<<SPR0);	//Enable SPI, Master, set clock rate fck/16.
 6a8:	8d b1       	in	r24, 0x0d	; 13
 6aa:	81 65       	ori	r24, 0x51	; 81
 6ac:	8d b9       	out	0x0d, r24	; 13
 6ae:	08 95       	ret

000006b0 <send_master_SPI>:
	SPCR = (1<<SPE);	//Enable SPI.
}

void send_master_SPI(char data){
	
	SPDR = data;			//Send data.
 6b0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF))) {}		//Wait for transmission complete.
 6b2:	77 9b       	sbis	0x0e, 7	; 14
 6b4:	fe cf       	rjmp	.-4      	; 0x6b2 <send_master_SPI+0x2>
	
}
 6b6:	08 95       	ret

000006b8 <read_master_SPI>:

char read_master_SPI(){
	
	
	send_master_SPI(0xFF);		//Send dummy byte.		
 6b8:	8f ef       	ldi	r24, 0xFF	; 255
 6ba:	0e 94 58 03 	call	0x6b0	; 0x6b0 <send_master_SPI>
	while (!(SPSR & (1<<SPIF))) {}		//Wait for transmission complete.
 6be:	77 9b       	sbis	0x0e, 7	; 14
 6c0:	fe cf       	rjmp	.-4      	; 0x6be <read_master_SPI+0x6>
	return SPDR;
 6c2:	8f b1       	in	r24, 0x0f	; 15
}
 6c4:	08 95       	ret

000006c6 <spi_chipselect_activate>:

void spi_chipselect_activate(){
	PORTB |=(1<<SSn);
 6c6:	c4 9a       	sbi	0x18, 4	; 24
 6c8:	08 95       	ret

000006ca <spi_chipselect_deactivate>:
}

void spi_chipselect_deactivate(){
	PORTB &=~(1<<SSn);
 6ca:	c4 98       	cbi	0x18, 4	; 24
 6cc:	08 95       	ret

000006ce <UART_Transmit>:
	}
	
void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer*/
		while( !( UCSR0A & (1<<UDRE0)) )
 6ce:	5d 9b       	sbis	0x0b, 5	; 11
 6d0:	fe cf       	rjmp	.-4      	; 0x6ce <UART_Transmit>
		;
	/* Put data into buffer, sends the data*/
		UDR0 = data;
 6d2:	8c b9       	out	0x0c, r24	; 12
 6d4:	08 95       	ret

000006d6 <UART_Receive>:
}

unsigned char UART_Receive(void)
	{
		/* Wait for data to be received*/
		while( !(UCSR0A & (1<<RXC0)) )
 6d6:	5f 9b       	sbis	0x0b, 7	; 11
 6d8:	fe cf       	rjmp	.-4      	; 0x6d6 <UART_Receive>
			;
		/* Get and return received data from buffer*/
		return UDR0;
 6da:	8c b1       	in	r24, 0x0c	; 12
 6dc:	08 95       	ret

000006de <UART_Init>:
#define MYUBRR FOSC/16/BAUD-1

void UART_Init(unsigned int ubrr)
	{
		/* Set baud rate */
		UBRR0H = (unsigned char)(ubrr>>8);
 6de:	90 bd       	out	0x20, r25	; 32
		UBRR0L = (unsigned char)ubrr;
 6e0:	89 b9       	out	0x09, r24	; 9
		/* Enable receiver and transmitter */
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 6e2:	88 e1       	ldi	r24, 0x18	; 24
 6e4:	8a b9       	out	0x0a, r24	; 10
		/* 
		Set frame format: 8data, 2stop bit
		*/
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 6e6:	8e e8       	ldi	r24, 0x8E	; 142
 6e8:	80 bd       	out	0x20, r24	; 32
		fdevopen(&UART_Transmit, &UART_Receive);
 6ea:	6b e6       	ldi	r22, 0x6B	; 107
 6ec:	73 e0       	ldi	r23, 0x03	; 3
 6ee:	87 e6       	ldi	r24, 0x67	; 103
 6f0:	93 e0       	ldi	r25, 0x03	; 3
 6f2:	0e 94 a4 03 	call	0x748	; 0x748 <fdevopen>
 6f6:	08 95       	ret

000006f8 <__divmodhi4>:
 6f8:	97 fb       	bst	r25, 7
 6fa:	07 2e       	mov	r0, r23
 6fc:	16 f4       	brtc	.+4      	; 0x702 <__divmodhi4+0xa>
 6fe:	00 94       	com	r0
 700:	07 d0       	rcall	.+14     	; 0x710 <__divmodhi4_neg1>
 702:	77 fd       	sbrc	r23, 7
 704:	09 d0       	rcall	.+18     	; 0x718 <__divmodhi4_neg2>
 706:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 70a:	07 fc       	sbrc	r0, 7
 70c:	05 d0       	rcall	.+10     	; 0x718 <__divmodhi4_neg2>
 70e:	3e f4       	brtc	.+14     	; 0x71e <__divmodhi4_exit>

00000710 <__divmodhi4_neg1>:
 710:	90 95       	com	r25
 712:	81 95       	neg	r24
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	08 95       	ret

00000718 <__divmodhi4_neg2>:
 718:	70 95       	com	r23
 71a:	61 95       	neg	r22
 71c:	7f 4f       	sbci	r23, 0xFF	; 255

0000071e <__divmodhi4_exit>:
 71e:	08 95       	ret

00000720 <__udivmodhi4>:
 720:	aa 1b       	sub	r26, r26
 722:	bb 1b       	sub	r27, r27
 724:	51 e1       	ldi	r21, 0x11	; 17
 726:	07 c0       	rjmp	.+14     	; 0x736 <__udivmodhi4_ep>

00000728 <__udivmodhi4_loop>:
 728:	aa 1f       	adc	r26, r26
 72a:	bb 1f       	adc	r27, r27
 72c:	a6 17       	cp	r26, r22
 72e:	b7 07       	cpc	r27, r23
 730:	10 f0       	brcs	.+4      	; 0x736 <__udivmodhi4_ep>
 732:	a6 1b       	sub	r26, r22
 734:	b7 0b       	sbc	r27, r23

00000736 <__udivmodhi4_ep>:
 736:	88 1f       	adc	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	5a 95       	dec	r21
 73c:	a9 f7       	brne	.-22     	; 0x728 <__udivmodhi4_loop>
 73e:	80 95       	com	r24
 740:	90 95       	com	r25
 742:	bc 01       	movw	r22, r24
 744:	cd 01       	movw	r24, r26
 746:	08 95       	ret

00000748 <fdevopen>:
 748:	0f 93       	push	r16
 74a:	1f 93       	push	r17
 74c:	cf 93       	push	r28
 74e:	df 93       	push	r29
 750:	ec 01       	movw	r28, r24
 752:	8b 01       	movw	r16, r22
 754:	00 97       	sbiw	r24, 0x00	; 0
 756:	31 f4       	brne	.+12     	; 0x764 <fdevopen+0x1c>
 758:	61 15       	cp	r22, r1
 75a:	71 05       	cpc	r23, r1
 75c:	19 f4       	brne	.+6      	; 0x764 <fdevopen+0x1c>
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	38 c0       	rjmp	.+112    	; 0x7d4 <fdevopen+0x8c>
 764:	6e e0       	ldi	r22, 0x0E	; 14
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 1c 04 	call	0x838	; 0x838 <calloc>
 770:	fc 01       	movw	r30, r24
 772:	00 97       	sbiw	r24, 0x00	; 0
 774:	a1 f3       	breq	.-24     	; 0x75e <fdevopen+0x16>
 776:	80 e8       	ldi	r24, 0x80	; 128
 778:	83 83       	std	Z+3, r24	; 0x03
 77a:	01 15       	cp	r16, r1
 77c:	11 05       	cpc	r17, r1
 77e:	71 f0       	breq	.+28     	; 0x79c <fdevopen+0x54>
 780:	13 87       	std	Z+11, r17	; 0x0b
 782:	02 87       	std	Z+10, r16	; 0x0a
 784:	81 e8       	ldi	r24, 0x81	; 129
 786:	83 83       	std	Z+3, r24	; 0x03
 788:	80 91 8c 01 	lds	r24, 0x018C
 78c:	90 91 8d 01 	lds	r25, 0x018D
 790:	89 2b       	or	r24, r25
 792:	21 f4       	brne	.+8      	; 0x79c <fdevopen+0x54>
 794:	f0 93 8d 01 	sts	0x018D, r31
 798:	e0 93 8c 01 	sts	0x018C, r30
 79c:	20 97       	sbiw	r28, 0x00	; 0
 79e:	c9 f0       	breq	.+50     	; 0x7d2 <fdevopen+0x8a>
 7a0:	d1 87       	std	Z+9, r29	; 0x09
 7a2:	c0 87       	std	Z+8, r28	; 0x08
 7a4:	83 81       	ldd	r24, Z+3	; 0x03
 7a6:	82 60       	ori	r24, 0x02	; 2
 7a8:	83 83       	std	Z+3, r24	; 0x03
 7aa:	80 91 8e 01 	lds	r24, 0x018E
 7ae:	90 91 8f 01 	lds	r25, 0x018F
 7b2:	89 2b       	or	r24, r25
 7b4:	71 f4       	brne	.+28     	; 0x7d2 <fdevopen+0x8a>
 7b6:	f0 93 8f 01 	sts	0x018F, r31
 7ba:	e0 93 8e 01 	sts	0x018E, r30
 7be:	80 91 90 01 	lds	r24, 0x0190
 7c2:	90 91 91 01 	lds	r25, 0x0191
 7c6:	89 2b       	or	r24, r25
 7c8:	21 f4       	brne	.+8      	; 0x7d2 <fdevopen+0x8a>
 7ca:	f0 93 91 01 	sts	0x0191, r31
 7ce:	e0 93 90 01 	sts	0x0190, r30
 7d2:	cf 01       	movw	r24, r30
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	08 95       	ret

000007de <puts>:
 7de:	0f 93       	push	r16
 7e0:	1f 93       	push	r17
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	e0 91 8e 01 	lds	r30, 0x018E
 7ea:	f0 91 8f 01 	lds	r31, 0x018F
 7ee:	23 81       	ldd	r18, Z+3	; 0x03
 7f0:	21 ff       	sbrs	r18, 1
 7f2:	1b c0       	rjmp	.+54     	; 0x82a <puts+0x4c>
 7f4:	ec 01       	movw	r28, r24
 7f6:	00 e0       	ldi	r16, 0x00	; 0
 7f8:	10 e0       	ldi	r17, 0x00	; 0
 7fa:	89 91       	ld	r24, Y+
 7fc:	60 91 8e 01 	lds	r22, 0x018E
 800:	70 91 8f 01 	lds	r23, 0x018F
 804:	db 01       	movw	r26, r22
 806:	18 96       	adiw	r26, 0x08	; 8
 808:	ed 91       	ld	r30, X+
 80a:	fc 91       	ld	r31, X
 80c:	19 97       	sbiw	r26, 0x09	; 9
 80e:	88 23       	and	r24, r24
 810:	31 f0       	breq	.+12     	; 0x81e <puts+0x40>
 812:	09 95       	icall
 814:	89 2b       	or	r24, r25
 816:	89 f3       	breq	.-30     	; 0x7fa <puts+0x1c>
 818:	0f ef       	ldi	r16, 0xFF	; 255
 81a:	1f ef       	ldi	r17, 0xFF	; 255
 81c:	ee cf       	rjmp	.-36     	; 0x7fa <puts+0x1c>
 81e:	8a e0       	ldi	r24, 0x0A	; 10
 820:	09 95       	icall
 822:	89 2b       	or	r24, r25
 824:	11 f4       	brne	.+4      	; 0x82a <puts+0x4c>
 826:	c8 01       	movw	r24, r16
 828:	02 c0       	rjmp	.+4      	; 0x82e <puts+0x50>
 82a:	8f ef       	ldi	r24, 0xFF	; 255
 82c:	9f ef       	ldi	r25, 0xFF	; 255
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	1f 91       	pop	r17
 834:	0f 91       	pop	r16
 836:	08 95       	ret

00000838 <calloc>:
 838:	0f 93       	push	r16
 83a:	1f 93       	push	r17
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	86 9f       	mul	r24, r22
 842:	80 01       	movw	r16, r0
 844:	87 9f       	mul	r24, r23
 846:	10 0d       	add	r17, r0
 848:	96 9f       	mul	r25, r22
 84a:	10 0d       	add	r17, r0
 84c:	11 24       	eor	r1, r1
 84e:	c8 01       	movw	r24, r16
 850:	0e 94 38 04 	call	0x870	; 0x870 <malloc>
 854:	ec 01       	movw	r28, r24
 856:	00 97       	sbiw	r24, 0x00	; 0
 858:	29 f0       	breq	.+10     	; 0x864 <calloc+0x2c>
 85a:	a8 01       	movw	r20, r16
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	0e 94 5f 05 	call	0xabe	; 0xabe <memset>
 864:	ce 01       	movw	r24, r28
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	08 95       	ret

00000870 <malloc>:
 870:	cf 93       	push	r28
 872:	df 93       	push	r29
 874:	82 30       	cpi	r24, 0x02	; 2
 876:	91 05       	cpc	r25, r1
 878:	10 f4       	brcc	.+4      	; 0x87e <malloc+0xe>
 87a:	82 e0       	ldi	r24, 0x02	; 2
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	e0 91 94 01 	lds	r30, 0x0194
 882:	f0 91 95 01 	lds	r31, 0x0195
 886:	20 e0       	ldi	r18, 0x00	; 0
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	a0 e0       	ldi	r26, 0x00	; 0
 88c:	b0 e0       	ldi	r27, 0x00	; 0
 88e:	30 97       	sbiw	r30, 0x00	; 0
 890:	39 f1       	breq	.+78     	; 0x8e0 <malloc+0x70>
 892:	40 81       	ld	r20, Z
 894:	51 81       	ldd	r21, Z+1	; 0x01
 896:	48 17       	cp	r20, r24
 898:	59 07       	cpc	r21, r25
 89a:	b8 f0       	brcs	.+46     	; 0x8ca <malloc+0x5a>
 89c:	48 17       	cp	r20, r24
 89e:	59 07       	cpc	r21, r25
 8a0:	71 f4       	brne	.+28     	; 0x8be <malloc+0x4e>
 8a2:	82 81       	ldd	r24, Z+2	; 0x02
 8a4:	93 81       	ldd	r25, Z+3	; 0x03
 8a6:	10 97       	sbiw	r26, 0x00	; 0
 8a8:	29 f0       	breq	.+10     	; 0x8b4 <malloc+0x44>
 8aa:	13 96       	adiw	r26, 0x03	; 3
 8ac:	9c 93       	st	X, r25
 8ae:	8e 93       	st	-X, r24
 8b0:	12 97       	sbiw	r26, 0x02	; 2
 8b2:	2c c0       	rjmp	.+88     	; 0x90c <malloc+0x9c>
 8b4:	90 93 95 01 	sts	0x0195, r25
 8b8:	80 93 94 01 	sts	0x0194, r24
 8bc:	27 c0       	rjmp	.+78     	; 0x90c <malloc+0x9c>
 8be:	21 15       	cp	r18, r1
 8c0:	31 05       	cpc	r19, r1
 8c2:	31 f0       	breq	.+12     	; 0x8d0 <malloc+0x60>
 8c4:	42 17       	cp	r20, r18
 8c6:	53 07       	cpc	r21, r19
 8c8:	18 f0       	brcs	.+6      	; 0x8d0 <malloc+0x60>
 8ca:	a9 01       	movw	r20, r18
 8cc:	db 01       	movw	r26, r22
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <malloc+0x62>
 8d0:	ef 01       	movw	r28, r30
 8d2:	9a 01       	movw	r18, r20
 8d4:	bd 01       	movw	r22, r26
 8d6:	df 01       	movw	r26, r30
 8d8:	02 80       	ldd	r0, Z+2	; 0x02
 8da:	f3 81       	ldd	r31, Z+3	; 0x03
 8dc:	e0 2d       	mov	r30, r0
 8de:	d7 cf       	rjmp	.-82     	; 0x88e <malloc+0x1e>
 8e0:	21 15       	cp	r18, r1
 8e2:	31 05       	cpc	r19, r1
 8e4:	f9 f0       	breq	.+62     	; 0x924 <malloc+0xb4>
 8e6:	28 1b       	sub	r18, r24
 8e8:	39 0b       	sbc	r19, r25
 8ea:	24 30       	cpi	r18, 0x04	; 4
 8ec:	31 05       	cpc	r19, r1
 8ee:	80 f4       	brcc	.+32     	; 0x910 <malloc+0xa0>
 8f0:	8a 81       	ldd	r24, Y+2	; 0x02
 8f2:	9b 81       	ldd	r25, Y+3	; 0x03
 8f4:	61 15       	cp	r22, r1
 8f6:	71 05       	cpc	r23, r1
 8f8:	21 f0       	breq	.+8      	; 0x902 <malloc+0x92>
 8fa:	fb 01       	movw	r30, r22
 8fc:	93 83       	std	Z+3, r25	; 0x03
 8fe:	82 83       	std	Z+2, r24	; 0x02
 900:	04 c0       	rjmp	.+8      	; 0x90a <malloc+0x9a>
 902:	90 93 95 01 	sts	0x0195, r25
 906:	80 93 94 01 	sts	0x0194, r24
 90a:	fe 01       	movw	r30, r28
 90c:	32 96       	adiw	r30, 0x02	; 2
 90e:	44 c0       	rjmp	.+136    	; 0x998 <malloc+0x128>
 910:	fe 01       	movw	r30, r28
 912:	e2 0f       	add	r30, r18
 914:	f3 1f       	adc	r31, r19
 916:	81 93       	st	Z+, r24
 918:	91 93       	st	Z+, r25
 91a:	22 50       	subi	r18, 0x02	; 2
 91c:	31 09       	sbc	r19, r1
 91e:	39 83       	std	Y+1, r19	; 0x01
 920:	28 83       	st	Y, r18
 922:	3a c0       	rjmp	.+116    	; 0x998 <malloc+0x128>
 924:	20 91 92 01 	lds	r18, 0x0192
 928:	30 91 93 01 	lds	r19, 0x0193
 92c:	23 2b       	or	r18, r19
 92e:	41 f4       	brne	.+16     	; 0x940 <malloc+0xd0>
 930:	20 91 02 01 	lds	r18, 0x0102
 934:	30 91 03 01 	lds	r19, 0x0103
 938:	30 93 93 01 	sts	0x0193, r19
 93c:	20 93 92 01 	sts	0x0192, r18
 940:	20 91 00 01 	lds	r18, 0x0100
 944:	30 91 01 01 	lds	r19, 0x0101
 948:	21 15       	cp	r18, r1
 94a:	31 05       	cpc	r19, r1
 94c:	41 f4       	brne	.+16     	; 0x95e <malloc+0xee>
 94e:	2d b7       	in	r18, 0x3d	; 61
 950:	3e b7       	in	r19, 0x3e	; 62
 952:	40 91 04 01 	lds	r20, 0x0104
 956:	50 91 05 01 	lds	r21, 0x0105
 95a:	24 1b       	sub	r18, r20
 95c:	35 0b       	sbc	r19, r21
 95e:	e0 91 92 01 	lds	r30, 0x0192
 962:	f0 91 93 01 	lds	r31, 0x0193
 966:	e2 17       	cp	r30, r18
 968:	f3 07       	cpc	r31, r19
 96a:	a0 f4       	brcc	.+40     	; 0x994 <malloc+0x124>
 96c:	2e 1b       	sub	r18, r30
 96e:	3f 0b       	sbc	r19, r31
 970:	28 17       	cp	r18, r24
 972:	39 07       	cpc	r19, r25
 974:	78 f0       	brcs	.+30     	; 0x994 <malloc+0x124>
 976:	ac 01       	movw	r20, r24
 978:	4e 5f       	subi	r20, 0xFE	; 254
 97a:	5f 4f       	sbci	r21, 0xFF	; 255
 97c:	24 17       	cp	r18, r20
 97e:	35 07       	cpc	r19, r21
 980:	48 f0       	brcs	.+18     	; 0x994 <malloc+0x124>
 982:	4e 0f       	add	r20, r30
 984:	5f 1f       	adc	r21, r31
 986:	50 93 93 01 	sts	0x0193, r21
 98a:	40 93 92 01 	sts	0x0192, r20
 98e:	81 93       	st	Z+, r24
 990:	91 93       	st	Z+, r25
 992:	02 c0       	rjmp	.+4      	; 0x998 <malloc+0x128>
 994:	e0 e0       	ldi	r30, 0x00	; 0
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	cf 01       	movw	r24, r30
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	08 95       	ret

000009a0 <free>:
 9a0:	cf 93       	push	r28
 9a2:	df 93       	push	r29
 9a4:	00 97       	sbiw	r24, 0x00	; 0
 9a6:	09 f4       	brne	.+2      	; 0x9aa <free+0xa>
 9a8:	87 c0       	rjmp	.+270    	; 0xab8 <free+0x118>
 9aa:	fc 01       	movw	r30, r24
 9ac:	32 97       	sbiw	r30, 0x02	; 2
 9ae:	13 82       	std	Z+3, r1	; 0x03
 9b0:	12 82       	std	Z+2, r1	; 0x02
 9b2:	c0 91 94 01 	lds	r28, 0x0194
 9b6:	d0 91 95 01 	lds	r29, 0x0195
 9ba:	20 97       	sbiw	r28, 0x00	; 0
 9bc:	81 f4       	brne	.+32     	; 0x9de <free+0x3e>
 9be:	20 81       	ld	r18, Z
 9c0:	31 81       	ldd	r19, Z+1	; 0x01
 9c2:	28 0f       	add	r18, r24
 9c4:	39 1f       	adc	r19, r25
 9c6:	80 91 92 01 	lds	r24, 0x0192
 9ca:	90 91 93 01 	lds	r25, 0x0193
 9ce:	82 17       	cp	r24, r18
 9d0:	93 07       	cpc	r25, r19
 9d2:	79 f5       	brne	.+94     	; 0xa32 <free+0x92>
 9d4:	f0 93 93 01 	sts	0x0193, r31
 9d8:	e0 93 92 01 	sts	0x0192, r30
 9dc:	6d c0       	rjmp	.+218    	; 0xab8 <free+0x118>
 9de:	de 01       	movw	r26, r28
 9e0:	20 e0       	ldi	r18, 0x00	; 0
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	ae 17       	cp	r26, r30
 9e6:	bf 07       	cpc	r27, r31
 9e8:	50 f4       	brcc	.+20     	; 0x9fe <free+0x5e>
 9ea:	12 96       	adiw	r26, 0x02	; 2
 9ec:	4d 91       	ld	r20, X+
 9ee:	5c 91       	ld	r21, X
 9f0:	13 97       	sbiw	r26, 0x03	; 3
 9f2:	9d 01       	movw	r18, r26
 9f4:	41 15       	cp	r20, r1
 9f6:	51 05       	cpc	r21, r1
 9f8:	09 f1       	breq	.+66     	; 0xa3c <free+0x9c>
 9fa:	da 01       	movw	r26, r20
 9fc:	f3 cf       	rjmp	.-26     	; 0x9e4 <free+0x44>
 9fe:	b3 83       	std	Z+3, r27	; 0x03
 a00:	a2 83       	std	Z+2, r26	; 0x02
 a02:	40 81       	ld	r20, Z
 a04:	51 81       	ldd	r21, Z+1	; 0x01
 a06:	84 0f       	add	r24, r20
 a08:	95 1f       	adc	r25, r21
 a0a:	8a 17       	cp	r24, r26
 a0c:	9b 07       	cpc	r25, r27
 a0e:	71 f4       	brne	.+28     	; 0xa2c <free+0x8c>
 a10:	8d 91       	ld	r24, X+
 a12:	9c 91       	ld	r25, X
 a14:	11 97       	sbiw	r26, 0x01	; 1
 a16:	84 0f       	add	r24, r20
 a18:	95 1f       	adc	r25, r21
 a1a:	02 96       	adiw	r24, 0x02	; 2
 a1c:	91 83       	std	Z+1, r25	; 0x01
 a1e:	80 83       	st	Z, r24
 a20:	12 96       	adiw	r26, 0x02	; 2
 a22:	8d 91       	ld	r24, X+
 a24:	9c 91       	ld	r25, X
 a26:	13 97       	sbiw	r26, 0x03	; 3
 a28:	93 83       	std	Z+3, r25	; 0x03
 a2a:	82 83       	std	Z+2, r24	; 0x02
 a2c:	21 15       	cp	r18, r1
 a2e:	31 05       	cpc	r19, r1
 a30:	29 f4       	brne	.+10     	; 0xa3c <free+0x9c>
 a32:	f0 93 95 01 	sts	0x0195, r31
 a36:	e0 93 94 01 	sts	0x0194, r30
 a3a:	3e c0       	rjmp	.+124    	; 0xab8 <free+0x118>
 a3c:	d9 01       	movw	r26, r18
 a3e:	13 96       	adiw	r26, 0x03	; 3
 a40:	fc 93       	st	X, r31
 a42:	ee 93       	st	-X, r30
 a44:	12 97       	sbiw	r26, 0x02	; 2
 a46:	4d 91       	ld	r20, X+
 a48:	5d 91       	ld	r21, X+
 a4a:	a4 0f       	add	r26, r20
 a4c:	b5 1f       	adc	r27, r21
 a4e:	ea 17       	cp	r30, r26
 a50:	fb 07       	cpc	r31, r27
 a52:	79 f4       	brne	.+30     	; 0xa72 <free+0xd2>
 a54:	80 81       	ld	r24, Z
 a56:	91 81       	ldd	r25, Z+1	; 0x01
 a58:	84 0f       	add	r24, r20
 a5a:	95 1f       	adc	r25, r21
 a5c:	02 96       	adiw	r24, 0x02	; 2
 a5e:	d9 01       	movw	r26, r18
 a60:	11 96       	adiw	r26, 0x01	; 1
 a62:	9c 93       	st	X, r25
 a64:	8e 93       	st	-X, r24
 a66:	82 81       	ldd	r24, Z+2	; 0x02
 a68:	93 81       	ldd	r25, Z+3	; 0x03
 a6a:	13 96       	adiw	r26, 0x03	; 3
 a6c:	9c 93       	st	X, r25
 a6e:	8e 93       	st	-X, r24
 a70:	12 97       	sbiw	r26, 0x02	; 2
 a72:	e0 e0       	ldi	r30, 0x00	; 0
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	8a 81       	ldd	r24, Y+2	; 0x02
 a78:	9b 81       	ldd	r25, Y+3	; 0x03
 a7a:	00 97       	sbiw	r24, 0x00	; 0
 a7c:	19 f0       	breq	.+6      	; 0xa84 <free+0xe4>
 a7e:	fe 01       	movw	r30, r28
 a80:	ec 01       	movw	r28, r24
 a82:	f9 cf       	rjmp	.-14     	; 0xa76 <free+0xd6>
 a84:	ce 01       	movw	r24, r28
 a86:	02 96       	adiw	r24, 0x02	; 2
 a88:	28 81       	ld	r18, Y
 a8a:	39 81       	ldd	r19, Y+1	; 0x01
 a8c:	82 0f       	add	r24, r18
 a8e:	93 1f       	adc	r25, r19
 a90:	20 91 92 01 	lds	r18, 0x0192
 a94:	30 91 93 01 	lds	r19, 0x0193
 a98:	28 17       	cp	r18, r24
 a9a:	39 07       	cpc	r19, r25
 a9c:	69 f4       	brne	.+26     	; 0xab8 <free+0x118>
 a9e:	30 97       	sbiw	r30, 0x00	; 0
 aa0:	29 f4       	brne	.+10     	; 0xaac <free+0x10c>
 aa2:	10 92 95 01 	sts	0x0195, r1
 aa6:	10 92 94 01 	sts	0x0194, r1
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <free+0x110>
 aac:	13 82       	std	Z+3, r1	; 0x03
 aae:	12 82       	std	Z+2, r1	; 0x02
 ab0:	d0 93 93 01 	sts	0x0193, r29
 ab4:	c0 93 92 01 	sts	0x0192, r28
 ab8:	df 91       	pop	r29
 aba:	cf 91       	pop	r28
 abc:	08 95       	ret

00000abe <memset>:
 abe:	dc 01       	movw	r26, r24
 ac0:	01 c0       	rjmp	.+2      	; 0xac4 <memset+0x6>
 ac2:	6d 93       	st	X+, r22
 ac4:	41 50       	subi	r20, 0x01	; 1
 ac6:	50 40       	sbci	r21, 0x00	; 0
 ac8:	e0 f7       	brcc	.-8      	; 0xac2 <memset+0x4>
 aca:	08 95       	ret

00000acc <_exit>:
 acc:	f8 94       	cli

00000ace <__stop_program>:
 ace:	ff cf       	rjmp	.-2      	; 0xace <__stop_program>
