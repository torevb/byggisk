
Oving1_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00001086  0000111a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001086  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  0080013c  0080013c  00001156  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001156  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000230  00000000  00000000  000011b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d7f  00000000  00000000  000013e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b1a  00000000  00000000  00003161  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a6a  00000000  00000000  00003c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000056c  00000000  00000000  000046e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ea  00000000  00000000  00004c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ba8  00000000  00000000  0000523e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000220  00000000  00000000  00005de6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_1>
       8:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_2>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e6 e8       	ldi	r30, 0x86	; 134
      84:	f0 e1       	ldi	r31, 0x10	; 16
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ac 33       	cpi	r26, 0x3C	; 60
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	ac e3       	ldi	r26, 0x3C	; 60
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a0 3a       	cpi	r26, 0xA0	; 160
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 a8 03 	call	0x750	; 0x750 <main>
      a6:	0c 94 41 08 	jmp	0x1082	; 0x1082 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:
#include <avr/io.h>



void CAN_init(){
	MCP2515_init();
      ae:	0e 94 25 02 	call	0x44a	; 0x44a <MCP2515_init>
	bit_modify_MCP2515(MCP_CANCTRL,0xE0,MODE_LOOPBACK);//Enables loop back mode
      b2:	40 e4       	ldi	r20, 0x40	; 64
      b4:	60 ee       	ldi	r22, 0xE0	; 224
      b6:	8f e0       	ldi	r24, 0x0F	; 15
      b8:	0e 94 03 02 	call	0x406	; 0x406 <bit_modify_MCP2515>
	bit_modify_MCP2515(0x60, 0b01100000, 0xff);//set filters off
      bc:	4f ef       	ldi	r20, 0xFF	; 255
      be:	60 e6       	ldi	r22, 0x60	; 96
      c0:	80 e6       	ldi	r24, 0x60	; 96
      c2:	0e 94 03 02 	call	0x406	; 0x406 <bit_modify_MCP2515>
	bit_modify_MCP2515( 0x60, 0b00000100, 0x00);//sett rollover off
      c6:	40 e0       	ldi	r20, 0x00	; 0
      c8:	64 e0       	ldi	r22, 0x04	; 4
      ca:	80 e6       	ldi	r24, 0x60	; 96
      cc:	0e 94 03 02 	call	0x406	; 0x406 <bit_modify_MCP2515>

	bit_modify_MCP2515(0x2b, 0b00000001, 0xff);//Set RX0 full enable
      d0:	4f ef       	ldi	r20, 0xFF	; 255
      d2:	61 e0       	ldi	r22, 0x01	; 1
      d4:	8b e2       	ldi	r24, 0x2B	; 43
      d6:	0e 94 03 02 	call	0x406	; 0x406 <bit_modify_MCP2515>
      da:	08 95       	ret

000000dc <send_CAN_message>:
	
}

void send_CAN_message(struct CAN_struct msg){
      dc:	8f 92       	push	r8
      de:	9f 92       	push	r9
      e0:	af 92       	push	r10
      e2:	bf 92       	push	r11
      e4:	cf 92       	push	r12
      e6:	df 92       	push	r13
      e8:	ef 92       	push	r14
      ea:	ff 92       	push	r15
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
      f8:	62 97       	sbiw	r28, 0x12	; 18
      fa:	0f b6       	in	r0, 0x3f	; 63
      fc:	f8 94       	cli
      fe:	de bf       	out	0x3e, r29	; 62
     100:	0f be       	out	0x3f, r0	; 63
     102:	cd bf       	out	0x3d, r28	; 61
     104:	89 82       	std	Y+1, r8	; 0x01
     106:	9a 82       	std	Y+2, r9	; 0x02
     108:	ab 82       	std	Y+3, r10	; 0x03
     10a:	bc 82       	std	Y+4, r11	; 0x04
     10c:	cd 82       	std	Y+5, r12	; 0x05
     10e:	de 82       	std	Y+6, r13	; 0x06
     110:	ef 82       	std	Y+7, r14	; 0x07
     112:	f8 86       	std	Y+8, r15	; 0x08
     114:	09 87       	std	Y+9, r16	; 0x09
     116:	1a 87       	std	Y+10, r17	; 0x0a
     118:	2b 87       	std	Y+11, r18	; 0x0b
     11a:	3c 87       	std	Y+12, r19	; 0x0c
     11c:	4d 87       	std	Y+13, r20	; 0x0d
     11e:	5e 87       	std	Y+14, r21	; 0x0e
     120:	6f 87       	std	Y+15, r22	; 0x0f
     122:	78 8b       	std	Y+16, r23	; 0x10
     124:	89 8b       	std	Y+17, r24	; 0x11
     126:	9a 8b       	std	Y+18, r25	; 0x12

	//MCP_TXB0CTRL &= ~(1<<TXREQ);
	bit_modify_MCP2515(MCP_TXB0CTRL,TXREQ,4);//Choosing to write to buffer 0
     128:	44 e0       	ldi	r20, 0x04	; 4
     12a:	63 e0       	ldi	r22, 0x03	; 3
     12c:	80 e3       	ldi	r24, 0x30	; 48
     12e:	0e 94 03 02 	call	0x406	; 0x406 <bit_modify_MCP2515>
	
	//load SIDL
	write_MCP2515(MCP_TXB0_SIDL, msg.ID << 5);
     132:	69 81       	ldd	r22, Y+1	; 0x01
     134:	62 95       	swap	r22
     136:	66 0f       	add	r22, r22
     138:	60 7e       	andi	r22, 0xE0	; 224
     13a:	82 e3       	ldi	r24, 0x32	; 50
     13c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <write_MCP2515>
	
	//load SIDH
	write_MCP2515(MCP_TXB0_SIDH, msg.ID >> 3);
     140:	69 81       	ldd	r22, Y+1	; 0x01
     142:	66 95       	lsr	r22
     144:	66 95       	lsr	r22
     146:	66 95       	lsr	r22
     148:	81 e3       	ldi	r24, 0x31	; 49
     14a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <write_MCP2515>

	
	//load DLC
	//bit_modify_MCP2515(MCP_TXB0_DLC, 0x0F,(char)msg.length);//setting datalength
	
	write_MCP2515(MCP_TXB0_DLC,(char)msg.length);
     14e:	6a 81       	ldd	r22, Y+2	; 0x02
     150:	85 e3       	ldi	r24, 0x35	; 53
     152:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <write_MCP2515>
	//printf(" : %c\n",l);
	
	//if data--> TXBnDm load
	write_MCP2515(MCP_TXB0_D0,(char)msg.data);
     156:	be 01       	movw	r22, r28
     158:	6d 5f       	subi	r22, 0xFD	; 253
     15a:	7f 4f       	sbci	r23, 0xFF	; 255
     15c:	86 e3       	ldi	r24, 0x36	; 54
     15e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <write_MCP2515>
	
	/*PUTTING DATA IN DATABUFFER*/
	for (int i=0; i < msg.length; i++){
     162:	8a 81       	ldd	r24, Y+2	; 0x02
     164:	88 23       	and	r24, r24
     166:	b1 f0       	breq	.+44     	; 0x194 <send_CAN_message+0xb8>
     168:	7e 01       	movw	r14, r28
     16a:	83 e0       	ldi	r24, 0x03	; 3
     16c:	e8 0e       	add	r14, r24
     16e:	f1 1c       	adc	r15, r1
     170:	00 e0       	ldi	r16, 0x00	; 0
     172:	10 e0       	ldi	r17, 0x00	; 0
		//printf(" I: %i\n",i);
		write_MCP2515(MCP_TXB0_D0+i,(char)msg.data[i]);
     174:	f7 01       	movw	r30, r14
     176:	60 81       	ld	r22, Z
     178:	f2 e0       	ldi	r31, 0x02	; 2
     17a:	ef 0e       	add	r14, r31
     17c:	f1 1c       	adc	r15, r1
     17e:	86 e3       	ldi	r24, 0x36	; 54
     180:	80 0f       	add	r24, r16
     182:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <write_MCP2515>
	
	//if data--> TXBnDm load
	write_MCP2515(MCP_TXB0_D0,(char)msg.data);
	
	/*PUTTING DATA IN DATABUFFER*/
	for (int i=0; i < msg.length; i++){
     186:	0f 5f       	subi	r16, 0xFF	; 255
     188:	1f 4f       	sbci	r17, 0xFF	; 255
     18a:	8a 81       	ldd	r24, Y+2	; 0x02
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	08 17       	cp	r16, r24
     190:	19 07       	cpc	r17, r25
     192:	84 f3       	brlt	.-32     	; 0x174 <send_CAN_message+0x98>
		write_MCP2515(MCP_TXB0_D0+i,(char)msg.data[i]);
		
	}
	
	/*REQUEST TO SEND*/
	request_to_send_MCP2515(0x01);// Setting the TXBnCTRL for buffer 0.
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	0e 94 f6 01 	call	0x3ec	; 0x3ec <request_to_send_MCP2515>
	
	/*CHECK IF TRANSMIT SUCCEEDS*/
	while (read_MCP2515(MCP_TXB0CTRL) & TXREQ){//will be cleared when finished
     19a:	80 e3       	ldi	r24, 0x30	; 48
     19c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <read_MCP2515>
     1a0:	83 70       	andi	r24, 0x03	; 3
     1a2:	d9 f7       	brne	.-10     	; 0x19a <send_CAN_message+0xbe>
	}
	
	
	/*ABORT TRANSMISSION?*/
	
}
     1a4:	62 96       	adiw	r28, 0x12	; 18
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	f8 94       	cli
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	cd bf       	out	0x3d, r28	; 61
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	1f 91       	pop	r17
     1b6:	0f 91       	pop	r16
     1b8:	ff 90       	pop	r15
     1ba:	ef 90       	pop	r14
     1bc:	df 90       	pop	r13
     1be:	cf 90       	pop	r12
     1c0:	bf 90       	pop	r11
     1c2:	af 90       	pop	r10
     1c4:	9f 90       	pop	r9
     1c6:	8f 90       	pop	r8
     1c8:	08 95       	ret

000001ca <rcv_CAN_message>:


CAN_struct rcv_CAN_message(){
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
     1de:	62 97       	sbiw	r28, 0x12	; 18
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	f8 94       	cli
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	6c 01       	movw	r12, r24

	CAN_struct msg;
	
	memset(&msg,0,sizeof(CAN_struct));
     1ec:	fe 01       	movw	r30, r28
     1ee:	31 96       	adiw	r30, 0x01	; 1
     1f0:	82 e1       	ldi	r24, 0x12	; 18
     1f2:	df 01       	movw	r26, r30
     1f4:	1d 92       	st	X+, r1
     1f6:	8a 95       	dec	r24
     1f8:	e9 f7       	brne	.-6      	; 0x1f4 <rcv_CAN_message+0x2a>
	
	msg.ID=((read_MCP2515(MCP_RXB0SIDH))<<3|((read_MCP2515(MCP_RXB0SIDL))>>5));
     1fa:	81 e6       	ldi	r24, 0x61	; 97
     1fc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <read_MCP2515>
     200:	18 2f       	mov	r17, r24
     202:	82 e6       	ldi	r24, 0x62	; 98
     204:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <read_MCP2515>
     208:	11 0f       	add	r17, r17
     20a:	11 0f       	add	r17, r17
     20c:	11 0f       	add	r17, r17
     20e:	82 95       	swap	r24
     210:	86 95       	lsr	r24
     212:	87 70       	andi	r24, 0x07	; 7
     214:	18 2b       	or	r17, r24
     216:	19 83       	std	Y+1, r17	; 0x01
	msg.length=	(int)(read_MCP2515(MCP_RXB0_DLC) & 0x0f);
     218:	85 e6       	ldi	r24, 0x65	; 101
     21a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <read_MCP2515>
     21e:	8f 70       	andi	r24, 0x0F	; 15
     220:	8a 83       	std	Y+2, r24	; 0x02
	printf(" Message length %i:\n",msg.length);
     222:	1f 92       	push	r1
     224:	8f 93       	push	r24
     226:	86 e0       	ldi	r24, 0x06	; 6
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	9f 93       	push	r25
     22c:	8f 93       	push	r24
     22e:	0e 94 34 04 	call	0x868	; 0x868 <printf>
	
	
	/*READING DATA FROM DATABUFFER*/
	for (int i=0; i < msg.length; i++){
     232:	8a 81       	ldd	r24, Y+2	; 0x02
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	88 23       	and	r24, r24
     23e:	b9 f0       	breq	.+46     	; 0x26e <rcv_CAN_message+0xa4>
     240:	7e 01       	movw	r14, r28
     242:	b3 e0       	ldi	r27, 0x03	; 3
     244:	eb 0e       	add	r14, r27
     246:	f1 1c       	adc	r15, r1
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	10 e0       	ldi	r17, 0x00	; 0
		msg.data[i]= read_MCP2515(MCP_RXB0_D0+i);
     24c:	86 e6       	ldi	r24, 0x66	; 102
     24e:	80 0f       	add	r24, r16
     250:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <read_MCP2515>
     254:	28 2f       	mov	r18, r24
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	f7 01       	movw	r30, r14
     25a:	21 93       	st	Z+, r18
     25c:	31 93       	st	Z+, r19
     25e:	7f 01       	movw	r14, r30
	msg.length=	(int)(read_MCP2515(MCP_RXB0_DLC) & 0x0f);
	printf(" Message length %i:\n",msg.length);
	
	
	/*READING DATA FROM DATABUFFER*/
	for (int i=0; i < msg.length; i++){
     260:	0f 5f       	subi	r16, 0xFF	; 255
     262:	1f 4f       	sbci	r17, 0xFF	; 255
     264:	2a 81       	ldd	r18, Y+2	; 0x02
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	02 17       	cp	r16, r18
     26a:	13 07       	cpc	r17, r19
     26c:	7c f3       	brlt	.-34     	; 0x24c <rcv_CAN_message+0x82>
		msg.data[i]= read_MCP2515(MCP_RXB0_D0+i);
		
	}
	
	//MUST clear RXB0IF after reading message
	bit_modify_MCP2515(MCP_CANINTF, 0,0x00);
     26e:	40 e0       	ldi	r20, 0x00	; 0
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	8c e2       	ldi	r24, 0x2C	; 44
     274:	0e 94 03 02 	call	0x406	; 0x406 <bit_modify_MCP2515>
	
	return msg;
     278:	82 e1       	ldi	r24, 0x12	; 18
     27a:	fe 01       	movw	r30, r28
     27c:	31 96       	adiw	r30, 0x01	; 1
     27e:	d6 01       	movw	r26, r12
     280:	01 90       	ld	r0, Z+
     282:	0d 92       	st	X+, r0
     284:	8a 95       	dec	r24
     286:	e1 f7       	brne	.-8      	; 0x280 <rcv_CAN_message+0xb6>
}
     288:	c6 01       	movw	r24, r12
     28a:	62 96       	adiw	r28, 0x12	; 18
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	f8 94       	cli
     290:	de bf       	out	0x3e, r29	; 62
     292:	0f be       	out	0x3f, r0	; 63
     294:	cd bf       	out	0x3d, r28	; 61
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	df 90       	pop	r13
     2a4:	cf 90       	pop	r12
     2a6:	08 95       	ret

000002a8 <CAN_test>:
#include "CAN_driver.h"
#include "SPI_driver.h"
#include "MCP2515_driver.h"
#include <stdio.h>
void CAN_test(){
     2a8:	8f 92       	push	r8
     2aa:	9f 92       	push	r9
     2ac:	af 92       	push	r10
     2ae:	bf 92       	push	r11
     2b0:	cf 92       	push	r12
     2b2:	df 92       	push	r13
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	a4 97       	sbiw	r28, 0x24	; 36
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	cd bf       	out	0x3d, r28	; 61
	CAN_init();
     2d0:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	CAN_struct msg;
	msg.ID=3;
     2d4:	83 e0       	ldi	r24, 0x03	; 3
     2d6:	89 83       	std	Y+1, r24	; 0x01
	msg.length=6;
	msg.data[0]='T';
     2d8:	84 e5       	ldi	r24, 0x54	; 84
     2da:	a8 2e       	mov	r10, r24
     2dc:	8b 83       	std	Y+3, r24	; 0x03
     2de:	1c 82       	std	Y+4, r1	; 0x04
	msg.data[1]='O';
     2e0:	8f e4       	ldi	r24, 0x4F	; 79
     2e2:	c8 2e       	mov	r12, r24
     2e4:	8d 83       	std	Y+5, r24	; 0x05
     2e6:	1e 82       	std	Y+6, r1	; 0x06
	msg.data[2]='R';
     2e8:	82 e5       	ldi	r24, 0x52	; 82
     2ea:	e8 2e       	mov	r14, r24
     2ec:	8f 83       	std	Y+7, r24	; 0x07
     2ee:	18 86       	std	Y+8, r1	; 0x08
	msg.data[3]='E';
     2f0:	85 e4       	ldi	r24, 0x45	; 69
     2f2:	08 2f       	mov	r16, r24
     2f4:	89 87       	std	Y+9, r24	; 0x09
     2f6:	1a 86       	std	Y+10, r1	; 0x0a
	msg.data[4]='#';
     2f8:	83 e2       	ldi	r24, 0x23	; 35
     2fa:	28 2f       	mov	r18, r24
     2fc:	8b 87       	std	Y+11, r24	; 0x0b
     2fe:	1c 86       	std	Y+12, r1	; 0x0c
	msg.data[5]='1';
     300:	81 e3       	ldi	r24, 0x31	; 49
     302:	48 2f       	mov	r20, r24
     304:	8d 87       	std	Y+13, r24	; 0x0d
     306:	1e 86       	std	Y+14, r1	; 0x0e
		
	send_CAN_message(msg);
     308:	86 e0       	ldi	r24, 0x06	; 6
     30a:	8a 83       	std	Y+2, r24	; 0x02
     30c:	0f 2e       	mov	r0, r31
     30e:	f3 e0       	ldi	r31, 0x03	; 3
     310:	8f 2e       	mov	r8, r31
     312:	f0 2d       	mov	r31, r0
     314:	0f 2e       	mov	r0, r31
     316:	f6 e0       	ldi	r31, 0x06	; 6
     318:	9f 2e       	mov	r9, r31
     31a:	f0 2d       	mov	r31, r0
     31c:	b1 2c       	mov	r11, r1
     31e:	d1 2c       	mov	r13, r1
     320:	f1 2c       	mov	r15, r1
     322:	10 e0       	ldi	r17, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	6f 85       	ldd	r22, Y+15	; 0x0f
     32a:	78 89       	ldd	r23, Y+16	; 0x10
     32c:	89 89       	ldd	r24, Y+17	; 0x11
     32e:	9a 89       	ldd	r25, Y+18	; 0x12
     330:	0e 94 6e 00 	call	0xdc	; 0xdc <send_CAN_message>
	//printf("HER \n");
	CAN_struct rcv_msg= rcv_CAN_message();
     334:	ce 01       	movw	r24, r28
     336:	43 96       	adiw	r24, 0x13	; 19
     338:	0e 94 e5 00 	call	0x1ca	; 0x1ca <rcv_CAN_message>
     33c:	8e 01       	movw	r16, r28
     33e:	0b 5e       	subi	r16, 0xEB	; 235
     340:	1f 4f       	sbci	r17, 0xFF	; 255
     342:	6e 01       	movw	r12, r28
     344:	81 e2       	ldi	r24, 0x21	; 33
     346:	c8 0e       	add	r12, r24
     348:	d1 1c       	adc	r13, r1
	//printf("HER \n");
	for (int j=0;j<msg.length;j++){
		printf("Data in received message : %c \n", rcv_msg.data[j]);
     34a:	0f 2e       	mov	r0, r31
     34c:	fb e1       	ldi	r31, 0x1B	; 27
     34e:	ef 2e       	mov	r14, r31
     350:	f1 e0       	ldi	r31, 0x01	; 1
     352:	ff 2e       	mov	r15, r31
     354:	f0 2d       	mov	r31, r0
     356:	f8 01       	movw	r30, r16
     358:	80 81       	ld	r24, Z
     35a:	91 81       	ldd	r25, Z+1	; 0x01
     35c:	0e 5f       	subi	r16, 0xFE	; 254
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	9f 93       	push	r25
     362:	8f 93       	push	r24
     364:	ff 92       	push	r15
     366:	ef 92       	push	r14
     368:	0e 94 34 04 	call	0x868	; 0x868 <printf>
		
	send_CAN_message(msg);
	//printf("HER \n");
	CAN_struct rcv_msg= rcv_CAN_message();
	//printf("HER \n");
	for (int j=0;j<msg.length;j++){
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0c 15       	cp	r16, r12
     376:	1d 05       	cpc	r17, r13
     378:	71 f7       	brne	.-36     	; 0x356 <CAN_test+0xae>
		printf("Data in received message : %c \n", rcv_msg.data[j]);
	}
     37a:	a4 96       	adiw	r28, 0x24	; 36
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	f8 94       	cli
     380:	de bf       	out	0x3e, r29	; 62
     382:	0f be       	out	0x3f, r0	; 63
     384:	cd bf       	out	0x3d, r28	; 61
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	df 90       	pop	r13
     394:	cf 90       	pop	r12
     396:	bf 90       	pop	r11
     398:	af 90       	pop	r10
     39a:	9f 90       	pop	r9
     39c:	8f 90       	pop	r8
     39e:	08 95       	ret

000003a0 <read_MCP2515>:
	reset_MCP2515();
	SPI_master_init();	
}


char read_MCP2515(char read_address){
     3a0:	cf 93       	push	r28
     3a2:	c8 2f       	mov	r28, r24
	spi_chipselect_deactivate();
     3a4:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <spi_chipselect_deactivate>
	send_master_SPI(0x03);	//'read' instruction. 
     3a8:	83 e0       	ldi	r24, 0x03	; 3
     3aa:	0e 94 c5 03 	call	0x78a	; 0x78a <send_master_SPI>
	send_master_SPI(read_address);
     3ae:	8c 2f       	mov	r24, r28
     3b0:	0e 94 c5 03 	call	0x78a	; 0x78a <send_master_SPI>
	
	char val=read_master_SPI();
     3b4:	0e 94 c9 03 	call	0x792	; 0x792 <read_master_SPI>
     3b8:	c8 2f       	mov	r28, r24
	spi_chipselect_activate();
     3ba:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <spi_chipselect_activate>
	return val;
	//PORTB |=(1<<SSn);
}
     3be:	8c 2f       	mov	r24, r28
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <write_MCP2515>:


void write_MCP2515(char write_address, char write_data){
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	d8 2f       	mov	r29, r24
     3ca:	c6 2f       	mov	r28, r22
	spi_chipselect_deactivate();
     3cc:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <spi_chipselect_deactivate>
	send_master_SPI(0x02);	//'write byte' instruction.
     3d0:	82 e0       	ldi	r24, 0x02	; 2
     3d2:	0e 94 c5 03 	call	0x78a	; 0x78a <send_master_SPI>
	send_master_SPI(write_address);
     3d6:	8d 2f       	mov	r24, r29
     3d8:	0e 94 c5 03 	call	0x78a	; 0x78a <send_master_SPI>
	send_master_SPI(write_data);
     3dc:	8c 2f       	mov	r24, r28
     3de:	0e 94 c5 03 	call	0x78a	; 0x78a <send_master_SPI>
	spi_chipselect_activate();
     3e2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <spi_chipselect_activate>
	
}
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <request_to_send_MCP2515>:

void request_to_send_MCP2515(char RTS_in){
     3ec:	cf 93       	push	r28
     3ee:	c8 2f       	mov	r28, r24
	spi_chipselect_deactivate();
     3f0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <spi_chipselect_deactivate>
	RTS_in = RTS_in % 8;		//Ensures no more than 3 bits proceed.
     3f4:	8c 2f       	mov	r24, r28
     3f6:	87 70       	andi	r24, 0x07	; 7
	send_master_SPI(0x80 + RTS_in);
     3f8:	80 58       	subi	r24, 0x80	; 128
     3fa:	0e 94 c5 03 	call	0x78a	; 0x78a <send_master_SPI>

	spi_chipselect_activate();
     3fe:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <spi_chipselect_activate>
}
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <bit_modify_MCP2515>:
		return repeat;
	}*/
	return out;
}

void bit_modify_MCP2515(char address, char mask_byte, char data){
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	18 2f       	mov	r17, r24
     40e:	d6 2f       	mov	r29, r22
     410:	c4 2f       	mov	r28, r20
	spi_chipselect_deactivate();
     412:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <spi_chipselect_deactivate>
	send_master_SPI(0x05);	//'bit modify' instruction.
     416:	85 e0       	ldi	r24, 0x05	; 5
     418:	0e 94 c5 03 	call	0x78a	; 0x78a <send_master_SPI>
	send_master_SPI(address);
     41c:	81 2f       	mov	r24, r17
     41e:	0e 94 c5 03 	call	0x78a	; 0x78a <send_master_SPI>
	send_master_SPI(mask_byte);
     422:	8d 2f       	mov	r24, r29
     424:	0e 94 c5 03 	call	0x78a	; 0x78a <send_master_SPI>
	send_master_SPI(data);
     428:	8c 2f       	mov	r24, r28
     42a:	0e 94 c5 03 	call	0x78a	; 0x78a <send_master_SPI>
	spi_chipselect_activate();
     42e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <spi_chipselect_activate>
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	08 95       	ret

0000043a <reset_MCP2515>:

void reset_MCP2515(){
	spi_chipselect_deactivate();
     43a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <spi_chipselect_deactivate>
	send_master_SPI(0xC0);	//'reset' instruction.
     43e:	80 ec       	ldi	r24, 0xC0	; 192
     440:	0e 94 c5 03 	call	0x78a	; 0x78a <send_master_SPI>
	spi_chipselect_activate();
     444:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <spi_chipselect_activate>
     448:	08 95       	ret

0000044a <MCP2515_init>:
#include "CAN MCP2515 header files\MCP2515.h"



void MCP2515_init(){
	reset_MCP2515();
     44a:	0e 94 1d 02 	call	0x43a	; 0x43a <reset_MCP2515>
	SPI_master_init();	
     44e:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_master_init>
     452:	08 95       	ret

00000454 <memory_init>:
#include <stdlib.h>
#include <avr/io.h>


void memory_init(void){
	MCUCR|=(1<<SRE);
     454:	85 b7       	in	r24, 0x35	; 53
     456:	80 68       	ori	r24, 0x80	; 128
     458:	85 bf       	out	0x35, r24	; 53
	SFIOR|=(1<<XMM2);
     45a:	80 b7       	in	r24, 0x30	; 48
     45c:	80 62       	ori	r24, 0x20	; 32
     45e:	80 bf       	out	0x30, r24	; 48
     460:	08 95       	ret

00000462 <menu_print>:
	menu_print();
}

void menu_print(){
	//print_to_OLED(current_node->children[0]->content_string, 2);
	OLED_reset();
     462:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <OLED_reset>
	print_to_OLED(current_node->name, 2);
     466:	e0 91 8d 01 	lds	r30, 0x018D
     46a:	f0 91 8e 01 	lds	r31, 0x018E
     46e:	62 e0       	ldi	r22, 0x02	; 2
     470:	80 89       	ldd	r24, Z+16	; 0x10
     472:	91 89       	ldd	r25, Z+17	; 0x11
     474:	0e 94 03 03 	call	0x606	; 0x606 <print_to_OLED>
	print_to_OLED(current_node->content_string, 2);
     478:	e0 91 8d 01 	lds	r30, 0x018D
     47c:	f0 91 8e 01 	lds	r31, 0x018E
     480:	62 e0       	ldi	r22, 0x02	; 2
     482:	82 89       	ldd	r24, Z+18	; 0x12
     484:	93 89       	ldd	r25, Z+19	; 0x13
     486:	0e 94 03 03 	call	0x606	; 0x606 <print_to_OLED>
	OLED_print_arrow(arrow_page);
     48a:	80 91 3c 01 	lds	r24, 0x013C
     48e:	0e 94 8e 03 	call	0x71c	; 0x71c <OLED_print_arrow>
     492:	08 95       	ret

00000494 <__vector_1>:
	}
	OLED_print_arrow(arrow_page);
}

/* Left slider button, INT0_vect, pin PD2. Right slider button, INT1_vect, pin PD3.*/
ISR(INT0_vect){//, INT1_vect){
     494:	1f 92       	push	r1
     496:	0f 92       	push	r0
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	0f 92       	push	r0
     49c:	11 24       	eor	r1, r1
     49e:	2f 93       	push	r18
     4a0:	3f 93       	push	r19
     4a2:	4f 93       	push	r20
     4a4:	5f 93       	push	r21
     4a6:	6f 93       	push	r22
     4a8:	7f 93       	push	r23
     4aa:	8f 93       	push	r24
     4ac:	9f 93       	push	r25
     4ae:	af 93       	push	r26
     4b0:	bf 93       	push	r27
     4b2:	ef 93       	push	r30
     4b4:	ff 93       	push	r31
	if (arrow_page <= 0){
     4b6:	e0 91 3c 01 	lds	r30, 0x013C
     4ba:	e1 11       	cpse	r30, r1
     4bc:	0b c0       	rjmp	.+22     	; 0x4d4 <__vector_1+0x40>
		current_node = current_node->parent;
     4be:	e0 91 8d 01 	lds	r30, 0x018D
     4c2:	f0 91 8e 01 	lds	r31, 0x018E
     4c6:	80 81       	ld	r24, Z
     4c8:	91 81       	ldd	r25, Z+1	; 0x01
     4ca:	90 93 8e 01 	sts	0x018E, r25
     4ce:	80 93 8d 01 	sts	0x018D, r24
     4d2:	11 c0       	rjmp	.+34     	; 0x4f6 <__vector_1+0x62>
	} else if (!(current_node->children[arrow_page - 1] == NULL)){
     4d4:	80 91 8d 01 	lds	r24, 0x018D
     4d8:	90 91 8e 01 	lds	r25, 0x018E
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	e8 0f       	add	r30, r24
     4e4:	f9 1f       	adc	r31, r25
     4e6:	80 81       	ld	r24, Z
     4e8:	91 81       	ldd	r25, Z+1	; 0x01
     4ea:	00 97       	sbiw	r24, 0x00	; 0
     4ec:	21 f0       	breq	.+8      	; 0x4f6 <__vector_1+0x62>
		current_node = current_node->children[arrow_page -1];
     4ee:	90 93 8e 01 	sts	0x018E, r25
     4f2:	80 93 8d 01 	sts	0x018D, r24
	}
	arrow_page = 0;
     4f6:	10 92 3c 01 	sts	0x013C, r1
	menu_print();
     4fa:	0e 94 31 02 	call	0x462	; 0x462 <menu_print>
}
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	bf 91       	pop	r27
     504:	af 91       	pop	r26
     506:	9f 91       	pop	r25
     508:	8f 91       	pop	r24
     50a:	7f 91       	pop	r23
     50c:	6f 91       	pop	r22
     50e:	5f 91       	pop	r21
     510:	4f 91       	pop	r20
     512:	3f 91       	pop	r19
     514:	2f 91       	pop	r18
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <__vector_2>:

ISR(INT1_vect){
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	11 24       	eor	r1, r1
     52a:	2f 93       	push	r18
     52c:	3f 93       	push	r19
     52e:	4f 93       	push	r20
     530:	5f 93       	push	r21
     532:	6f 93       	push	r22
     534:	7f 93       	push	r23
     536:	8f 93       	push	r24
     538:	9f 93       	push	r25
     53a:	af 93       	push	r26
     53c:	bf 93       	push	r27
     53e:	ef 93       	push	r30
     540:	ff 93       	push	r31
	current_node = current_node->parent;
     542:	e0 91 8d 01 	lds	r30, 0x018D
     546:	f0 91 8e 01 	lds	r31, 0x018E
     54a:	80 81       	ld	r24, Z
     54c:	91 81       	ldd	r25, Z+1	; 0x01
     54e:	90 93 8e 01 	sts	0x018E, r25
     552:	80 93 8d 01 	sts	0x018D, r24
	menu_print();
     556:	0e 94 31 02 	call	0x462	; 0x462 <menu_print>
}
     55a:	ff 91       	pop	r31
     55c:	ef 91       	pop	r30
     55e:	bf 91       	pop	r27
     560:	af 91       	pop	r26
     562:	9f 91       	pop	r25
     564:	8f 91       	pop	r24
     566:	7f 91       	pop	r23
     568:	6f 91       	pop	r22
     56a:	5f 91       	pop	r21
     56c:	4f 91       	pop	r20
     56e:	3f 91       	pop	r19
     570:	2f 91       	pop	r18
     572:	0f 90       	pop	r0
     574:	0f be       	out	0x3f, r0	; 63
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <goto_OLED_page>:
	goto_OLED_char_column(0);
	return;
}

void goto_OLED_page(uint8_t page){
	current_page = page % DISPLAY_PAGES;
     57c:	87 70       	andi	r24, 0x07	; 7
     57e:	80 93 94 01 	sts	0x0194, r24
	write_OLED_cmd(0xB0 + current_page);
     582:	80 55       	subi	r24, 0x50	; 80
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
     584:	80 93 00 10 	sts	0x1000, r24
     588:	08 95       	ret

0000058a <goto_OLED_char_column>:
	write_OLED_cmd(0xB0 + current_page);
	return;
}

void goto_OLED_char_column(uint8_t column){
	uint8_t c = column * font_type.width;
     58a:	90 91 8f 01 	lds	r25, 0x018F
     58e:	89 9f       	mul	r24, r25
     590:	90 2d       	mov	r25, r0
     592:	11 24       	eor	r1, r1
	uint8_t low_bits = c & 0x0f;
     594:	29 2f       	mov	r18, r25
     596:	2f 70       	andi	r18, 0x0F	; 15
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
     598:	e0 e0       	ldi	r30, 0x00	; 0
     59a:	f0 e1       	ldi	r31, 0x10	; 16
     59c:	20 83       	st	Z, r18
void goto_OLED_char_column(uint8_t column){
	uint8_t c = column * font_type.width;
	uint8_t low_bits = c & 0x0f;
	uint8_t high_bits = c & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
     59e:	92 95       	swap	r25
     5a0:	9f 70       	andi	r25, 0x0F	; 15
     5a2:	90 5f       	subi	r25, 0xF0	; 240
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
     5a4:	90 83       	st	Z, r25
	uint8_t low_bits = c & 0x0f;
	uint8_t high_bits = c & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
	
	current_column = column;
     5a6:	80 93 95 01 	sts	0x0195, r24
     5aa:	08 95       	ret

000005ac <OLED_home>:
	OLED_home();
	return;
}

void OLED_home(){
	goto_OLED_page(0);
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	0e 94 be 02 	call	0x57c	; 0x57c <goto_OLED_page>
	goto_OLED_char_column(0);
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 c5 02 	call	0x58a	; 0x58a <goto_OLED_char_column>
     5b8:	08 95       	ret

000005ba <goto_OLED_physical_column>:
	current_column = temp_col;
	return;
}

void goto_OLED_physical_column(uint8_t column){
	uint8_t low_bits = column & 0x0f;
     5ba:	98 2f       	mov	r25, r24
     5bc:	9f 70       	andi	r25, 0x0F	; 15
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
     5be:	e0 e0       	ldi	r30, 0x00	; 0
     5c0:	f0 e1       	ldi	r31, 0x10	; 16
     5c2:	90 83       	st	Z, r25

void goto_OLED_physical_column(uint8_t column){
	uint8_t low_bits = column & 0x0f;
	uint8_t high_bits = column & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
     5c4:	98 2f       	mov	r25, r24
     5c6:	92 95       	swap	r25
     5c8:	9f 70       	andi	r25, 0x0F	; 15
     5ca:	90 5f       	subi	r25, 0xF0	; 240
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
     5cc:	90 83       	st	Z, r25
	uint8_t low_bits = column & 0x0f;
	uint8_t high_bits = column & 0xf0;
	write_OLED_cmd(0x00 + low_bits);
	write_OLED_cmd(0x10 + (high_bits >> 4));
	
	current_column = column;
     5ce:	80 93 95 01 	sts	0x0195, r24
     5d2:	08 95       	ret

000005d4 <clear_OLED_page>:
	return;
}

void clear_OLED_page(uint8_t page){
	goto_OLED_page(page);
     5d4:	0e 94 be 02 	call	0x57c	; 0x57c <goto_OLED_page>
	for (uint8_t i = 0; i < DISPLAY_COLUMNS; i++){
     5d8:	80 e0       	ldi	r24, 0x00	; 0
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
     5da:	e0 e0       	ldi	r30, 0x00	; 0
     5dc:	f2 e1       	ldi	r31, 0x12	; 18
     5de:	10 82       	st	Z, r1
	return;
}

void clear_OLED_page(uint8_t page){
	goto_OLED_page(page);
	for (uint8_t i = 0; i < DISPLAY_COLUMNS; i++){
     5e0:	8f 5f       	subi	r24, 0xFF	; 255
     5e2:	80 38       	cpi	r24, 0x80	; 128
     5e4:	e1 f7       	brne	.-8      	; 0x5de <clear_OLED_page+0xa>
		write_OLED_data(0);
	}
	return;
}
     5e6:	08 95       	ret

000005e8 <OLED_reset>:
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
}


void OLED_reset(){
     5e8:	cf 93       	push	r28
}


void write_OLED_cmd(uint8_t number){
	volatile char *ext_oled_cs = (char *) 0x1000;
	*ext_oled_cs = number;
     5ea:	80 e4       	ldi	r24, 0x40	; 64
     5ec:	80 93 00 10 	sts	0x1000, r24
}


void OLED_reset(){
	write_OLED_cmd(0x40);		//Set display line start at page 0. 
	for (uint8_t i = 0; i < DISPLAY_PAGES; i++){
     5f0:	c0 e0       	ldi	r28, 0x00	; 0
		clear_OLED_page(i);
     5f2:	8c 2f       	mov	r24, r28
     5f4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <clear_OLED_page>
}


void OLED_reset(){
	write_OLED_cmd(0x40);		//Set display line start at page 0. 
	for (uint8_t i = 0; i < DISPLAY_PAGES; i++){
     5f8:	cf 5f       	subi	r28, 0xFF	; 255
     5fa:	c8 30       	cpi	r28, 0x08	; 8
     5fc:	d1 f7       	brne	.-12     	; 0x5f2 <OLED_reset+0xa>
		clear_OLED_page(i);
	}
	OLED_home();
     5fe:	0e 94 d6 02 	call	0x5ac	; 0x5ac <OLED_home>
	return;
}
     602:	cf 91       	pop	r28
     604:	08 95       	ret

00000606 <print_to_OLED>:

void OLED_pos(uint8_t page, uint8_t column){
	return;
}

void print_to_OLED(const char * string, uint8_t start_column){
     606:	3f 92       	push	r3
     608:	4f 92       	push	r4
     60a:	5f 92       	push	r5
     60c:	6f 92       	push	r6
     60e:	7f 92       	push	r7
     610:	8f 92       	push	r8
     612:	9f 92       	push	r9
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	ec 01       	movw	r28, r24
     62a:	36 2e       	mov	r3, r22
	goto_OLED_char_column(start_column);
     62c:	86 2f       	mov	r24, r22
     62e:	0e 94 c5 02 	call	0x58a	; 0x58a <goto_OLED_char_column>
	int length = strlen(string);
     632:	fe 01       	movw	r30, r28
     634:	01 90       	ld	r0, Z+
     636:	00 20       	and	r0, r0
     638:	e9 f7       	brne	.-6      	; 0x634 <print_to_OLED+0x2e>
     63a:	31 97       	sbiw	r30, 0x01	; 1
     63c:	3f 01       	movw	r6, r30
     63e:	6c 1a       	sub	r6, r28
     640:	7d 0a       	sbc	r7, r29
	
	for (int i = 0; i < length; i++){
     642:	16 14       	cp	r1, r6
     644:	17 04       	cpc	r1, r7
     646:	0c f0       	brlt	.+2      	; 0x64a <print_to_OLED+0x44>
     648:	57 c0       	rjmp	.+174    	; 0x6f8 <print_to_OLED+0xf2>
     64a:	4e 01       	movw	r8, r28
     64c:	a1 2c       	mov	r10, r1
     64e:	b1 2c       	mov	r11, r1
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
     650:	cf e8       	ldi	r28, 0x8F	; 143
     652:	d1 e0       	ldi	r29, 0x01	; 1
     654:	51 2c       	mov	r5, r1
     656:	41 2c       	mov	r4, r1
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
     658:	0f 2e       	mov	r0, r31
     65a:	f2 e9       	ldi	r31, 0x92	; 146
     65c:	cf 2e       	mov	r12, r31
     65e:	f1 e0       	ldi	r31, 0x01	; 1
     660:	df 2e       	mov	r13, r31
     662:	f0 2d       	mov	r31, r0
     664:	0f 2e       	mov	r0, r31
     666:	f1 e9       	ldi	r31, 0x91	; 145
     668:	ef 2e       	mov	r14, r31
     66a:	f1 e0       	ldi	r31, 0x01	; 1
     66c:	ff 2e       	mov	r15, r31
     66e:	f0 2d       	mov	r31, r0
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
     670:	00 e0       	ldi	r16, 0x00	; 0
     672:	12 e1       	ldi	r17, 0x12	; 18
void print_to_OLED(const char * string, uint8_t start_column){
	goto_OLED_char_column(start_column);
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
		char c = string[i];
     674:	d4 01       	movw	r26, r8
     676:	4d 91       	ld	r20, X+
     678:	4d 01       	movw	r8, r26
		if (c == '\n') {
     67a:	4a 30       	cpi	r20, 0x0A	; 10
     67c:	31 f0       	breq	.+12     	; 0x68a <print_to_OLED+0x84>
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
     67e:	28 81       	ld	r18, Y
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	12 16       	cp	r1, r18
     684:	13 06       	cpc	r1, r19
     686:	6c f0       	brlt	.+26     	; 0x6a2 <print_to_OLED+0x9c>
     688:	30 c0       	rjmp	.+96     	; 0x6ea <print_to_OLED+0xe4>
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
		char c = string[i];
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
     68a:	80 91 94 01 	lds	r24, 0x0194
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	87 70       	andi	r24, 0x07	; 7
     694:	90 78       	andi	r25, 0x80	; 128
     696:	0e 94 be 02 	call	0x57c	; 0x57c <goto_OLED_page>
			goto_OLED_char_column(start_column);
     69a:	83 2d       	mov	r24, r3
     69c:	0e 94 c5 02 	call	0x58a	; 0x58a <goto_OLED_char_column>
     6a0:	24 c0       	rjmp	.+72     	; 0x6ea <print_to_OLED+0xe4>
		}
		else{
			for (int j = 0; j < font_type.width; j++){
     6a2:	85 2d       	mov	r24, r5
     6a4:	94 2d       	mov	r25, r4
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	f7 01       	movw	r30, r14
     6aa:	60 81       	ld	r22, Z
     6ac:	da 01       	movw	r26, r20
     6ae:	a6 1b       	sub	r26, r22
     6b0:	b1 09       	sbc	r27, r1
     6b2:	2a 9f       	mul	r18, r26
     6b4:	f0 01       	movw	r30, r0
     6b6:	2b 9f       	mul	r18, r27
     6b8:	f0 0d       	add	r31, r0
     6ba:	3a 9f       	mul	r19, r26
     6bc:	f0 0d       	add	r31, r0
     6be:	11 24       	eor	r1, r1
     6c0:	e8 0f       	add	r30, r24
     6c2:	f9 1f       	adc	r31, r25
     6c4:	d6 01       	movw	r26, r12
     6c6:	2d 91       	ld	r18, X+
     6c8:	3c 91       	ld	r19, X
     6ca:	e2 0f       	add	r30, r18
     6cc:	f3 1f       	adc	r31, r19
     6ce:	e4 91       	lpm	r30, Z
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
     6d0:	d8 01       	movw	r26, r16
     6d2:	ec 93       	st	X, r30
		else{
			for (int j = 0; j < font_type.width; j++){
				write_OLED_data(pgm_read_byte(font_type.data + (c - font_type.ascii_offset) * font_type.width +j));
				//write_OLED_data(pgm_read_byte(&font[c-font_type.ascii_offset][j]));
				//write_OLED_data(pgm_read_byte(&font_type.data[c-font_type.ascii_offset][j]));
				current_column = current_column + font_type.width;
     6d4:	30 91 95 01 	lds	r19, 0x0195
     6d8:	28 81       	ld	r18, Y
     6da:	32 0f       	add	r19, r18
     6dc:	30 93 95 01 	sts	0x0195, r19
		if (c == '\n') {
			goto_OLED_page((current_page + 1) % DISPLAY_PAGES);
			goto_OLED_char_column(start_column);
		}
		else{
			for (int j = 0; j < font_type.width; j++){
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	82 17       	cp	r24, r18
     6e6:	93 07       	cpc	r25, r19
     6e8:	fc f2       	brlt	.-66     	; 0x6a8 <print_to_OLED+0xa2>

void print_to_OLED(const char * string, uint8_t start_column){
	goto_OLED_char_column(start_column);
	int length = strlen(string);
	
	for (int i = 0; i < length; i++){
     6ea:	bf ef       	ldi	r27, 0xFF	; 255
     6ec:	ab 1a       	sub	r10, r27
     6ee:	bb 0a       	sbc	r11, r27
     6f0:	6a 14       	cp	r6, r10
     6f2:	7b 04       	cpc	r7, r11
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <print_to_OLED+0xf2>
     6f6:	be cf       	rjmp	.-132    	; 0x674 <print_to_OLED+0x6e>
				current_column = current_column + font_type.width;
			}
		}
	}
	return;
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	ef 90       	pop	r14
     704:	df 90       	pop	r13
     706:	cf 90       	pop	r12
     708:	bf 90       	pop	r11
     70a:	af 90       	pop	r10
     70c:	9f 90       	pop	r9
     70e:	8f 90       	pop	r8
     710:	7f 90       	pop	r7
     712:	6f 90       	pop	r6
     714:	5f 90       	pop	r5
     716:	4f 90       	pop	r4
     718:	3f 90       	pop	r3
     71a:	08 95       	ret

0000071c <OLED_print_arrow>:

void OLED_print_arrow(uint8_t page)
{	int temp = current_page;
     71c:	cf 93       	push	r28
     71e:	c0 91 94 01 	lds	r28, 0x0194
	goto_OLED_page(page);
     722:	0e 94 be 02 	call	0x57c	; 0x57c <goto_OLED_page>
	goto_OLED_physical_column(1);
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	0e 94 dd 02 	call	0x5ba	; 0x5ba <goto_OLED_physical_column>
	*ext_oled_cs = number;
}

void write_OLED_data(uint8_t number){
	volatile char *ext_oled_dc = (char *) 0x1200;
	*ext_oled_dc = number;
     72c:	e0 e0       	ldi	r30, 0x00	; 0
     72e:	f2 e1       	ldi	r31, 0x12	; 18
     730:	98 e1       	ldi	r25, 0x18	; 24
     732:	90 83       	st	Z, r25
     734:	90 83       	st	Z, r25
     736:	8e e7       	ldi	r24, 0x7E	; 126
     738:	80 83       	st	Z, r24
     73a:	8c e3       	ldi	r24, 0x3C	; 60
     73c:	80 83       	st	Z, r24
     73e:	90 83       	st	Z, r25
	write_OLED_data(0b00011000);
	write_OLED_data(0b00011000);
	write_OLED_data(0b01111110);
	write_OLED_data(0b00111100);
	write_OLED_data(0b00011000);
	current_column = ARROW_WIDTH;
     740:	88 e0       	ldi	r24, 0x08	; 8
     742:	80 93 95 01 	sts	0x0195, r24
	
	goto_OLED_page(temp);
     746:	8c 2f       	mov	r24, r28
     748:	0e 94 be 02 	call	0x57c	; 0x57c <goto_OLED_page>
}
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <main>:
	 //}
	
	
	//ov2////////////////////////////////
	
	DDRE=0x3;
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	86 b9       	out	0x06, r24	; 6
	DDRA=0xFF;
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
     758:	1b ba       	out	0x1b, r1	; 27
	PORTE=0x2;
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	87 b9       	out	0x07, r24	; 7
	char temp = read_MCP2515(MCP_CANCTRL);
	printf("Temp: %i\n", temp);
	}*/
	
	
	memory_init();
     75e:	0e 94 2a 02 	call	0x454	; 0x454 <memory_init>
	UART_Init(MYUBRR);
     762:	8f e1       	ldi	r24, 0x1F	; 31
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <UART_Init>
	SPI_master_init();
     76a:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_master_init>
	

	
	CAN_test();
     76e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <CAN_test>
	
	return 0;
	
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	08 95       	ret

00000778 <SPI_master_init>:
#define SCK		7



void SPI_master_init(){
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SSn);		//Set MOSI, SCK, SSn output.
     778:	87 b3       	in	r24, 0x17	; 23
     77a:	80 6b       	ori	r24, 0xB0	; 176
     77c:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~((1<<MISO));		//Set MISO input.
     77e:	be 98       	cbi	0x17, 6	; 23
	PORTB|=(1<<MISO);
     780:	c6 9a       	sbi	0x18, 6	; 24
	SPCR |= (1<<SPE) | (1<<MSTR)|(1<<SPR0);	//Enable SPI, Master, set clock rate fck/16.
     782:	8d b1       	in	r24, 0x0d	; 13
     784:	81 65       	ori	r24, 0x51	; 81
     786:	8d b9       	out	0x0d, r24	; 13
     788:	08 95       	ret

0000078a <send_master_SPI>:
	SPCR = (1<<SPE);	//Enable SPI.
}

void send_master_SPI(char data){
	
	SPDR = data;			//Send data.
     78a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF))) {}		//Wait for transmission complete.
     78c:	77 9b       	sbis	0x0e, 7	; 14
     78e:	fe cf       	rjmp	.-4      	; 0x78c <send_master_SPI+0x2>
	
}
     790:	08 95       	ret

00000792 <read_master_SPI>:

char read_master_SPI(){
	
	
	send_master_SPI(0xFF);		//Send dummy byte.		
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	0e 94 c5 03 	call	0x78a	; 0x78a <send_master_SPI>
	while (!(SPSR & (1<<SPIF))) {}		//Wait for transmission complete.
     798:	77 9b       	sbis	0x0e, 7	; 14
     79a:	fe cf       	rjmp	.-4      	; 0x798 <read_master_SPI+0x6>
	return SPDR;
     79c:	8f b1       	in	r24, 0x0f	; 15
}
     79e:	08 95       	ret

000007a0 <spi_chipselect_activate>:

void spi_chipselect_activate(){
	PORTB |=(1<<SSn);
     7a0:	c4 9a       	sbi	0x18, 4	; 24
     7a2:	08 95       	ret

000007a4 <spi_chipselect_deactivate>:
}

void spi_chipselect_deactivate(){
	PORTB &=~(1<<SSn);
     7a4:	c4 98       	cbi	0x18, 4	; 24
     7a6:	08 95       	ret

000007a8 <UART_Transmit>:
	}
	
void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer*/
		while( !( UCSR0A & (1<<UDRE0)) )
     7a8:	5d 9b       	sbis	0x0b, 5	; 11
     7aa:	fe cf       	rjmp	.-4      	; 0x7a8 <UART_Transmit>
		;
	/* Put data into buffer, sends the data*/
		UDR0 = data;
     7ac:	8c b9       	out	0x0c, r24	; 12
     7ae:	08 95       	ret

000007b0 <UART_Receive>:
}

unsigned char UART_Receive(void)
	{
		/* Wait for data to be received*/
		while( !(UCSR0A & (1<<RXC0)) )
     7b0:	5f 9b       	sbis	0x0b, 7	; 11
     7b2:	fe cf       	rjmp	.-4      	; 0x7b0 <UART_Receive>
			;
		/* Get and return received data from buffer*/
		return UDR0;
     7b4:	8c b1       	in	r24, 0x0c	; 12
     7b6:	08 95       	ret

000007b8 <UART_Init>:
#define MYUBRR FOSC/16/BAUD-1

void UART_Init(unsigned int ubrr)
	{
		/* Set baud rate */
		UBRR0H = (unsigned char)(ubrr>>8);
     7b8:	90 bd       	out	0x20, r25	; 32
		UBRR0L = (unsigned char)ubrr;
     7ba:	89 b9       	out	0x09, r24	; 9
		/* Enable receiver and transmitter */
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     7bc:	88 e1       	ldi	r24, 0x18	; 24
     7be:	8a b9       	out	0x0a, r24	; 10
		/* 
		Set frame format: 8data, 2stop bit
		*/
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     7c0:	8e e8       	ldi	r24, 0x8E	; 142
     7c2:	80 bd       	out	0x20, r24	; 32
		fdevopen(&UART_Transmit, &UART_Receive);
     7c4:	68 ed       	ldi	r22, 0xD8	; 216
     7c6:	73 e0       	ldi	r23, 0x03	; 3
     7c8:	84 ed       	ldi	r24, 0xD4	; 212
     7ca:	93 e0       	ldi	r25, 0x03	; 3
     7cc:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <fdevopen>
     7d0:	08 95       	ret

000007d2 <fdevopen>:
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	ec 01       	movw	r28, r24
     7dc:	8b 01       	movw	r16, r22
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	31 f4       	brne	.+12     	; 0x7ee <fdevopen+0x1c>
     7e2:	61 15       	cp	r22, r1
     7e4:	71 05       	cpc	r23, r1
     7e6:	19 f4       	brne	.+6      	; 0x7ee <fdevopen+0x1c>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	38 c0       	rjmp	.+112    	; 0x85e <fdevopen+0x8c>
     7ee:	6e e0       	ldi	r22, 0x0E	; 14
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 1a 06 	call	0xc34	; 0xc34 <calloc>
     7fa:	fc 01       	movw	r30, r24
     7fc:	00 97       	sbiw	r24, 0x00	; 0
     7fe:	a1 f3       	breq	.-24     	; 0x7e8 <fdevopen+0x16>
     800:	80 e8       	ldi	r24, 0x80	; 128
     802:	83 83       	std	Z+3, r24	; 0x03
     804:	01 15       	cp	r16, r1
     806:	11 05       	cpc	r17, r1
     808:	71 f0       	breq	.+28     	; 0x826 <fdevopen+0x54>
     80a:	13 87       	std	Z+11, r17	; 0x0b
     80c:	02 87       	std	Z+10, r16	; 0x0a
     80e:	81 e8       	ldi	r24, 0x81	; 129
     810:	83 83       	std	Z+3, r24	; 0x03
     812:	80 91 96 01 	lds	r24, 0x0196
     816:	90 91 97 01 	lds	r25, 0x0197
     81a:	89 2b       	or	r24, r25
     81c:	21 f4       	brne	.+8      	; 0x826 <fdevopen+0x54>
     81e:	f0 93 97 01 	sts	0x0197, r31
     822:	e0 93 96 01 	sts	0x0196, r30
     826:	20 97       	sbiw	r28, 0x00	; 0
     828:	c9 f0       	breq	.+50     	; 0x85c <fdevopen+0x8a>
     82a:	d1 87       	std	Z+9, r29	; 0x09
     82c:	c0 87       	std	Z+8, r28	; 0x08
     82e:	83 81       	ldd	r24, Z+3	; 0x03
     830:	82 60       	ori	r24, 0x02	; 2
     832:	83 83       	std	Z+3, r24	; 0x03
     834:	80 91 98 01 	lds	r24, 0x0198
     838:	90 91 99 01 	lds	r25, 0x0199
     83c:	89 2b       	or	r24, r25
     83e:	71 f4       	brne	.+28     	; 0x85c <fdevopen+0x8a>
     840:	f0 93 99 01 	sts	0x0199, r31
     844:	e0 93 98 01 	sts	0x0198, r30
     848:	80 91 9a 01 	lds	r24, 0x019A
     84c:	90 91 9b 01 	lds	r25, 0x019B
     850:	89 2b       	or	r24, r25
     852:	21 f4       	brne	.+8      	; 0x85c <fdevopen+0x8a>
     854:	f0 93 9b 01 	sts	0x019B, r31
     858:	e0 93 9a 01 	sts	0x019A, r30
     85c:	cf 01       	movw	r24, r30
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <printf>:
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	ea e3       	ldi	r30, 0x3A	; 58
     86e:	f4 e0       	ldi	r31, 0x04	; 4
     870:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__prologue_saves__+0x20>
     874:	fe 01       	movw	r30, r28
     876:	35 96       	adiw	r30, 0x05	; 5
     878:	61 91       	ld	r22, Z+
     87a:	71 91       	ld	r23, Z+
     87c:	af 01       	movw	r20, r30
     87e:	80 91 98 01 	lds	r24, 0x0198
     882:	90 91 99 01 	lds	r25, 0x0199
     886:	0e 94 48 04 	call	0x890	; 0x890 <vfprintf>
     88a:	e2 e0       	ldi	r30, 0x02	; 2
     88c:	0c 94 36 08 	jmp	0x106c	; 0x106c <__epilogue_restores__+0x20>

00000890 <vfprintf>:
     890:	ac e0       	ldi	r26, 0x0C	; 12
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	ee e4       	ldi	r30, 0x4E	; 78
     896:	f4 e0       	ldi	r31, 0x04	; 4
     898:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__prologue_saves__>
     89c:	7c 01       	movw	r14, r24
     89e:	6b 01       	movw	r12, r22
     8a0:	8a 01       	movw	r16, r20
     8a2:	fc 01       	movw	r30, r24
     8a4:	17 82       	std	Z+7, r1	; 0x07
     8a6:	16 82       	std	Z+6, r1	; 0x06
     8a8:	83 81       	ldd	r24, Z+3	; 0x03
     8aa:	81 ff       	sbrs	r24, 1
     8ac:	bd c1       	rjmp	.+890    	; 0xc28 <vfprintf+0x398>
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	4c 01       	movw	r8, r24
     8b4:	f7 01       	movw	r30, r14
     8b6:	93 81       	ldd	r25, Z+3	; 0x03
     8b8:	f6 01       	movw	r30, r12
     8ba:	93 fd       	sbrc	r25, 3
     8bc:	85 91       	lpm	r24, Z+
     8be:	93 ff       	sbrs	r25, 3
     8c0:	81 91       	ld	r24, Z+
     8c2:	6f 01       	movw	r12, r30
     8c4:	88 23       	and	r24, r24
     8c6:	09 f4       	brne	.+2      	; 0x8ca <vfprintf+0x3a>
     8c8:	ab c1       	rjmp	.+854    	; 0xc20 <vfprintf+0x390>
     8ca:	85 32       	cpi	r24, 0x25	; 37
     8cc:	39 f4       	brne	.+14     	; 0x8dc <vfprintf+0x4c>
     8ce:	93 fd       	sbrc	r25, 3
     8d0:	85 91       	lpm	r24, Z+
     8d2:	93 ff       	sbrs	r25, 3
     8d4:	81 91       	ld	r24, Z+
     8d6:	6f 01       	movw	r12, r30
     8d8:	85 32       	cpi	r24, 0x25	; 37
     8da:	29 f4       	brne	.+10     	; 0x8e6 <vfprintf+0x56>
     8dc:	b7 01       	movw	r22, r14
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 7a 07 	call	0xef4	; 0xef4 <fputc>
     8e4:	e7 cf       	rjmp	.-50     	; 0x8b4 <vfprintf+0x24>
     8e6:	51 2c       	mov	r5, r1
     8e8:	31 2c       	mov	r3, r1
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	20 32       	cpi	r18, 0x20	; 32
     8ee:	a0 f4       	brcc	.+40     	; 0x918 <vfprintf+0x88>
     8f0:	8b 32       	cpi	r24, 0x2B	; 43
     8f2:	69 f0       	breq	.+26     	; 0x90e <vfprintf+0x7e>
     8f4:	30 f4       	brcc	.+12     	; 0x902 <vfprintf+0x72>
     8f6:	80 32       	cpi	r24, 0x20	; 32
     8f8:	59 f0       	breq	.+22     	; 0x910 <vfprintf+0x80>
     8fa:	83 32       	cpi	r24, 0x23	; 35
     8fc:	69 f4       	brne	.+26     	; 0x918 <vfprintf+0x88>
     8fe:	20 61       	ori	r18, 0x10	; 16
     900:	2c c0       	rjmp	.+88     	; 0x95a <vfprintf+0xca>
     902:	8d 32       	cpi	r24, 0x2D	; 45
     904:	39 f0       	breq	.+14     	; 0x914 <vfprintf+0x84>
     906:	80 33       	cpi	r24, 0x30	; 48
     908:	39 f4       	brne	.+14     	; 0x918 <vfprintf+0x88>
     90a:	21 60       	ori	r18, 0x01	; 1
     90c:	26 c0       	rjmp	.+76     	; 0x95a <vfprintf+0xca>
     90e:	22 60       	ori	r18, 0x02	; 2
     910:	24 60       	ori	r18, 0x04	; 4
     912:	23 c0       	rjmp	.+70     	; 0x95a <vfprintf+0xca>
     914:	28 60       	ori	r18, 0x08	; 8
     916:	21 c0       	rjmp	.+66     	; 0x95a <vfprintf+0xca>
     918:	27 fd       	sbrc	r18, 7
     91a:	27 c0       	rjmp	.+78     	; 0x96a <vfprintf+0xda>
     91c:	30 ed       	ldi	r19, 0xD0	; 208
     91e:	38 0f       	add	r19, r24
     920:	3a 30       	cpi	r19, 0x0A	; 10
     922:	78 f4       	brcc	.+30     	; 0x942 <vfprintf+0xb2>
     924:	26 ff       	sbrs	r18, 6
     926:	06 c0       	rjmp	.+12     	; 0x934 <vfprintf+0xa4>
     928:	fa e0       	ldi	r31, 0x0A	; 10
     92a:	5f 9e       	mul	r5, r31
     92c:	30 0d       	add	r19, r0
     92e:	11 24       	eor	r1, r1
     930:	53 2e       	mov	r5, r19
     932:	13 c0       	rjmp	.+38     	; 0x95a <vfprintf+0xca>
     934:	8a e0       	ldi	r24, 0x0A	; 10
     936:	38 9e       	mul	r3, r24
     938:	30 0d       	add	r19, r0
     93a:	11 24       	eor	r1, r1
     93c:	33 2e       	mov	r3, r19
     93e:	20 62       	ori	r18, 0x20	; 32
     940:	0c c0       	rjmp	.+24     	; 0x95a <vfprintf+0xca>
     942:	8e 32       	cpi	r24, 0x2E	; 46
     944:	21 f4       	brne	.+8      	; 0x94e <vfprintf+0xbe>
     946:	26 fd       	sbrc	r18, 6
     948:	6b c1       	rjmp	.+726    	; 0xc20 <vfprintf+0x390>
     94a:	20 64       	ori	r18, 0x40	; 64
     94c:	06 c0       	rjmp	.+12     	; 0x95a <vfprintf+0xca>
     94e:	8c 36       	cpi	r24, 0x6C	; 108
     950:	11 f4       	brne	.+4      	; 0x956 <vfprintf+0xc6>
     952:	20 68       	ori	r18, 0x80	; 128
     954:	02 c0       	rjmp	.+4      	; 0x95a <vfprintf+0xca>
     956:	88 36       	cpi	r24, 0x68	; 104
     958:	41 f4       	brne	.+16     	; 0x96a <vfprintf+0xda>
     95a:	f6 01       	movw	r30, r12
     95c:	93 fd       	sbrc	r25, 3
     95e:	85 91       	lpm	r24, Z+
     960:	93 ff       	sbrs	r25, 3
     962:	81 91       	ld	r24, Z+
     964:	6f 01       	movw	r12, r30
     966:	81 11       	cpse	r24, r1
     968:	c1 cf       	rjmp	.-126    	; 0x8ec <vfprintf+0x5c>
     96a:	98 2f       	mov	r25, r24
     96c:	9f 7d       	andi	r25, 0xDF	; 223
     96e:	95 54       	subi	r25, 0x45	; 69
     970:	93 30       	cpi	r25, 0x03	; 3
     972:	28 f4       	brcc	.+10     	; 0x97e <vfprintf+0xee>
     974:	0c 5f       	subi	r16, 0xFC	; 252
     976:	1f 4f       	sbci	r17, 0xFF	; 255
     978:	ff e3       	ldi	r31, 0x3F	; 63
     97a:	f9 83       	std	Y+1, r31	; 0x01
     97c:	0d c0       	rjmp	.+26     	; 0x998 <vfprintf+0x108>
     97e:	83 36       	cpi	r24, 0x63	; 99
     980:	31 f0       	breq	.+12     	; 0x98e <vfprintf+0xfe>
     982:	83 37       	cpi	r24, 0x73	; 115
     984:	71 f0       	breq	.+28     	; 0x9a2 <vfprintf+0x112>
     986:	83 35       	cpi	r24, 0x53	; 83
     988:	09 f0       	breq	.+2      	; 0x98c <vfprintf+0xfc>
     98a:	5b c0       	rjmp	.+182    	; 0xa42 <vfprintf+0x1b2>
     98c:	22 c0       	rjmp	.+68     	; 0x9d2 <vfprintf+0x142>
     98e:	f8 01       	movw	r30, r16
     990:	80 81       	ld	r24, Z
     992:	89 83       	std	Y+1, r24	; 0x01
     994:	0e 5f       	subi	r16, 0xFE	; 254
     996:	1f 4f       	sbci	r17, 0xFF	; 255
     998:	44 24       	eor	r4, r4
     99a:	43 94       	inc	r4
     99c:	51 2c       	mov	r5, r1
     99e:	54 01       	movw	r10, r8
     9a0:	15 c0       	rjmp	.+42     	; 0x9cc <vfprintf+0x13c>
     9a2:	38 01       	movw	r6, r16
     9a4:	f2 e0       	ldi	r31, 0x02	; 2
     9a6:	6f 0e       	add	r6, r31
     9a8:	71 1c       	adc	r7, r1
     9aa:	f8 01       	movw	r30, r16
     9ac:	a0 80       	ld	r10, Z
     9ae:	b1 80       	ldd	r11, Z+1	; 0x01
     9b0:	26 ff       	sbrs	r18, 6
     9b2:	03 c0       	rjmp	.+6      	; 0x9ba <vfprintf+0x12a>
     9b4:	65 2d       	mov	r22, r5
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <vfprintf+0x12e>
     9ba:	6f ef       	ldi	r22, 0xFF	; 255
     9bc:	7f ef       	ldi	r23, 0xFF	; 255
     9be:	c5 01       	movw	r24, r10
     9c0:	2c 87       	std	Y+12, r18	; 0x0c
     9c2:	0e 94 6f 07 	call	0xede	; 0xede <strnlen>
     9c6:	2c 01       	movw	r4, r24
     9c8:	83 01       	movw	r16, r6
     9ca:	2c 85       	ldd	r18, Y+12	; 0x0c
     9cc:	2f 77       	andi	r18, 0x7F	; 127
     9ce:	22 2e       	mov	r2, r18
     9d0:	17 c0       	rjmp	.+46     	; 0xa00 <vfprintf+0x170>
     9d2:	38 01       	movw	r6, r16
     9d4:	f2 e0       	ldi	r31, 0x02	; 2
     9d6:	6f 0e       	add	r6, r31
     9d8:	71 1c       	adc	r7, r1
     9da:	f8 01       	movw	r30, r16
     9dc:	a0 80       	ld	r10, Z
     9de:	b1 80       	ldd	r11, Z+1	; 0x01
     9e0:	26 ff       	sbrs	r18, 6
     9e2:	03 c0       	rjmp	.+6      	; 0x9ea <vfprintf+0x15a>
     9e4:	65 2d       	mov	r22, r5
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <vfprintf+0x15e>
     9ea:	6f ef       	ldi	r22, 0xFF	; 255
     9ec:	7f ef       	ldi	r23, 0xFF	; 255
     9ee:	c5 01       	movw	r24, r10
     9f0:	2c 87       	std	Y+12, r18	; 0x0c
     9f2:	0e 94 5d 07 	call	0xeba	; 0xeba <strnlen_P>
     9f6:	2c 01       	movw	r4, r24
     9f8:	2c 85       	ldd	r18, Y+12	; 0x0c
     9fa:	20 68       	ori	r18, 0x80	; 128
     9fc:	22 2e       	mov	r2, r18
     9fe:	83 01       	movw	r16, r6
     a00:	23 fc       	sbrc	r2, 3
     a02:	1b c0       	rjmp	.+54     	; 0xa3a <vfprintf+0x1aa>
     a04:	83 2d       	mov	r24, r3
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	48 16       	cp	r4, r24
     a0a:	59 06       	cpc	r5, r25
     a0c:	b0 f4       	brcc	.+44     	; 0xa3a <vfprintf+0x1aa>
     a0e:	b7 01       	movw	r22, r14
     a10:	80 e2       	ldi	r24, 0x20	; 32
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 7a 07 	call	0xef4	; 0xef4 <fputc>
     a18:	3a 94       	dec	r3
     a1a:	f4 cf       	rjmp	.-24     	; 0xa04 <vfprintf+0x174>
     a1c:	f5 01       	movw	r30, r10
     a1e:	27 fc       	sbrc	r2, 7
     a20:	85 91       	lpm	r24, Z+
     a22:	27 fe       	sbrs	r2, 7
     a24:	81 91       	ld	r24, Z+
     a26:	5f 01       	movw	r10, r30
     a28:	b7 01       	movw	r22, r14
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 7a 07 	call	0xef4	; 0xef4 <fputc>
     a30:	31 10       	cpse	r3, r1
     a32:	3a 94       	dec	r3
     a34:	f1 e0       	ldi	r31, 0x01	; 1
     a36:	4f 1a       	sub	r4, r31
     a38:	51 08       	sbc	r5, r1
     a3a:	41 14       	cp	r4, r1
     a3c:	51 04       	cpc	r5, r1
     a3e:	71 f7       	brne	.-36     	; 0xa1c <vfprintf+0x18c>
     a40:	e5 c0       	rjmp	.+458    	; 0xc0c <vfprintf+0x37c>
     a42:	84 36       	cpi	r24, 0x64	; 100
     a44:	11 f0       	breq	.+4      	; 0xa4a <vfprintf+0x1ba>
     a46:	89 36       	cpi	r24, 0x69	; 105
     a48:	39 f5       	brne	.+78     	; 0xa98 <vfprintf+0x208>
     a4a:	f8 01       	movw	r30, r16
     a4c:	27 ff       	sbrs	r18, 7
     a4e:	07 c0       	rjmp	.+14     	; 0xa5e <vfprintf+0x1ce>
     a50:	60 81       	ld	r22, Z
     a52:	71 81       	ldd	r23, Z+1	; 0x01
     a54:	82 81       	ldd	r24, Z+2	; 0x02
     a56:	93 81       	ldd	r25, Z+3	; 0x03
     a58:	0c 5f       	subi	r16, 0xFC	; 252
     a5a:	1f 4f       	sbci	r17, 0xFF	; 255
     a5c:	08 c0       	rjmp	.+16     	; 0xa6e <vfprintf+0x1de>
     a5e:	60 81       	ld	r22, Z
     a60:	71 81       	ldd	r23, Z+1	; 0x01
     a62:	88 27       	eor	r24, r24
     a64:	77 fd       	sbrc	r23, 7
     a66:	80 95       	com	r24
     a68:	98 2f       	mov	r25, r24
     a6a:	0e 5f       	subi	r16, 0xFE	; 254
     a6c:	1f 4f       	sbci	r17, 0xFF	; 255
     a6e:	2f 76       	andi	r18, 0x6F	; 111
     a70:	b2 2e       	mov	r11, r18
     a72:	97 ff       	sbrs	r25, 7
     a74:	09 c0       	rjmp	.+18     	; 0xa88 <vfprintf+0x1f8>
     a76:	90 95       	com	r25
     a78:	80 95       	com	r24
     a7a:	70 95       	com	r23
     a7c:	61 95       	neg	r22
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	8f 4f       	sbci	r24, 0xFF	; 255
     a82:	9f 4f       	sbci	r25, 0xFF	; 255
     a84:	20 68       	ori	r18, 0x80	; 128
     a86:	b2 2e       	mov	r11, r18
     a88:	2a e0       	ldi	r18, 0x0A	; 10
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	a4 01       	movw	r20, r8
     a8e:	0e 94 ac 07 	call	0xf58	; 0xf58 <__ultoa_invert>
     a92:	a8 2e       	mov	r10, r24
     a94:	a8 18       	sub	r10, r8
     a96:	44 c0       	rjmp	.+136    	; 0xb20 <vfprintf+0x290>
     a98:	85 37       	cpi	r24, 0x75	; 117
     a9a:	29 f4       	brne	.+10     	; 0xaa6 <vfprintf+0x216>
     a9c:	2f 7e       	andi	r18, 0xEF	; 239
     a9e:	b2 2e       	mov	r11, r18
     aa0:	2a e0       	ldi	r18, 0x0A	; 10
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	25 c0       	rjmp	.+74     	; 0xaf0 <vfprintf+0x260>
     aa6:	f2 2f       	mov	r31, r18
     aa8:	f9 7f       	andi	r31, 0xF9	; 249
     aaa:	bf 2e       	mov	r11, r31
     aac:	8f 36       	cpi	r24, 0x6F	; 111
     aae:	c1 f0       	breq	.+48     	; 0xae0 <vfprintf+0x250>
     ab0:	18 f4       	brcc	.+6      	; 0xab8 <vfprintf+0x228>
     ab2:	88 35       	cpi	r24, 0x58	; 88
     ab4:	79 f0       	breq	.+30     	; 0xad4 <vfprintf+0x244>
     ab6:	b4 c0       	rjmp	.+360    	; 0xc20 <vfprintf+0x390>
     ab8:	80 37       	cpi	r24, 0x70	; 112
     aba:	19 f0       	breq	.+6      	; 0xac2 <vfprintf+0x232>
     abc:	88 37       	cpi	r24, 0x78	; 120
     abe:	21 f0       	breq	.+8      	; 0xac8 <vfprintf+0x238>
     ac0:	af c0       	rjmp	.+350    	; 0xc20 <vfprintf+0x390>
     ac2:	2f 2f       	mov	r18, r31
     ac4:	20 61       	ori	r18, 0x10	; 16
     ac6:	b2 2e       	mov	r11, r18
     ac8:	b4 fe       	sbrs	r11, 4
     aca:	0d c0       	rjmp	.+26     	; 0xae6 <vfprintf+0x256>
     acc:	8b 2d       	mov	r24, r11
     ace:	84 60       	ori	r24, 0x04	; 4
     ad0:	b8 2e       	mov	r11, r24
     ad2:	09 c0       	rjmp	.+18     	; 0xae6 <vfprintf+0x256>
     ad4:	24 ff       	sbrs	r18, 4
     ad6:	0a c0       	rjmp	.+20     	; 0xaec <vfprintf+0x25c>
     ad8:	9f 2f       	mov	r25, r31
     ada:	96 60       	ori	r25, 0x06	; 6
     adc:	b9 2e       	mov	r11, r25
     ade:	06 c0       	rjmp	.+12     	; 0xaec <vfprintf+0x25c>
     ae0:	28 e0       	ldi	r18, 0x08	; 8
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <vfprintf+0x260>
     ae6:	20 e1       	ldi	r18, 0x10	; 16
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <vfprintf+0x260>
     aec:	20 e1       	ldi	r18, 0x10	; 16
     aee:	32 e0       	ldi	r19, 0x02	; 2
     af0:	f8 01       	movw	r30, r16
     af2:	b7 fe       	sbrs	r11, 7
     af4:	07 c0       	rjmp	.+14     	; 0xb04 <vfprintf+0x274>
     af6:	60 81       	ld	r22, Z
     af8:	71 81       	ldd	r23, Z+1	; 0x01
     afa:	82 81       	ldd	r24, Z+2	; 0x02
     afc:	93 81       	ldd	r25, Z+3	; 0x03
     afe:	0c 5f       	subi	r16, 0xFC	; 252
     b00:	1f 4f       	sbci	r17, 0xFF	; 255
     b02:	06 c0       	rjmp	.+12     	; 0xb10 <vfprintf+0x280>
     b04:	60 81       	ld	r22, Z
     b06:	71 81       	ldd	r23, Z+1	; 0x01
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 5f       	subi	r16, 0xFE	; 254
     b0e:	1f 4f       	sbci	r17, 0xFF	; 255
     b10:	a4 01       	movw	r20, r8
     b12:	0e 94 ac 07 	call	0xf58	; 0xf58 <__ultoa_invert>
     b16:	a8 2e       	mov	r10, r24
     b18:	a8 18       	sub	r10, r8
     b1a:	fb 2d       	mov	r31, r11
     b1c:	ff 77       	andi	r31, 0x7F	; 127
     b1e:	bf 2e       	mov	r11, r31
     b20:	b6 fe       	sbrs	r11, 6
     b22:	0b c0       	rjmp	.+22     	; 0xb3a <vfprintf+0x2aa>
     b24:	2b 2d       	mov	r18, r11
     b26:	2e 7f       	andi	r18, 0xFE	; 254
     b28:	a5 14       	cp	r10, r5
     b2a:	50 f4       	brcc	.+20     	; 0xb40 <vfprintf+0x2b0>
     b2c:	b4 fe       	sbrs	r11, 4
     b2e:	0a c0       	rjmp	.+20     	; 0xb44 <vfprintf+0x2b4>
     b30:	b2 fc       	sbrc	r11, 2
     b32:	08 c0       	rjmp	.+16     	; 0xb44 <vfprintf+0x2b4>
     b34:	2b 2d       	mov	r18, r11
     b36:	2e 7e       	andi	r18, 0xEE	; 238
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <vfprintf+0x2b4>
     b3a:	7a 2c       	mov	r7, r10
     b3c:	2b 2d       	mov	r18, r11
     b3e:	03 c0       	rjmp	.+6      	; 0xb46 <vfprintf+0x2b6>
     b40:	7a 2c       	mov	r7, r10
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <vfprintf+0x2b6>
     b44:	75 2c       	mov	r7, r5
     b46:	24 ff       	sbrs	r18, 4
     b48:	0d c0       	rjmp	.+26     	; 0xb64 <vfprintf+0x2d4>
     b4a:	fe 01       	movw	r30, r28
     b4c:	ea 0d       	add	r30, r10
     b4e:	f1 1d       	adc	r31, r1
     b50:	80 81       	ld	r24, Z
     b52:	80 33       	cpi	r24, 0x30	; 48
     b54:	11 f4       	brne	.+4      	; 0xb5a <vfprintf+0x2ca>
     b56:	29 7e       	andi	r18, 0xE9	; 233
     b58:	09 c0       	rjmp	.+18     	; 0xb6c <vfprintf+0x2dc>
     b5a:	22 ff       	sbrs	r18, 2
     b5c:	06 c0       	rjmp	.+12     	; 0xb6a <vfprintf+0x2da>
     b5e:	73 94       	inc	r7
     b60:	73 94       	inc	r7
     b62:	04 c0       	rjmp	.+8      	; 0xb6c <vfprintf+0x2dc>
     b64:	82 2f       	mov	r24, r18
     b66:	86 78       	andi	r24, 0x86	; 134
     b68:	09 f0       	breq	.+2      	; 0xb6c <vfprintf+0x2dc>
     b6a:	73 94       	inc	r7
     b6c:	23 fd       	sbrc	r18, 3
     b6e:	13 c0       	rjmp	.+38     	; 0xb96 <vfprintf+0x306>
     b70:	20 ff       	sbrs	r18, 0
     b72:	06 c0       	rjmp	.+12     	; 0xb80 <vfprintf+0x2f0>
     b74:	5a 2c       	mov	r5, r10
     b76:	73 14       	cp	r7, r3
     b78:	18 f4       	brcc	.+6      	; 0xb80 <vfprintf+0x2f0>
     b7a:	53 0c       	add	r5, r3
     b7c:	57 18       	sub	r5, r7
     b7e:	73 2c       	mov	r7, r3
     b80:	73 14       	cp	r7, r3
     b82:	68 f4       	brcc	.+26     	; 0xb9e <vfprintf+0x30e>
     b84:	b7 01       	movw	r22, r14
     b86:	80 e2       	ldi	r24, 0x20	; 32
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	2c 87       	std	Y+12, r18	; 0x0c
     b8c:	0e 94 7a 07 	call	0xef4	; 0xef4 <fputc>
     b90:	73 94       	inc	r7
     b92:	2c 85       	ldd	r18, Y+12	; 0x0c
     b94:	f5 cf       	rjmp	.-22     	; 0xb80 <vfprintf+0x2f0>
     b96:	73 14       	cp	r7, r3
     b98:	10 f4       	brcc	.+4      	; 0xb9e <vfprintf+0x30e>
     b9a:	37 18       	sub	r3, r7
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <vfprintf+0x310>
     b9e:	31 2c       	mov	r3, r1
     ba0:	24 ff       	sbrs	r18, 4
     ba2:	12 c0       	rjmp	.+36     	; 0xbc8 <vfprintf+0x338>
     ba4:	b7 01       	movw	r22, r14
     ba6:	80 e3       	ldi	r24, 0x30	; 48
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	2c 87       	std	Y+12, r18	; 0x0c
     bac:	0e 94 7a 07 	call	0xef4	; 0xef4 <fputc>
     bb0:	2c 85       	ldd	r18, Y+12	; 0x0c
     bb2:	22 ff       	sbrs	r18, 2
     bb4:	17 c0       	rjmp	.+46     	; 0xbe4 <vfprintf+0x354>
     bb6:	21 ff       	sbrs	r18, 1
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <vfprintf+0x330>
     bba:	88 e5       	ldi	r24, 0x58	; 88
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <vfprintf+0x334>
     bc0:	88 e7       	ldi	r24, 0x78	; 120
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	b7 01       	movw	r22, r14
     bc6:	0c c0       	rjmp	.+24     	; 0xbe0 <vfprintf+0x350>
     bc8:	82 2f       	mov	r24, r18
     bca:	86 78       	andi	r24, 0x86	; 134
     bcc:	59 f0       	breq	.+22     	; 0xbe4 <vfprintf+0x354>
     bce:	21 fd       	sbrc	r18, 1
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <vfprintf+0x346>
     bd2:	80 e2       	ldi	r24, 0x20	; 32
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <vfprintf+0x348>
     bd6:	8b e2       	ldi	r24, 0x2B	; 43
     bd8:	27 fd       	sbrc	r18, 7
     bda:	8d e2       	ldi	r24, 0x2D	; 45
     bdc:	b7 01       	movw	r22, r14
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 7a 07 	call	0xef4	; 0xef4 <fputc>
     be4:	a5 14       	cp	r10, r5
     be6:	38 f4       	brcc	.+14     	; 0xbf6 <vfprintf+0x366>
     be8:	b7 01       	movw	r22, r14
     bea:	80 e3       	ldi	r24, 0x30	; 48
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 7a 07 	call	0xef4	; 0xef4 <fputc>
     bf2:	5a 94       	dec	r5
     bf4:	f7 cf       	rjmp	.-18     	; 0xbe4 <vfprintf+0x354>
     bf6:	aa 94       	dec	r10
     bf8:	f4 01       	movw	r30, r8
     bfa:	ea 0d       	add	r30, r10
     bfc:	f1 1d       	adc	r31, r1
     bfe:	80 81       	ld	r24, Z
     c00:	b7 01       	movw	r22, r14
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 7a 07 	call	0xef4	; 0xef4 <fputc>
     c08:	a1 10       	cpse	r10, r1
     c0a:	f5 cf       	rjmp	.-22     	; 0xbf6 <vfprintf+0x366>
     c0c:	33 20       	and	r3, r3
     c0e:	09 f4       	brne	.+2      	; 0xc12 <vfprintf+0x382>
     c10:	51 ce       	rjmp	.-862    	; 0x8b4 <vfprintf+0x24>
     c12:	b7 01       	movw	r22, r14
     c14:	80 e2       	ldi	r24, 0x20	; 32
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 7a 07 	call	0xef4	; 0xef4 <fputc>
     c1c:	3a 94       	dec	r3
     c1e:	f6 cf       	rjmp	.-20     	; 0xc0c <vfprintf+0x37c>
     c20:	f7 01       	movw	r30, r14
     c22:	86 81       	ldd	r24, Z+6	; 0x06
     c24:	97 81       	ldd	r25, Z+7	; 0x07
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <vfprintf+0x39c>
     c28:	8f ef       	ldi	r24, 0xFF	; 255
     c2a:	9f ef       	ldi	r25, 0xFF	; 255
     c2c:	2c 96       	adiw	r28, 0x0c	; 12
     c2e:	e2 e1       	ldi	r30, 0x12	; 18
     c30:	0c 94 26 08 	jmp	0x104c	; 0x104c <__epilogue_restores__>

00000c34 <calloc>:
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	86 9f       	mul	r24, r22
     c3e:	80 01       	movw	r16, r0
     c40:	87 9f       	mul	r24, r23
     c42:	10 0d       	add	r17, r0
     c44:	96 9f       	mul	r25, r22
     c46:	10 0d       	add	r17, r0
     c48:	11 24       	eor	r1, r1
     c4a:	c8 01       	movw	r24, r16
     c4c:	0e 94 36 06 	call	0xc6c	; 0xc6c <malloc>
     c50:	ec 01       	movw	r28, r24
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	29 f0       	breq	.+10     	; 0xc60 <calloc+0x2c>
     c56:	a8 01       	movw	r20, r16
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	0e 94 68 07 	call	0xed0	; 0xed0 <memset>
     c60:	ce 01       	movw	r24, r28
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	08 95       	ret

00000c6c <malloc>:
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	91 05       	cpc	r25, r1
     c74:	10 f4       	brcc	.+4      	; 0xc7a <malloc+0xe>
     c76:	82 e0       	ldi	r24, 0x02	; 2
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	e0 91 9e 01 	lds	r30, 0x019E
     c7e:	f0 91 9f 01 	lds	r31, 0x019F
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	30 97       	sbiw	r30, 0x00	; 0
     c8c:	39 f1       	breq	.+78     	; 0xcdc <malloc+0x70>
     c8e:	40 81       	ld	r20, Z
     c90:	51 81       	ldd	r21, Z+1	; 0x01
     c92:	48 17       	cp	r20, r24
     c94:	59 07       	cpc	r21, r25
     c96:	b8 f0       	brcs	.+46     	; 0xcc6 <malloc+0x5a>
     c98:	48 17       	cp	r20, r24
     c9a:	59 07       	cpc	r21, r25
     c9c:	71 f4       	brne	.+28     	; 0xcba <malloc+0x4e>
     c9e:	82 81       	ldd	r24, Z+2	; 0x02
     ca0:	93 81       	ldd	r25, Z+3	; 0x03
     ca2:	10 97       	sbiw	r26, 0x00	; 0
     ca4:	29 f0       	breq	.+10     	; 0xcb0 <malloc+0x44>
     ca6:	13 96       	adiw	r26, 0x03	; 3
     ca8:	9c 93       	st	X, r25
     caa:	8e 93       	st	-X, r24
     cac:	12 97       	sbiw	r26, 0x02	; 2
     cae:	2c c0       	rjmp	.+88     	; 0xd08 <malloc+0x9c>
     cb0:	90 93 9f 01 	sts	0x019F, r25
     cb4:	80 93 9e 01 	sts	0x019E, r24
     cb8:	27 c0       	rjmp	.+78     	; 0xd08 <malloc+0x9c>
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	31 f0       	breq	.+12     	; 0xccc <malloc+0x60>
     cc0:	42 17       	cp	r20, r18
     cc2:	53 07       	cpc	r21, r19
     cc4:	18 f0       	brcs	.+6      	; 0xccc <malloc+0x60>
     cc6:	a9 01       	movw	r20, r18
     cc8:	db 01       	movw	r26, r22
     cca:	01 c0       	rjmp	.+2      	; 0xcce <malloc+0x62>
     ccc:	ef 01       	movw	r28, r30
     cce:	9a 01       	movw	r18, r20
     cd0:	bd 01       	movw	r22, r26
     cd2:	df 01       	movw	r26, r30
     cd4:	02 80       	ldd	r0, Z+2	; 0x02
     cd6:	f3 81       	ldd	r31, Z+3	; 0x03
     cd8:	e0 2d       	mov	r30, r0
     cda:	d7 cf       	rjmp	.-82     	; 0xc8a <malloc+0x1e>
     cdc:	21 15       	cp	r18, r1
     cde:	31 05       	cpc	r19, r1
     ce0:	f9 f0       	breq	.+62     	; 0xd20 <malloc+0xb4>
     ce2:	28 1b       	sub	r18, r24
     ce4:	39 0b       	sbc	r19, r25
     ce6:	24 30       	cpi	r18, 0x04	; 4
     ce8:	31 05       	cpc	r19, r1
     cea:	80 f4       	brcc	.+32     	; 0xd0c <malloc+0xa0>
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	9b 81       	ldd	r25, Y+3	; 0x03
     cf0:	61 15       	cp	r22, r1
     cf2:	71 05       	cpc	r23, r1
     cf4:	21 f0       	breq	.+8      	; 0xcfe <malloc+0x92>
     cf6:	fb 01       	movw	r30, r22
     cf8:	93 83       	std	Z+3, r25	; 0x03
     cfa:	82 83       	std	Z+2, r24	; 0x02
     cfc:	04 c0       	rjmp	.+8      	; 0xd06 <malloc+0x9a>
     cfe:	90 93 9f 01 	sts	0x019F, r25
     d02:	80 93 9e 01 	sts	0x019E, r24
     d06:	fe 01       	movw	r30, r28
     d08:	32 96       	adiw	r30, 0x02	; 2
     d0a:	44 c0       	rjmp	.+136    	; 0xd94 <malloc+0x128>
     d0c:	fe 01       	movw	r30, r28
     d0e:	e2 0f       	add	r30, r18
     d10:	f3 1f       	adc	r31, r19
     d12:	81 93       	st	Z+, r24
     d14:	91 93       	st	Z+, r25
     d16:	22 50       	subi	r18, 0x02	; 2
     d18:	31 09       	sbc	r19, r1
     d1a:	39 83       	std	Y+1, r19	; 0x01
     d1c:	28 83       	st	Y, r18
     d1e:	3a c0       	rjmp	.+116    	; 0xd94 <malloc+0x128>
     d20:	20 91 9c 01 	lds	r18, 0x019C
     d24:	30 91 9d 01 	lds	r19, 0x019D
     d28:	23 2b       	or	r18, r19
     d2a:	41 f4       	brne	.+16     	; 0xd3c <malloc+0xd0>
     d2c:	20 91 02 01 	lds	r18, 0x0102
     d30:	30 91 03 01 	lds	r19, 0x0103
     d34:	30 93 9d 01 	sts	0x019D, r19
     d38:	20 93 9c 01 	sts	0x019C, r18
     d3c:	20 91 00 01 	lds	r18, 0x0100
     d40:	30 91 01 01 	lds	r19, 0x0101
     d44:	21 15       	cp	r18, r1
     d46:	31 05       	cpc	r19, r1
     d48:	41 f4       	brne	.+16     	; 0xd5a <malloc+0xee>
     d4a:	2d b7       	in	r18, 0x3d	; 61
     d4c:	3e b7       	in	r19, 0x3e	; 62
     d4e:	40 91 04 01 	lds	r20, 0x0104
     d52:	50 91 05 01 	lds	r21, 0x0105
     d56:	24 1b       	sub	r18, r20
     d58:	35 0b       	sbc	r19, r21
     d5a:	e0 91 9c 01 	lds	r30, 0x019C
     d5e:	f0 91 9d 01 	lds	r31, 0x019D
     d62:	e2 17       	cp	r30, r18
     d64:	f3 07       	cpc	r31, r19
     d66:	a0 f4       	brcc	.+40     	; 0xd90 <malloc+0x124>
     d68:	2e 1b       	sub	r18, r30
     d6a:	3f 0b       	sbc	r19, r31
     d6c:	28 17       	cp	r18, r24
     d6e:	39 07       	cpc	r19, r25
     d70:	78 f0       	brcs	.+30     	; 0xd90 <malloc+0x124>
     d72:	ac 01       	movw	r20, r24
     d74:	4e 5f       	subi	r20, 0xFE	; 254
     d76:	5f 4f       	sbci	r21, 0xFF	; 255
     d78:	24 17       	cp	r18, r20
     d7a:	35 07       	cpc	r19, r21
     d7c:	48 f0       	brcs	.+18     	; 0xd90 <malloc+0x124>
     d7e:	4e 0f       	add	r20, r30
     d80:	5f 1f       	adc	r21, r31
     d82:	50 93 9d 01 	sts	0x019D, r21
     d86:	40 93 9c 01 	sts	0x019C, r20
     d8a:	81 93       	st	Z+, r24
     d8c:	91 93       	st	Z+, r25
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <malloc+0x128>
     d90:	e0 e0       	ldi	r30, 0x00	; 0
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	cf 01       	movw	r24, r30
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <free>:
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	09 f4       	brne	.+2      	; 0xda6 <free+0xa>
     da4:	87 c0       	rjmp	.+270    	; 0xeb4 <free+0x118>
     da6:	fc 01       	movw	r30, r24
     da8:	32 97       	sbiw	r30, 0x02	; 2
     daa:	13 82       	std	Z+3, r1	; 0x03
     dac:	12 82       	std	Z+2, r1	; 0x02
     dae:	c0 91 9e 01 	lds	r28, 0x019E
     db2:	d0 91 9f 01 	lds	r29, 0x019F
     db6:	20 97       	sbiw	r28, 0x00	; 0
     db8:	81 f4       	brne	.+32     	; 0xdda <free+0x3e>
     dba:	20 81       	ld	r18, Z
     dbc:	31 81       	ldd	r19, Z+1	; 0x01
     dbe:	28 0f       	add	r18, r24
     dc0:	39 1f       	adc	r19, r25
     dc2:	80 91 9c 01 	lds	r24, 0x019C
     dc6:	90 91 9d 01 	lds	r25, 0x019D
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	79 f5       	brne	.+94     	; 0xe2e <free+0x92>
     dd0:	f0 93 9d 01 	sts	0x019D, r31
     dd4:	e0 93 9c 01 	sts	0x019C, r30
     dd8:	6d c0       	rjmp	.+218    	; 0xeb4 <free+0x118>
     dda:	de 01       	movw	r26, r28
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	ae 17       	cp	r26, r30
     de2:	bf 07       	cpc	r27, r31
     de4:	50 f4       	brcc	.+20     	; 0xdfa <free+0x5e>
     de6:	12 96       	adiw	r26, 0x02	; 2
     de8:	4d 91       	ld	r20, X+
     dea:	5c 91       	ld	r21, X
     dec:	13 97       	sbiw	r26, 0x03	; 3
     dee:	9d 01       	movw	r18, r26
     df0:	41 15       	cp	r20, r1
     df2:	51 05       	cpc	r21, r1
     df4:	09 f1       	breq	.+66     	; 0xe38 <free+0x9c>
     df6:	da 01       	movw	r26, r20
     df8:	f3 cf       	rjmp	.-26     	; 0xde0 <free+0x44>
     dfa:	b3 83       	std	Z+3, r27	; 0x03
     dfc:	a2 83       	std	Z+2, r26	; 0x02
     dfe:	40 81       	ld	r20, Z
     e00:	51 81       	ldd	r21, Z+1	; 0x01
     e02:	84 0f       	add	r24, r20
     e04:	95 1f       	adc	r25, r21
     e06:	8a 17       	cp	r24, r26
     e08:	9b 07       	cpc	r25, r27
     e0a:	71 f4       	brne	.+28     	; 0xe28 <free+0x8c>
     e0c:	8d 91       	ld	r24, X+
     e0e:	9c 91       	ld	r25, X
     e10:	11 97       	sbiw	r26, 0x01	; 1
     e12:	84 0f       	add	r24, r20
     e14:	95 1f       	adc	r25, r21
     e16:	02 96       	adiw	r24, 0x02	; 2
     e18:	91 83       	std	Z+1, r25	; 0x01
     e1a:	80 83       	st	Z, r24
     e1c:	12 96       	adiw	r26, 0x02	; 2
     e1e:	8d 91       	ld	r24, X+
     e20:	9c 91       	ld	r25, X
     e22:	13 97       	sbiw	r26, 0x03	; 3
     e24:	93 83       	std	Z+3, r25	; 0x03
     e26:	82 83       	std	Z+2, r24	; 0x02
     e28:	21 15       	cp	r18, r1
     e2a:	31 05       	cpc	r19, r1
     e2c:	29 f4       	brne	.+10     	; 0xe38 <free+0x9c>
     e2e:	f0 93 9f 01 	sts	0x019F, r31
     e32:	e0 93 9e 01 	sts	0x019E, r30
     e36:	3e c0       	rjmp	.+124    	; 0xeb4 <free+0x118>
     e38:	d9 01       	movw	r26, r18
     e3a:	13 96       	adiw	r26, 0x03	; 3
     e3c:	fc 93       	st	X, r31
     e3e:	ee 93       	st	-X, r30
     e40:	12 97       	sbiw	r26, 0x02	; 2
     e42:	4d 91       	ld	r20, X+
     e44:	5d 91       	ld	r21, X+
     e46:	a4 0f       	add	r26, r20
     e48:	b5 1f       	adc	r27, r21
     e4a:	ea 17       	cp	r30, r26
     e4c:	fb 07       	cpc	r31, r27
     e4e:	79 f4       	brne	.+30     	; 0xe6e <free+0xd2>
     e50:	80 81       	ld	r24, Z
     e52:	91 81       	ldd	r25, Z+1	; 0x01
     e54:	84 0f       	add	r24, r20
     e56:	95 1f       	adc	r25, r21
     e58:	02 96       	adiw	r24, 0x02	; 2
     e5a:	d9 01       	movw	r26, r18
     e5c:	11 96       	adiw	r26, 0x01	; 1
     e5e:	9c 93       	st	X, r25
     e60:	8e 93       	st	-X, r24
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	13 96       	adiw	r26, 0x03	; 3
     e68:	9c 93       	st	X, r25
     e6a:	8e 93       	st	-X, r24
     e6c:	12 97       	sbiw	r26, 0x02	; 2
     e6e:	e0 e0       	ldi	r30, 0x00	; 0
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	9b 81       	ldd	r25, Y+3	; 0x03
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	19 f0       	breq	.+6      	; 0xe80 <free+0xe4>
     e7a:	fe 01       	movw	r30, r28
     e7c:	ec 01       	movw	r28, r24
     e7e:	f9 cf       	rjmp	.-14     	; 0xe72 <free+0xd6>
     e80:	ce 01       	movw	r24, r28
     e82:	02 96       	adiw	r24, 0x02	; 2
     e84:	28 81       	ld	r18, Y
     e86:	39 81       	ldd	r19, Y+1	; 0x01
     e88:	82 0f       	add	r24, r18
     e8a:	93 1f       	adc	r25, r19
     e8c:	20 91 9c 01 	lds	r18, 0x019C
     e90:	30 91 9d 01 	lds	r19, 0x019D
     e94:	28 17       	cp	r18, r24
     e96:	39 07       	cpc	r19, r25
     e98:	69 f4       	brne	.+26     	; 0xeb4 <free+0x118>
     e9a:	30 97       	sbiw	r30, 0x00	; 0
     e9c:	29 f4       	brne	.+10     	; 0xea8 <free+0x10c>
     e9e:	10 92 9f 01 	sts	0x019F, r1
     ea2:	10 92 9e 01 	sts	0x019E, r1
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <free+0x110>
     ea8:	13 82       	std	Z+3, r1	; 0x03
     eaa:	12 82       	std	Z+2, r1	; 0x02
     eac:	d0 93 9d 01 	sts	0x019D, r29
     eb0:	c0 93 9c 01 	sts	0x019C, r28
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <strnlen_P>:
     eba:	fc 01       	movw	r30, r24
     ebc:	05 90       	lpm	r0, Z+
     ebe:	61 50       	subi	r22, 0x01	; 1
     ec0:	70 40       	sbci	r23, 0x00	; 0
     ec2:	01 10       	cpse	r0, r1
     ec4:	d8 f7       	brcc	.-10     	; 0xebc <strnlen_P+0x2>
     ec6:	80 95       	com	r24
     ec8:	90 95       	com	r25
     eca:	8e 0f       	add	r24, r30
     ecc:	9f 1f       	adc	r25, r31
     ece:	08 95       	ret

00000ed0 <memset>:
     ed0:	dc 01       	movw	r26, r24
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <memset+0x6>
     ed4:	6d 93       	st	X+, r22
     ed6:	41 50       	subi	r20, 0x01	; 1
     ed8:	50 40       	sbci	r21, 0x00	; 0
     eda:	e0 f7       	brcc	.-8      	; 0xed4 <memset+0x4>
     edc:	08 95       	ret

00000ede <strnlen>:
     ede:	fc 01       	movw	r30, r24
     ee0:	61 50       	subi	r22, 0x01	; 1
     ee2:	70 40       	sbci	r23, 0x00	; 0
     ee4:	01 90       	ld	r0, Z+
     ee6:	01 10       	cpse	r0, r1
     ee8:	d8 f7       	brcc	.-10     	; 0xee0 <strnlen+0x2>
     eea:	80 95       	com	r24
     eec:	90 95       	com	r25
     eee:	8e 0f       	add	r24, r30
     ef0:	9f 1f       	adc	r25, r31
     ef2:	08 95       	ret

00000ef4 <fputc>:
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	18 2f       	mov	r17, r24
     efe:	09 2f       	mov	r16, r25
     f00:	eb 01       	movw	r28, r22
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	81 fd       	sbrc	r24, 1
     f06:	03 c0       	rjmp	.+6      	; 0xf0e <fputc+0x1a>
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	9f ef       	ldi	r25, 0xFF	; 255
     f0c:	20 c0       	rjmp	.+64     	; 0xf4e <fputc+0x5a>
     f0e:	82 ff       	sbrs	r24, 2
     f10:	10 c0       	rjmp	.+32     	; 0xf32 <fputc+0x3e>
     f12:	4e 81       	ldd	r20, Y+6	; 0x06
     f14:	5f 81       	ldd	r21, Y+7	; 0x07
     f16:	2c 81       	ldd	r18, Y+4	; 0x04
     f18:	3d 81       	ldd	r19, Y+5	; 0x05
     f1a:	42 17       	cp	r20, r18
     f1c:	53 07       	cpc	r21, r19
     f1e:	7c f4       	brge	.+30     	; 0xf3e <fputc+0x4a>
     f20:	e8 81       	ld	r30, Y
     f22:	f9 81       	ldd	r31, Y+1	; 0x01
     f24:	9f 01       	movw	r18, r30
     f26:	2f 5f       	subi	r18, 0xFF	; 255
     f28:	3f 4f       	sbci	r19, 0xFF	; 255
     f2a:	39 83       	std	Y+1, r19	; 0x01
     f2c:	28 83       	st	Y, r18
     f2e:	10 83       	st	Z, r17
     f30:	06 c0       	rjmp	.+12     	; 0xf3e <fputc+0x4a>
     f32:	e8 85       	ldd	r30, Y+8	; 0x08
     f34:	f9 85       	ldd	r31, Y+9	; 0x09
     f36:	81 2f       	mov	r24, r17
     f38:	09 95       	icall
     f3a:	89 2b       	or	r24, r25
     f3c:	29 f7       	brne	.-54     	; 0xf08 <fputc+0x14>
     f3e:	2e 81       	ldd	r18, Y+6	; 0x06
     f40:	3f 81       	ldd	r19, Y+7	; 0x07
     f42:	2f 5f       	subi	r18, 0xFF	; 255
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	3f 83       	std	Y+7, r19	; 0x07
     f48:	2e 83       	std	Y+6, r18	; 0x06
     f4a:	81 2f       	mov	r24, r17
     f4c:	90 2f       	mov	r25, r16
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	08 95       	ret

00000f58 <__ultoa_invert>:
     f58:	fa 01       	movw	r30, r20
     f5a:	aa 27       	eor	r26, r26
     f5c:	28 30       	cpi	r18, 0x08	; 8
     f5e:	51 f1       	breq	.+84     	; 0xfb4 <__ultoa_invert+0x5c>
     f60:	20 31       	cpi	r18, 0x10	; 16
     f62:	81 f1       	breq	.+96     	; 0xfc4 <__ultoa_invert+0x6c>
     f64:	e8 94       	clt
     f66:	6f 93       	push	r22
     f68:	6e 7f       	andi	r22, 0xFE	; 254
     f6a:	6e 5f       	subi	r22, 0xFE	; 254
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	8f 4f       	sbci	r24, 0xFF	; 255
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	af 4f       	sbci	r26, 0xFF	; 255
     f74:	b1 e0       	ldi	r27, 0x01	; 1
     f76:	3e d0       	rcall	.+124    	; 0xff4 <__ultoa_invert+0x9c>
     f78:	b4 e0       	ldi	r27, 0x04	; 4
     f7a:	3c d0       	rcall	.+120    	; 0xff4 <__ultoa_invert+0x9c>
     f7c:	67 0f       	add	r22, r23
     f7e:	78 1f       	adc	r23, r24
     f80:	89 1f       	adc	r24, r25
     f82:	9a 1f       	adc	r25, r26
     f84:	a1 1d       	adc	r26, r1
     f86:	68 0f       	add	r22, r24
     f88:	79 1f       	adc	r23, r25
     f8a:	8a 1f       	adc	r24, r26
     f8c:	91 1d       	adc	r25, r1
     f8e:	a1 1d       	adc	r26, r1
     f90:	6a 0f       	add	r22, r26
     f92:	71 1d       	adc	r23, r1
     f94:	81 1d       	adc	r24, r1
     f96:	91 1d       	adc	r25, r1
     f98:	a1 1d       	adc	r26, r1
     f9a:	20 d0       	rcall	.+64     	; 0xfdc <__ultoa_invert+0x84>
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <__ultoa_invert+0x48>
     f9e:	68 94       	set
     fa0:	3f 91       	pop	r19
     fa2:	2a e0       	ldi	r18, 0x0A	; 10
     fa4:	26 9f       	mul	r18, r22
     fa6:	11 24       	eor	r1, r1
     fa8:	30 19       	sub	r19, r0
     faa:	30 5d       	subi	r19, 0xD0	; 208
     fac:	31 93       	st	Z+, r19
     fae:	de f6       	brtc	.-74     	; 0xf66 <__ultoa_invert+0xe>
     fb0:	cf 01       	movw	r24, r30
     fb2:	08 95       	ret
     fb4:	46 2f       	mov	r20, r22
     fb6:	47 70       	andi	r20, 0x07	; 7
     fb8:	40 5d       	subi	r20, 0xD0	; 208
     fba:	41 93       	st	Z+, r20
     fbc:	b3 e0       	ldi	r27, 0x03	; 3
     fbe:	0f d0       	rcall	.+30     	; 0xfde <__ultoa_invert+0x86>
     fc0:	c9 f7       	brne	.-14     	; 0xfb4 <__ultoa_invert+0x5c>
     fc2:	f6 cf       	rjmp	.-20     	; 0xfb0 <__ultoa_invert+0x58>
     fc4:	46 2f       	mov	r20, r22
     fc6:	4f 70       	andi	r20, 0x0F	; 15
     fc8:	40 5d       	subi	r20, 0xD0	; 208
     fca:	4a 33       	cpi	r20, 0x3A	; 58
     fcc:	18 f0       	brcs	.+6      	; 0xfd4 <__ultoa_invert+0x7c>
     fce:	49 5d       	subi	r20, 0xD9	; 217
     fd0:	31 fd       	sbrc	r19, 1
     fd2:	40 52       	subi	r20, 0x20	; 32
     fd4:	41 93       	st	Z+, r20
     fd6:	02 d0       	rcall	.+4      	; 0xfdc <__ultoa_invert+0x84>
     fd8:	a9 f7       	brne	.-22     	; 0xfc4 <__ultoa_invert+0x6c>
     fda:	ea cf       	rjmp	.-44     	; 0xfb0 <__ultoa_invert+0x58>
     fdc:	b4 e0       	ldi	r27, 0x04	; 4
     fde:	a6 95       	lsr	r26
     fe0:	97 95       	ror	r25
     fe2:	87 95       	ror	r24
     fe4:	77 95       	ror	r23
     fe6:	67 95       	ror	r22
     fe8:	ba 95       	dec	r27
     fea:	c9 f7       	brne	.-14     	; 0xfde <__ultoa_invert+0x86>
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	61 05       	cpc	r22, r1
     ff0:	71 05       	cpc	r23, r1
     ff2:	08 95       	ret
     ff4:	9b 01       	movw	r18, r22
     ff6:	ac 01       	movw	r20, r24
     ff8:	0a 2e       	mov	r0, r26
     ffa:	06 94       	lsr	r0
     ffc:	57 95       	ror	r21
     ffe:	47 95       	ror	r20
    1000:	37 95       	ror	r19
    1002:	27 95       	ror	r18
    1004:	ba 95       	dec	r27
    1006:	c9 f7       	brne	.-14     	; 0xffa <__ultoa_invert+0xa2>
    1008:	62 0f       	add	r22, r18
    100a:	73 1f       	adc	r23, r19
    100c:	84 1f       	adc	r24, r20
    100e:	95 1f       	adc	r25, r21
    1010:	a0 1d       	adc	r26, r0
    1012:	08 95       	ret

00001014 <__prologue_saves__>:
    1014:	2f 92       	push	r2
    1016:	3f 92       	push	r3
    1018:	4f 92       	push	r4
    101a:	5f 92       	push	r5
    101c:	6f 92       	push	r6
    101e:	7f 92       	push	r7
    1020:	8f 92       	push	r8
    1022:	9f 92       	push	r9
    1024:	af 92       	push	r10
    1026:	bf 92       	push	r11
    1028:	cf 92       	push	r12
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	ca 1b       	sub	r28, r26
    103e:	db 0b       	sbc	r29, r27
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	09 94       	ijmp

0000104c <__epilogue_restores__>:
    104c:	2a 88       	ldd	r2, Y+18	; 0x12
    104e:	39 88       	ldd	r3, Y+17	; 0x11
    1050:	48 88       	ldd	r4, Y+16	; 0x10
    1052:	5f 84       	ldd	r5, Y+15	; 0x0f
    1054:	6e 84       	ldd	r6, Y+14	; 0x0e
    1056:	7d 84       	ldd	r7, Y+13	; 0x0d
    1058:	8c 84       	ldd	r8, Y+12	; 0x0c
    105a:	9b 84       	ldd	r9, Y+11	; 0x0b
    105c:	aa 84       	ldd	r10, Y+10	; 0x0a
    105e:	b9 84       	ldd	r11, Y+9	; 0x09
    1060:	c8 84       	ldd	r12, Y+8	; 0x08
    1062:	df 80       	ldd	r13, Y+7	; 0x07
    1064:	ee 80       	ldd	r14, Y+6	; 0x06
    1066:	fd 80       	ldd	r15, Y+5	; 0x05
    1068:	0c 81       	ldd	r16, Y+4	; 0x04
    106a:	1b 81       	ldd	r17, Y+3	; 0x03
    106c:	aa 81       	ldd	r26, Y+2	; 0x02
    106e:	b9 81       	ldd	r27, Y+1	; 0x01
    1070:	ce 0f       	add	r28, r30
    1072:	d1 1d       	adc	r29, r1
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	ed 01       	movw	r28, r26
    1080:	08 95       	ret

00001082 <_exit>:
    1082:	f8 94       	cli

00001084 <__stop_program>:
    1084:	ff cf       	rjmp	.-2      	; 0x1084 <__stop_program>
